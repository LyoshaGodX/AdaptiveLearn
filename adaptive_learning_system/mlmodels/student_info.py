"""
–ú–æ–¥—É–ª—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç—É–¥–µ–Ω—Ç–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Django.
–í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—É–¥–µ–Ω—Ç–µ, –µ–≥–æ –ø–æ–ø—ã—Ç–∫–∞—Ö –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞—Ö –æ—Å–≤–æ–µ–Ω–∏—è –Ω–∞–≤—ã–∫–æ–≤.
"""

import os
import sys
import django
from datetime import datetime
from django.db import models
from django.utils import timezone


def setup_django():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞ –≤ sys.path
    project_root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
    sys.path.append(project_root)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ Django
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'adaptive_learning.settings')
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Django
    django.setup()


def get_student_info(student_id):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—É–¥–µ–Ω—Ç–µ –ø–æ –µ–≥–æ ID
    
    Args:
        student_id (int): ID —Å—Ç—É–¥–µ–Ω—Ç–∞
        
    Returns:
        dict: –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—Ç—É–¥–µ–Ω—Ç–µ –∏–ª–∏ None –µ—Å–ª–∏ —Å—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω
    """
    from student.models import StudentProfile, StudentCourseEnrollment
    from mlmodels.models import StudentSkillMastery, TaskAttempt, StudentLearningProfile
    from skills.models import Skill
    from methodist.models import Task
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å —Å—Ç—É–¥–µ–Ω—Ç–∞
        student = StudentProfile.objects.get(id=student_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –Ω–∞ –∫—É—Ä—Å—ã
        course_enrollments = StudentCourseEnrollment.objects.filter(student=student)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ø—ã—Ç–∫–∏ —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π
        task_attempts = TaskAttempt.objects.filter(student=student).order_by('-completed_at')
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Å–≤–æ–µ–Ω–∏–µ –Ω–∞–≤—ã–∫–æ–≤
        skill_masteries = StudentSkillMastery.objects.filter(student=student).order_by('-current_mastery_prob')
        
        # –ü–æ–ª—É—á–∞–µ–º –í–°–ï –Ω–∞–≤—ã–∫–∏ –∏–∑ –∫—É—Ä—Å–æ–≤ —Å—Ç—É–¥–µ–Ω—Ç–∞
        all_course_skills = Skill.objects.filter(
            courses__in=[enrollment.course for enrollment in course_enrollments]
        ).distinct().order_by('name')
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –æ–±—É—á–µ–Ω–∏—è (–µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
        try:
            learning_profile = StudentLearningProfile.objects.get(student=student)
        except StudentLearningProfile.DoesNotExist:
            learning_profile = None
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        student_info = {
            'profile': student,
            'course_enrollments': course_enrollments,
            'task_attempts': task_attempts,
            'skill_masteries': skill_masteries,
            'all_course_skills': all_course_skills,
            'learning_profile': learning_profile,
            'statistics': _calculate_statistics(student, task_attempts, skill_masteries, all_course_skills)
        }
        
        return student_info
        
    except StudentProfile.DoesNotExist:
        return None


def _calculate_statistics(student, task_attempts, skill_masteries, all_course_skills):
    """
    –í—ã—á–∏—Å–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –æ —Å—Ç—É–¥–µ–Ω—Ç–µ
    
    Args:
        student: –ü—Ä–æ—Ñ–∏–ª—å —Å—Ç—É–¥–µ–Ω—Ç–∞
        task_attempts: QuerySet –ø–æ–ø—ã—Ç–æ–∫ —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π
        skill_masteries: QuerySet –æ—Å–≤–æ–µ–Ω–∏—è –Ω–∞–≤—ã–∫–æ–≤
        all_course_skills: QuerySet –≤—Å–µ—Ö –Ω–∞–≤—ã–∫–æ–≤ –∏–∑ –∫—É—Ä—Å–æ–≤ —Å—Ç—É–¥–µ–Ω—Ç–∞
        
    Returns:
        dict: –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
    """
    total_attempts = task_attempts.count()
    correct_attempts = task_attempts.filter(is_correct=True).count()
    
    # –û–±—â–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å
    overall_accuracy = (correct_attempts / total_attempts * 100) if total_attempts > 0 else 0
    
    # –û—Å–≤–æ–µ–Ω–Ω—ã–µ –Ω–∞–≤—ã–∫–∏ (–ø–æ—Ä–æ–≥ 80%)
    mastered_skills = skill_masteries.filter(current_mastery_prob__gte=0.8).count()
    total_skills = all_course_skills.count()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–≤—ã–∫–æ–≤ –∏–∑ –∫—É—Ä—Å–æ–≤
    
    # –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ
    attempts_with_time = task_attempts.filter(time_spent__isnull=False)
    avg_time_seconds = attempts_with_time.aggregate(
        avg=models.Avg('time_spent')
    )['avg']
    avg_time_minutes = round(avg_time_seconds / 60, 2) if avg_time_seconds else 0
    
    # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
    week_ago = timezone.now() - timezone.timedelta(days=7)
    recent_activity = task_attempts.filter(completed_at__gte=week_ago).count()
    
    # –¢–æ–ø –Ω–∞–≤—ã–∫–æ–≤ –ø–æ –æ—Å–≤–æ–µ–Ω–∏—é
    top_skills = skill_masteries.order_by('-current_mastery_prob')[:5]
    
    # –°–∞–º—ã–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –Ω–∞–≤—ã–∫–∏
    problematic_skills = skill_masteries.filter(
        current_mastery_prob__lt=0.5,
        attempts_count__gte=3
    ).order_by('current_mastery_prob')[:5]
    
    return {
        'total_attempts': total_attempts,
        'correct_attempts': correct_attempts,
        'overall_accuracy': overall_accuracy,
        'mastered_skills_count': mastered_skills,
        'total_skills_count': total_skills,
        'mastery_percentage': (mastered_skills / total_skills * 100) if total_skills > 0 else 0,
        'avg_time_minutes': avg_time_minutes,
        'recent_activity_count': recent_activity,
        'top_skills': top_skills,
        'problematic_skills': problematic_skills
    }


def print_student_info(student_id):
    """
    –í—ã–≤–æ–¥–∏—Ç –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—É–¥–µ–Ω—Ç–µ –≤ –∫–æ–Ω—Å–æ–ª—å
    
    Args:
        student_id (int): ID —Å—Ç—É–¥–µ–Ω—Ç–∞
    """
    print("=" * 80)
    print(f"–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –°–¢–£–î–ï–ù–¢–ï (ID: {student_id})")
    print("=" * 80)
    
    student_info = get_student_info(student_id)
    
    if student_info is None:
        print(f"‚ùå –°—Ç—É–¥–µ–Ω—Ç —Å ID {student_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return
    
    student = student_info['profile']
    stats = student_info['statistics']
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç—É–¥–µ–Ω—Ç–µ
    print("\nüìã –û–°–ù–û–í–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:")
    print(f"   –§–ò–û: {student.full_name}")
    print(f"   Username: {student.user.username}")
    print(f"   Email: {student.email}")
    print(f"   –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: {student.organization or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}")
    print(f"   –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: {student.created_at.strftime('%d.%m.%Y %H:%M')}")
    print(f"   –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {student.updated_at.strftime('%d.%m.%Y %H:%M')}")
    print(f"   –°—Ç–∞—Ç—É—Å: {'–ê–∫—Ç–∏–≤–Ω—ã–π' if student.is_active else '–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–π'}")
    print(f"   –§–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è: {'–ï—Å—Ç—å' if student.has_photo else '–ù–µ—Ç'}")
    
    # –ó–∞–ø–∏—Å–∏ –Ω–∞ –∫—É—Ä—Å—ã
    print("\nüìö –ó–ê–ü–ò–°–ò –ù–ê –ö–£–†–°–´:")
    enrollments = student_info['course_enrollments']
    if enrollments.exists():
        for enrollment in enrollments:
            status_emoji = {
                'enrolled': 'üìù',
                'in_progress': '‚è≥',
                'completed': '‚úÖ',
                'suspended': '‚è∏Ô∏è',
                'dropped': '‚ùå'
            }.get(enrollment.status, '‚ùì')
            
            print(f"   {status_emoji} {enrollment.course.name}")
            print(f"      –°—Ç–∞—Ç—É—Å: {enrollment.get_status_display()}")
            print(f"      –ü—Ä–æ–≥—Ä–µ—Å—Å: {enrollment.progress_percentage}%")
            print(f"      –ó–∞–ø–∏—Å–∞–Ω: {enrollment.enrolled_at.strftime('%d.%m.%Y')}")
            if enrollment.completed_at:
                print(f"      –ó–∞–≤–µ—Ä—à–µ–Ω: {enrollment.completed_at.strftime('%d.%m.%Y')}")
            if enrollment.final_grade:
                print(f"      –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞: {enrollment.final_grade}")
    else:
        print("   –°—Ç—É–¥–µ–Ω—Ç –Ω–µ –∑–∞–ø–∏—Å–∞–Ω –Ω–∏ –Ω–∞ –æ–¥–∏–Ω –∫—É—Ä—Å")
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print(f"\nüìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"   –í—Å–µ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π: {stats['total_attempts']}")
    print(f"   –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {stats['correct_attempts']}")
    print(f"   –û–±—â–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å: {stats['overall_accuracy']:.1f}%")
    print(f"   –û—Å–≤–æ–µ–Ω–Ω—ã—Ö –Ω–∞–≤—ã–∫–æ–≤: {stats['mastered_skills_count']}/{stats['total_skills_count']}")
    print(f"   –ü—Ä–æ—Ü–µ–Ω—Ç –æ—Å–≤–æ–µ–Ω–∏—è –Ω–∞–≤—ã–∫–æ–≤: {stats['mastery_percentage']:.1f}%")
    print(f"   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ: {stats['avg_time_minutes']} –º–∏–Ω")
    print(f"   –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é: {stats['recent_activity_count']} –ø–æ–ø—ã—Ç–æ–∫")
    
    # –ü—Ä–æ—Ñ–∏–ª—å –æ–±—É—á–µ–Ω–∏—è
    learning_profile = student_info['learning_profile']
    if learning_profile:
        print(f"\nüéØ –ü–†–û–§–ò–õ–¨ –û–ë–£–ß–ï–ù–ò–Ø:")
        print(f"   –°–∫–æ—Ä–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è: {learning_profile.learning_speed:.2f}")
        print(f"   –£—Ä–æ–≤–µ–Ω—å –Ω–∞—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏: {learning_profile.persistence_level:.2f}")
        print(f"   –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: {learning_profile.get_difficulty_preference_display()}")
        print(f"   –ü–µ—Ä–≤–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {learning_profile.first_activity.strftime('%d.%m.%Y %H:%M') if learning_profile.first_activity else '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞'}")
        print(f"   –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {learning_profile.last_activity.strftime('%d.%m.%Y %H:%M') if learning_profile.last_activity else '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞'}")
      # –¢–æ–ø –Ω–∞–≤—ã–∫–æ–≤
    print(f"\nüèÜ –¢–û–ü-5 –ù–ê–í–´–ö–û–í –ü–û –û–°–í–û–ï–ù–ò–Æ:")
    if stats['top_skills']:
        for i, mastery in enumerate(stats['top_skills'], 1):
            prob_percent = mastery.current_mastery_prob * 100
            status = "‚úÖ" if mastery.is_mastered else "üîÑ"
            print(f"   {i}. {status} {mastery.skill.name}")
            print(f"      –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Å–≤–æ–µ–Ω–∏—è: {prob_percent:.1f}%")
            print(f"      –ü–æ–ø—ã—Ç–æ–∫: {mastery.attempts_count}, –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö: {mastery.correct_attempts}")
            print(f"      –¢–æ—á–Ω–æ—Å—Ç—å: {mastery.accuracy * 100:.1f}%")
    else:
        print("   –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –Ω–∞–≤—ã–∫–∞—Ö")

    # –ù–û–í–´–ô –†–ê–ó–î–ï–õ: –í—Å–µ –Ω–∞–≤—ã–∫–∏ —Å BKT —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏
    print(f"\nüß† –í–°–ï –ù–ê–í–´–ö–ò –ò–ó –ö–£–†–°–û–í –°–¢–£–î–ï–ù–¢–ê (–î–ï–¢–ê–õ–¨–ù–´–ô BKT –ê–ù–ê–õ–ò–ó):")
    all_skills = student_info['all_course_skills']
    skill_masteries_dict = {sm.skill.id: sm for sm in student_info['skill_masteries']}
    
    if all_skills:
        for i, skill in enumerate(all_skills, 1):
            mastery = skill_masteries_dict.get(skill.id)
            
            if mastery:
                # –ï—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –æ—Å–≤–æ–µ–Ω–∏–∏ –Ω–∞–≤—ã–∫–∞
                prob_percent = mastery.current_mastery_prob * 100
                status = "‚úÖ" if mastery.is_mastered else "üîÑ" if prob_percent >= 50 else "‚ùå"
                print(f"   {i}. {status} {skill.name}")
                print(f"      üìä –¢–ï–ö–£–©–ï–ï –°–û–°–¢–û–Ø–ù–ò–ï:")
                print(f"         ‚Ä¢ –¢–µ–∫—É—â–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Å–≤–æ–µ–Ω–∏—è: {prob_percent:.2f}%")
                print(f"         ‚Ä¢ –ü–æ–ø—ã—Ç–æ–∫: {mastery.attempts_count}, –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö: {mastery.correct_attempts}")
                print(f"         ‚Ä¢ –¢–æ—á–Ω–æ—Å—Ç—å: {mastery.accuracy * 100:.1f}%")
                print(f"         ‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {mastery.last_updated.strftime('%d.%m.%Y %H:%M')}")
                
                print(f"      üéØ BKT –ü–ê–†–ê–ú–ï–¢–†–´:")
                print(f"         ‚Ä¢ –ù–∞—á–∞–ª—å–Ω–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Å–≤–æ–µ–Ω–∏—è (P_L0): {mastery.initial_mastery_prob:.3f}")
                print(f"         ‚Ä¢ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–µ—Ä–µ—Ö–æ–¥–∞ (P_T): {mastery.transition_prob:.3f}")
                print(f"         ‚Ä¢ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É–≥–∞–¥—ã–≤–∞–Ω–∏—è (P_G): {mastery.guess_prob:.3f}")
                print(f"         ‚Ä¢ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—à–∏–±–∫–∏ (P_S): {mastery.slip_prob:.3f}")
                
                # –í—ã—á–∏—Å–ª—è–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –ø–æ BKT
                p_correct = mastery.current_mastery_prob * (1 - mastery.slip_prob) + \
                           (1 - mastery.current_mastery_prob) * mastery.guess_prob
                print(f"         ‚Ä¢ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞: {p_correct:.3f}")
                
            else:
                # –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –æ—Å–≤–æ–µ–Ω–∏–∏ –Ω–∞–≤—ã–∫–∞
                print(f"   {i}. ‚ö™ {skill.name}")
                print(f"      üìä –°–û–°–¢–û–Ø–ù–ò–ï: –ù–µ—Ç –ø–æ–ø—ã—Ç–æ–∫ —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π")
                print(f"      üéØ BKT –ü–ê–†–ê–ú–ï–¢–†–´: –ù–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
                print(f"         ‚Ä¢ –ë—É–¥—É—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –ø–æ–ø—ã—Ç–∫–µ —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è")
                print(f"         ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∏–ª–∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
    else:
        print("   –°—Ç—É–¥–µ–Ω—Ç –Ω–µ –∑–∞–ø–∏—Å–∞–Ω –Ω–∞ –∫—É—Ä—Å—ã –∏–ª–∏ –≤ –∫—É—Ä—Å–∞—Ö –Ω–µ—Ç –Ω–∞–≤—ã–∫–æ–≤")
    
    # –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –Ω–∞–≤—ã–∫–∏
    if stats['problematic_skills']:
        print(f"\n‚ö†Ô∏è  –ü–†–û–ë–õ–ï–ú–ù–´–ï –ù–ê–í–´–ö–ò (—Ç—Ä–µ–±—É—é—Ç –≤–Ω–∏–º–∞–Ω–∏—è):")
        for i, mastery in enumerate(stats['problematic_skills'], 1):
            prob_percent = mastery.current_mastery_prob * 100
            print(f"   {i}. ‚ùå {mastery.skill.name}")
            print(f"      –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Å–≤–æ–µ–Ω–∏—è: {prob_percent:.1f}%")
            print(f"      –ü–æ–ø—ã—Ç–æ–∫: {mastery.attempts_count}, –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö: {mastery.correct_attempts}")
            print(f"      –¢–æ—á–Ω–æ—Å—Ç—å: {mastery.accuracy * 100:.1f}%")
    
    # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–ø—ã—Ç–∫–∏
    print(f"\nüìù –ü–û–°–õ–ï–î–ù–ò–ï 10 –ü–û–ü–´–¢–û–ö –†–ï–®–ï–ù–ò–Ø –ó–ê–î–ê–ù–ò–ô:")
    recent_attempts = student_info['task_attempts'][:10]
    if recent_attempts:
        for attempt in recent_attempts:
            status = "‚úÖ" if attempt.is_correct else "‚ùå"
            time_info = f" ({attempt.duration_minutes} –º–∏–Ω)" if attempt.duration_minutes else ""
            print(f"   {status} {attempt.task.title}{time_info}")
            print(f"      –î–∞—Ç–∞: {attempt.completed_at.strftime('%d.%m.%Y %H:%M')}")
            if attempt.given_answer:
                print(f"      –û—Ç–≤–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞: {attempt.given_answer[:100]}...")
            print(f"      –ù–∞–≤—ã–∫–∏: {', '.join([skill.name for skill in attempt.task.skills.all()])}")
    else:
        print("   –ù–µ—Ç –ø–æ–ø—ã—Ç–æ–∫ —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π")
    
    print("\n" + "=" * 80)


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –º–æ–¥—É–ª—è"""
    print("–ú–æ–¥—É–ª—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç—É–¥–µ–Ω—Ç–µ")
    print("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö Django...")
    
    try:
        setup_django()
        print("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ!")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º ID —Å—Ç—É–¥–µ–Ω—Ç–∞
    try:
        student_id = input("\n–í–≤–µ–¥–∏—Ç–µ ID —Å—Ç—É–¥–µ–Ω—Ç–∞: ")
        student_id = int(student_id)
        
        print_student_info(student_id)
        
    except ValueError:
        print("‚ùå –û—à–∏–±–∫–∞: ID —Å—Ç—É–¥–µ–Ω—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
    except Exception as e:
        print(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    main()
