#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Ä–µ–∞–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ LLM –º–æ–¥–µ–ª–∏

–í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ—Ç —Ç–µ—Å—Ç –∑–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—Å—Ç–æ—è—â—É—é LLM –º–æ–¥–µ–ª—å, 
—á—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è –∏ —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∞–º—è—Ç–∏.
"""

import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ Django –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(str(Path(__file__).parent.parent.parent))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'adaptive_learning.settings')

import django
django.setup()

from mlmodels.llm.explanation_generator import ExplanationGenerator
from mlmodels.models import DQNRecommendation


def test_real_llm_loading():
    """–¢–µ—Å—Ç —Ä–µ–∞–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å LLM"""
    print("üß™ –¢–ï–°–¢ –†–ï–ê–õ–¨–ù–û–ô –ó–ê–ì–†–£–ó–ö–ò LLM")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
    generator = ExplanationGenerator(model_key='qwen2.5-0.5b', device='auto')
    
    print("üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏:")
    model_info = generator.model_manager.get_model_info()
    for key, value in model_info.items():
        print(f"  {key}: {value}")
    
    print(f"\nüöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º LLM –º–æ–¥–µ–ª—å...")
    print("   ‚ö†Ô∏è –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å
    success = generator.initialize(use_quantization=True)
    
    if not success:
        print("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ LLM")
        return False
    
    print("‚úÖ LLM —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_data = {
        'student_name': '–ê–ª–µ–∫—Å–µ–π',
        'task_title': '–†–∞–±–æ—Ç–∞ —Å–æ —Å–ª–æ–≤–∞—Ä—è–º–∏',
        'task_difficulty': 'beginner',
        'target_skill_info': [{
            'skill_name': '–°–ª–æ–≤–∞—Ä–∏ –≤ Python',
            'current_mastery_probability': 0.2
        }],
        'prerequisite_skills_snapshot': [{
            'skill_name': '–û—Å–Ω–æ–≤—ã Python',
            'mastery_probability': 0.8
        }],
        'student_progress_context': {
            'total_success_rate': 0.75
        }
    }
    
    print("\nü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é LLM...")
    explanation = generator.generate_recommendation_explanation(test_data)
    
    print(f"\nüìù –†–ï–ó–£–õ–¨–¢–ê–¢:")
    print(f"  {explanation}")
    print(f"  –î–ª–∏–Ω–∞: {len(explanation)} —Å–∏–º–≤–æ–ª–æ–≤")
    
    # –¢–µ—Å—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    print("\nüß™ –¢–ï–°–¢ –° –†–ï–ê–õ–¨–ù–´–ú–ò –î–ê–ù–ù–´–ú–ò –ò–ó –ë–î")
    recommendation = DQNRecommendation.objects.filter(
        target_skill_info__isnull=False
    ).order_by('-created_at').first()
    
    if recommendation:
        print(f"üìä –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è #{recommendation.id}")
        print(f"  –°—Ç—É–¥–µ–Ω—Ç: {recommendation.student.full_name}")
        print(f"  –ó–∞–¥–∞–Ω–∏–µ: {recommendation.task.title}")
        
        recommendation_data = {
            'student_name': recommendation.student.full_name.split()[0],
            'task_title': recommendation.task.title,
            'task_difficulty': recommendation.task.difficulty,
            'target_skill_info': recommendation.target_skill_info or [],
            'prerequisite_skills_snapshot': recommendation.prerequisite_skills_snapshot or [],
            'student_progress_context': recommendation.student_progress_context or {}
        }
        
        real_explanation = generator.generate_recommendation_explanation(recommendation_data)
        print(f"\nüìù –û–ë–™–Ø–°–ù–ï–ù–ò–ï –î–õ–Ø –†–ï–ê–õ–¨–ù–û–ô –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        print(f"  {real_explanation}")
        print(f"  –î–ª–∏–Ω–∞: {len(real_explanation)} —Å–∏–º–≤–æ–ª–æ–≤")
    
    print("\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
    return True


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –†–ï–ê–õ–¨–ù–û–ô LLM")
    print("=" * 80)
    
    try:
        success = test_real_llm_loading()
        
        print("\n" + "=" * 80)
        if success:
            print("üéâ –¢–ï–°–¢ –†–ï–ê–õ–¨–ù–û–ô LLM –ü–†–û–®–ï–õ –£–°–ü–ï–®–ù–û!")
            print("\nüìã LLM –ì–û–¢–û–í–ê –ö –ò–ù–¢–ï–ì–†–ê–¶–ò–ò:")
            print("1. –ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç")
            print("2. –ú–æ–∂–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å –≤ recommendation_manager_fixed.py")
            print("3. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π –≤ –ë–î")
        else:
            print("‚ùå –¢–ï–°–¢ –ù–ï –ü–†–û–®–ï–õ")
            
    except Exception as e:
        print(f"üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main()
