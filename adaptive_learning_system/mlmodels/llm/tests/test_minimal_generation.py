"""
–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç LLM —Å –∫–æ—Ä–æ—Ç–∫–∏–º –æ—Ç–≤–µ—Ç–æ–º
"""
import os
import sys
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
project_root = Path(__file__).parent.parent.parent.parent
sys.path.insert(0, str(project_root))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'adaptive_learning.settings')

import django
django.setup()

from mlmodels.llm.model_manager import LLMModelManager


def minimal_test():
    """–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç —Å –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–º –æ—Ç–≤–µ—Ç–æ–º"""
    print("=== –ú–ò–ù–ò–ú–ê–õ–¨–ù–´–ô –¢–ï–°–¢ LLM ===\n")
      # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –º–æ–¥–µ–ª–∏
    manager = LLMModelManager(model_key='gemma-2b', device='auto')
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
    print("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏...")
    success = manager.load_model(use_quantization=True)
    
    if not success:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å")
        return False
    
    print("‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
    
    # –û—á–µ–Ω—å –ø—Ä–æ—Å—Ç–æ–π –ø—Ä–æ–º–ø—Ç —Å –æ–∂–∏–¥–∞–µ–º—ã–º –∫–æ—Ä–æ—Ç–∫–∏–º –æ—Ç–≤–µ—Ç–æ–º
    prompt = "–ó–∞–≤–µ—Ä—à–∏—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ: Python - —ç—Ç–æ —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è"
    
    print(f"\nüöÄ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è (–º–∞–∫—Å. 20 —Ç–æ–∫–µ–Ω–æ–≤)...")
    print(f"–ü—Ä–æ–º–ø—Ç: {prompt}")
    
    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å –æ—á–µ–Ω—å –º–∞–ª—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        result = manager.generate_text(
            prompt=prompt,
            max_length=20,  # –û—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç
            temperature=0.3,  # –ú–µ–Ω—å—à–µ –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏
            do_sample=False  # –î–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
        )
        
        print(f"\n‚úÖ –†–ï–ó–£–õ–¨–¢–ê–¢: '{result}'")
        print(f"–î–ª–∏–Ω–∞: {len(result)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        if result and len(result.strip()) > 0:
            print("üéâ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç!")
            return True
        else:
            print("‚ö†Ô∏è –ü—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False


if __name__ == '__main__':
    minimal_test()
