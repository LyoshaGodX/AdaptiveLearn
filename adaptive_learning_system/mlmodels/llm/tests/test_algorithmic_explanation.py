#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∞–ª–≥–æ—Ä–∏—Ç–º–∏—á–µ—Å–∫–æ–≥–æ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –±–µ–∑ LLM
"""

import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ Django –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(str(Path(__file__).parent.parent.parent.parent))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'adaptive_learning.settings')

import django
django.setup()

from mlmodels.llm.prompt_templates import PromptTemplates

def test_algorithmic_explanation():
    """–¢–µ—Å—Ç –∞–ª–≥–æ—Ä–∏—Ç–º–∏—á–µ—Å–∫–æ–≥–æ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è"""
    print("=== –¢–ï–°–¢ –ê–õ–ì–û–†–ò–¢–ú–ò–ß–ï–°–ö–û–ì–û –û–ë–™–Ø–°–ù–ï–ù–ò–Ø ===\n")
    
    # –°–æ–∑–¥–∞–µ–º —à–∞–±–ª–æ–Ω—ã –ø—Ä–æ–º–ø—Ç–æ–≤
    templates = PromptTemplates()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_case = {
        'student_name': '–ê–Ω–Ω–∞',
        'task_title': '–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ Python',
        'task_difficulty': 'beginner',
        'task_type': 'true_false',
        'target_skill': 'Python –æ—Å–Ω–æ–≤—ã',
        'target_skill_mastery': 0.1,
        'prerequisite_skills': [],
        'dependent_skills': [{'skill_name': '–¶–∏–∫–ª—ã'}],
        'student_progress': {'total_success_rate': 0.2}
    }
    
    print("üìã –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:")
    print(f"   –°—Ç—É–¥–µ–Ω—Ç: {test_case['student_name']}")
    print(f"   –ó–∞–¥–∞–Ω–∏–µ: {test_case['task_title']}")
    print(f"   –ù–∞–≤—ã–∫: {test_case['target_skill']} ({test_case['target_skill_mastery']:.0%})")
    print(f"   –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {test_case['student_progress']['total_success_rate']:.0%}")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –ø—Ä–æ–º–ø—Ç
    full_prompt = templates.recommendation_explanation_prompt(
        student_name=test_case['student_name'],
        task_title=test_case['task_title'],
        task_difficulty=test_case['task_difficulty'],
        task_type=test_case['task_type'],
        target_skill=test_case['target_skill'],
        target_skill_mastery=test_case['target_skill_mastery'],
        prerequisite_skills=test_case['prerequisite_skills'],
        dependent_skills=test_case['dependent_skills'],
        student_progress=test_case['student_progress']
    )
    
    print(f"\nü§ñ –ü–û–õ–ù–´–ô –ü–†–û–ú–ü–¢ –° '–°–æ–∫—Ä–∞—Ç–∏ –¥–∞–Ω–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:':")
    print(f"   {full_prompt}")
    print(f"   –î–ª–∏–Ω–∞: {len(full_prompt)} —Å–∏–º–≤–æ–ª–æ–≤")
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫—É "–°–æ–∫—Ä–∞—Ç–∏ –¥–∞–Ω–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:"
    if full_prompt.startswith("–°–æ–∫—Ä–∞—Ç–∏ –¥–∞–Ω–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:\n\n"):
        clean_explanation = full_prompt[len("–°–æ–∫—Ä–∞—Ç–∏ –¥–∞–Ω–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:\n\n"):]
    else:
        clean_explanation = full_prompt
    
    print(f"\n‚ú® –ê–õ–ì–û–†–ò–¢–ú–ò–ß–ï–°–ö–û–ï –û–ë–™–Ø–°–ù–ï–ù–ò–ï (–ë–ï–ó LLM-–ü–†–û–ú–ü–¢–ê):")
    print(f"   {clean_explanation}")
    print(f"   –î–ª–∏–Ω–∞: {len(clean_explanation)} —Å–∏–º–≤–æ–ª–æ–≤")
    
    print(f"\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")

if __name__ == "__main__":
    test_algorithmic_explanation()
