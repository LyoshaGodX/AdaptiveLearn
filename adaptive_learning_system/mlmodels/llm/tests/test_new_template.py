"""
–¢–µ—Å—Ç –Ω–æ–≤–æ–≥–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∏—á–µ—Å–∫–æ–≥–æ —à–∞–±–ª–æ–Ω–∞
"""
import os
import sys
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
project_root = Path(__file__).parent.parent.parent.parent
sys.path.insert(0, str(project_root))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'adaptive_learning.settings')

import django
django.setup()

from mlmodels.llm.explanation_generator import ExplanationGenerator


def test_new_template():
    """–¢–µ—Å—Ç –Ω–æ–≤–æ–≥–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞"""
    print("=== –¢–ï–°–¢ –ù–û–í–û–ì–û –†–ê–°–®–ò–†–ï–ù–ù–û–ì–û –®–ê–ë–õ–û–ù–ê ===\n")
    
    # –°–æ–∑–¥–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å Gemma –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    generator = ExplanationGenerator(model_key='gemma-2b', device='auto')
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å
    print("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Gemma-2B...")
    success = generator.initialize(use_quantization=True)
    
    if not success:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥–µ–ª—å")
        return False
    
    print("‚úÖ –ú–æ–¥–µ–ª—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ —à–∞–±–ª–æ–Ω–∞
    test_data = {
        'student_name': '–ú–∞—Ä–∏—è',
        'task_title': '–¶–∏–∫–ª—ã for –∏ while –≤ Python',
        'task_difficulty': 'intermediate',
        'task_type': 'multiple',
        'target_skill_info': [{
            'skill_name': '–¶–∏–∫–ª—ã',
            'current_mastery_probability': 0.45
        }],
        'prerequisite_skills_snapshot': [
            {'skill_name': '–û—Å–Ω–æ–≤—ã Python', 'mastery_probability': 0.85},
            {'skill_name': '–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ', 'mastery_probability': 0.75}
        ],
        'dependent_skills_snapshot': [
            {'skill_name': '–§—É–Ω–∫—Ü–∏–∏'},
            {'skill_name': '–†–∞–±–æ—Ç–∞ —Å–æ —Å–ø–∏—Å–∫–∞–º–∏'},
            {'skill_name': '–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö'}
        ],
        'student_progress_context': {
            'total_success_rate': 0.62
        }
    }
    
    print(f"\nüìä –¢–ï–°–¢–û–í–´–ï –î–ê–ù–ù–´–ï:")
    print(f"   –°—Ç—É–¥–µ–Ω—Ç: {test_data['student_name']}")
    print(f"   –ó–∞–¥–∞–Ω–∏–µ: {test_data['task_title']}")
    print(f"   –¢–∏–ø: {test_data['task_type']} | –°–ª–æ–∂–Ω–æ—Å—Ç—å: {test_data['task_difficulty']}")
    print(f"   –ù–∞–≤—ã–∫: {test_data['target_skill_info'][0]['skill_name']} (–æ—Å–≤–æ–µ–Ω –Ω–∞ {test_data['target_skill_info'][0]['current_mastery_probability']:.0%})")
    print(f"   –û–±—â–∏–π —É—Å–ø–µ—Ö: {test_data['student_progress_context']['total_success_rate']:.0%}")
    
    print(f"\nüöÄ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å –Ω–æ–≤—ã–º —à–∞–±–ª–æ–Ω–æ–º...")
    
    try:
        explanation = generator.generate_recommendation_explanation(test_data)
        
        print(f"\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢ –ù–û–í–û–ì–û –®–ê–ë–õ–û–ù–ê:")
        print("=" * 80)
        print(f"{explanation}")
        print("=" * 80)
        print(f"\n–î–ª–∏–Ω–∞: {len(explanation)} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"–°–ª–æ–≤: {len(explanation.split()) if explanation else 0}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–∞
        if explanation and len(explanation.strip()) > 200:
            print("üéâ –ù–æ–≤—ã–π —à–∞–±–ª–æ–Ω –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è!")
            return True
        else:
            print("‚ö†Ô∏è –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ–µ")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
        return False


if __name__ == '__main__':
    test_new_template()
