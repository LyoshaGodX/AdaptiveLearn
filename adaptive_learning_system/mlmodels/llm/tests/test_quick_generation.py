"""
–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç LLM –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–∫–∏ –∫—ç—à–∞
"""
import os
import sys
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
project_root = Path(__file__).parent.parent.parent.parent
sys.path.insert(0, str(project_root))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'adaptive_learning.settings')

import django
django.setup()

from mlmodels.llm.explanation_generator import ExplanationGenerator


def quick_test():
    """–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è"""
    print("=== –ë–´–°–¢–†–´–ô –¢–ï–°–¢ LLM –ì–ï–ù–ï–†–ê–¶–ò–ò ===\n")
    
    # –°–æ–∑–¥–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
    generator = ExplanationGenerator(model_key='phi3.5-mini', device='auto')
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å
    print("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è LLM...")
    success = generator.initialize(use_quantization=True)
    
    if not success:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å LLM")
        return False
    
    print("‚úÖ LLM –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_data = {
        'student_name': '–¢–µ—Å—Ç',
        'task_title': '–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ Python',
        'task_difficulty': 'beginner',
        'task_type': 'true_false',
        'target_skill_info': [{
            'skill_name': '–û—Å–Ω–æ–≤—ã Python',
            'current_mastery_probability': 0.2
        }],
        'prerequisite_skills_snapshot': [],
        'dependent_skills_snapshot': [
            {'skill_name': '–£—Å–ª–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã'},
            {'skill_name': '–¶–∏–∫–ª—ã'}
        ],
        'student_progress_context': {
            'total_success_rate': 0.3
        }
    }
    
    print("\nüöÄ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±—ä—è—Å–Ω–µ–Ω–∏—è...")
    
    try:
        explanation = generator.generate_recommendation_explanation(test_data)
        
        print(f"\n‚úÖ –†–ï–ó–£–õ–¨–¢–ê–¢:")
        print(f"'{explanation}'")
        print(f"\n–î–ª–∏–Ω–∞: {len(explanation)} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"–°–ª–æ–≤: {len(explanation.split()) if explanation else 0}")
        
        if explanation and len(explanation.strip()) > 50:
            print("üéâ LLM –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è!")
            return True
        else:
            print("‚ö†Ô∏è LLM –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ—Ä–æ—Ç–∫–∏–µ fallback –æ–±—ä—è—Å–Ω–µ–Ω–∏—è")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
        return False


if __name__ == '__main__':
    quick_test()
