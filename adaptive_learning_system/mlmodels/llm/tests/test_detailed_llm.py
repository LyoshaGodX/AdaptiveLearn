#!/usr/bin/env python3
"""
–î–µ—Ç–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç LLM –º–æ–¥—É–ª—è —Å –≤—ã–≤–æ–¥–æ–º –ø—Ä–æ–º–ø—Ç–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤

–≠—Ç–æ—Ç —Ç–µ—Å—Ç:
1. –ó–∞–≥—Ä—É–∂–∞–µ—Ç LLM –º–æ–¥–µ–ª—å 
2. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–µ—Å—å –≤—Ö–æ–¥–Ω–æ–π –ø—Ä–æ–º–ø—Ç
3. –í—ã–≤–æ–¥–∏—Ç –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç LLM
4. –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π
5. –†–∞–±–æ—Ç–∞–µ—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –ë–î
"""

import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ Django –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(str(Path(__file__).parent.parent.parent.parent))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'adaptive_learning.settings')

import django
django.setup()

from mlmodels.llm.explanation_generator import ExplanationGenerator
from mlmodels.llm.prompt_templates import PromptTemplates
from mlmodels.models import DQNRecommendation


def print_separator(title: str, char="=", length=80):
    """–ö—Ä–∞—Å–∏–≤—ã–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å"""
    print(f"\n{char * length}")
    print(f"{title.center(length)}")
    print(f"{char * length}")


def print_subsection(title: str):
    """–ü–æ–¥—Å–µ–∫—Ü–∏—è"""
    print(f"\n{'‚îÄ' * 60}")
    print(f"üìù {title}")
    print(f"{'‚îÄ' * 60}")


def test_prompt_generation():
    """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–º–ø—Ç–æ–≤ –±–µ–∑ LLM"""
    print_separator("–¢–ï–°–¢ –ì–ï–ù–ï–†–ê–¶–ò–ò –ü–†–û–ú–ü–¢–û–í", "üß™")
    
    templates = PromptTemplates()
      # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
    test_scenarios = [
        {
            'name': '–ù–∞—á–∏–Ω–∞—é—â–∏–π —Å—Ç—É–¥–µ–Ω—Ç - –ø—Ä–æ—Å—Ç–æ–µ –∑–∞–¥–∞–Ω–∏–µ True/False',
            'data': {
                'student_name': '–ê–ª–µ–∫—Å–µ–π',
                'task_title': '–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ Python',
                'task_difficulty': 'beginner',
                'task_type': 'true_false',
                'target_skill': '–û—Å–Ω–æ–≤—ã Python',
                'target_skill_mastery': 0.1,
                'prerequisite_skills': [],
                'dependent_skills': [
                    {'skill_name': '–£—Å–ª–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã'},
                    {'skill_name': '–¶–∏–∫–ª—ã'}
                ],
                'student_progress': {'total_success_rate': 0.2}
            }
        },
        {
            'name': '–°—Ä–µ–¥–Ω–∏–π —Å—Ç—É–¥–µ–Ω—Ç - –∑–∞–¥–∞–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞',
            'data': {
                'student_name': '–ú–∞—Ä–∏—è',
                'task_title': '–†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏',
                'task_difficulty': 'intermediate',
                'task_type': 'multiple',
                'target_skill': '–§—É–Ω–∫—Ü–∏–∏',
                'target_skill_mastery': 0.4,
                'prerequisite_skills': [
                    {'skill_name': '–û—Å–Ω–æ–≤—ã Python', 'mastery_probability': 0.9},
                    {'skill_name': '–¶–∏–∫–ª—ã', 'mastery_probability': 0.6}
                ],
                'dependent_skills': [
                    {'skill_name': '–ê–ª–≥–æ—Ä–∏—Ç–º—ã'},
                    {'skill_name': '–°—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö'}
                ],
                'student_progress': {'total_success_rate': 0.65}
            }
        },
        {
            'name': '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —Å—Ç—É–¥–µ–Ω—Ç - –∑–∞–¥–∞–Ω–∏–µ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞',
            'data': {
                'student_name': '–î–º–∏—Ç—Ä–∏–π',
                'task_title': '–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤',
                'task_difficulty': 'advanced',
                'task_type': 'single',
                'target_skill': '–ê–ª–≥–æ—Ä–∏—Ç–º—ã',
                'target_skill_mastery': 0.8,
                'prerequisite_skills': [
                    {'skill_name': '–°—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö', 'mastery_probability': 0.9},
                    {'skill_name': '–°–ª–æ–∂–Ω–æ—Å—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤', 'mastery_probability': 0.7},
                    {'skill_name': '–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞', 'mastery_probability': 0.8}
                ],
                'dependent_skills': [
                    {'skill_name': '–ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ'},
                    {'skill_name': '–í—ã—Å–æ–∫–æ–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è'}
                ],
                'student_progress': {'total_success_rate': 0.85}
            }
        }
    ]
    
    for i, scenario in enumerate(test_scenarios, 1):
        print_subsection(f"–°–¶–ï–ù–ê–†–ò–ô {i}: {scenario['name']}")
        
        data = scenario['data']
        prompt = templates.recommendation_explanation_prompt(
            student_name=data['student_name'],
            task_title=data['task_title'],
            task_difficulty=data['task_difficulty'],
            task_type=data['task_type'],
            target_skill=data['target_skill'],
            target_skill_mastery=data['target_skill_mastery'],
            prerequisite_skills=data['prerequisite_skills'],
            dependent_skills=data['dependent_skills'],
            student_progress=data['student_progress']        )
        
        print("üìã –í–•–û–î–ù–´–ï –î–ê–ù–ù–´–ï:")
        for key, value in data.items():
            if isinstance(value, list) and value:
                print(f"   {key}: {len(value)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
                for item in value:
                    print(f"      - {item}")
            else:
                print(f"   {key}: {value}")
        
        print(f"\nü§ñ –ü–†–û–ú–ü–¢ –î–õ–Ø LLM:")
        print(prompt)
        
        print(f"\nüìè –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–†–û–ú–ü–¢–ê:")
        print(f"   –î–ª–∏–Ω–∞: {len(prompt)} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"   –°—Ç—Ä–æ–∫: {len(prompt.split('n'))}")


def test_llm_with_detailed_output():
    """–¢–µ—Å—Ç —Å —Ä–µ–∞–ª—å–Ω–æ–π LLM –∏ –¥–µ—Ç–∞–ª—å–Ω—ã–º –≤—ã–≤–æ–¥–æ–º"""
    print_separator("–¢–ï–°–¢ –†–ï–ê–õ–¨–ù–û–ô LLM –° –î–ï–¢–ê–õ–¨–ù–´–ú –í–´–í–û–î–û–ú", "üöÄ")
      # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º LLM
    print("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è LLM...")
    generator = ExplanationGenerator(model_key='phi3.5-mini', device='auto')
    
    print("üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏:")
    model_info = generator.model_manager.get_model_info()
    for key, value in model_info.items():
        print(f"   {key}: {value}")
    
    if not generator.is_initialized:
        print("\nüöÄ –ó–∞–≥—Ä—É–∂–∞–µ–º LLM –º–æ–¥–µ–ª—å (—ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è)...")
        success = generator.initialize(use_quantization=True)
        
        if not success:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å LLM –º–æ–¥–µ–ª—å")
            return False
        
        print("‚úÖ LLM –º–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")
      # –¢–µ—Å—Ç–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (5 –ø—Ä–∏–º–µ—Ä–æ–≤)
    test_cases = [
        {
            'name': '–ù–æ–≤–∏—á–æ–∫ - –ø–µ—Ä–≤—ã–µ —à–∞–≥–∏ –≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏',
            'data': {
                'student_name': '–ê–Ω–Ω–∞',
                'task_title': '–ß—Ç–æ —Ç–∞–∫–æ–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è?',
                'task_difficulty': 'beginner',
                'task_type': 'true_false',
                'target_skill_info': [{
                    'skill_name': '–û—Å–Ω–æ–≤—ã Python',
                    'current_mastery_probability': 0.05
                }],
                'prerequisite_skills_snapshot': [],
                'dependent_skills_snapshot': [
                    {'skill_name': '–£—Å–ª–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã'},
                    {'skill_name': '–¶–∏–∫–ª—ã'}
                ],
                'student_progress_context': {
                    'total_success_rate': 0.1
                }
            }
        },
        {
            'name': '–°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å - –∏–∑—É—á–µ–Ω–∏–µ —Ü–∏–∫–ª–æ–≤',
            'data': {
                'student_name': '–ú–∏—Ö–∞–∏–ª',
                'task_title': '–¶–∏–∫–ª for –≤ Python',
                'task_difficulty': 'intermediate',
                'task_type': 'single',
                'target_skill_info': [{
                    'skill_name': '–¶–∏–∫–ª—ã',
                    'current_mastery_probability': 0.35
                }],
                'prerequisite_skills_snapshot': [
                    {'skill_name': '–û—Å–Ω–æ–≤—ã Python', 'mastery_probability': 0.8},
                    {'skill_name': '–£—Å–ª–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã', 'mastery_probability': 0.6}
                ],
                'dependent_skills_snapshot': [
                    {'skill_name': '–§—É–Ω–∫—Ü–∏–∏'},
                    {'skill_name': '–†–∞–±–æ—Ç–∞ —Å–æ —Å–ø–∏—Å–∫–∞–º–∏'}
                ],
                'student_progress_context': {
                    'total_success_rate': 0.5
                }
            }
        },
        {
            'name': '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π - —Å–ª–æ–∂–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏',
            'data': {
                'student_name': '–ï–ª–µ–Ω–∞',
                'task_title': '–†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã',
                'task_difficulty': 'advanced',
                'task_type': 'multiple',
                'target_skill_info': [{
                    'skill_name': '–†–µ–∫—É—Ä—Å–∏—è',
                    'current_mastery_probability': 0.6
                }],
                'prerequisite_skills_snapshot': [
                    {'skill_name': '–§—É–Ω–∫—Ü–∏–∏', 'mastery_probability': 0.9},
                    {'skill_name': '–ê–ª–≥–æ—Ä–∏—Ç–º—ã', 'mastery_probability': 0.7},
                    {'skill_name': '–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—Å–Ω–æ–≤—ã', 'mastery_probability': 0.8}
                ],
                'dependent_skills_snapshot': [
                    {'skill_name': '–î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ'},
                    {'skill_name': '–°—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö'}
                ],
                'student_progress_context': {
                    'total_success_rate': 0.75
                }
            }
        },
        {
            'name': '–û—Å–≤–æ–µ–Ω–∏–µ –û–û–ü - –∫–ª–∞—Å—Å—ã –∏ –æ–±—ä–µ–∫—Ç—ã',
            'data': {
                'student_name': '–î–º–∏—Ç—Ä–∏–π',
                'task_title': '–ù–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –≤ Python',
                'task_difficulty': 'intermediate',
                'task_type': 'single',
                'target_skill_info': [{
                    'skill_name': '–û–û–ü',
                    'current_mastery_probability': 0.45
                }],
                'prerequisite_skills_snapshot': [
                    {'skill_name': '–ö–ª–∞—Å—Å—ã –∏ –æ–±—ä–µ–∫—Ç—ã', 'mastery_probability': 0.7},
                    {'skill_name': '–§—É–Ω–∫—Ü–∏–∏', 'mastery_probability': 0.85}
                ],
                'dependent_skills_snapshot': [
                    {'skill_name': '–ü–æ–ª–∏–º–æ—Ä—Ñ–∏–∑–º'},
                    {'skill_name': '–ü–∞—Ç—Ç–µ—Ä–Ω—ã –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è'}
                ],
                'student_progress_context': {
                    'total_success_rate': 0.62
                }
            }
        },
        {
            'name': '–†–∞–±–æ—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ - —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö',
            'data': {
                'student_name': '–°–æ—Ñ–∏—è',
                'task_title': '–†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–µ–∫–∞',
                'task_difficulty': 'advanced',
                'task_type': 'multiple',
                'target_skill_info': [{
                    'skill_name': '–°—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö',
                    'current_mastery_probability': 0.55
                }],
                'prerequisite_skills_snapshot': [
                    {'skill_name': '–û–û–ü', 'mastery_probability': 0.8},
                    {'skill_name': '–ê–ª–≥–æ—Ä–∏—Ç–º—ã', 'mastery_probability': 0.75},
                    {'skill_name': '–°–ø–∏—Å–∫–∏ –∏ —Å–ª–æ–≤–∞—Ä–∏', 'mastery_probability': 0.9}
                ],
                'dependent_skills_snapshot': [
                    {'skill_name': '–ê–ª–≥–æ—Ä–∏—Ç–º—ã —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏'},
                    {'skill_name': '–ì—Ä–∞—Ñ—ã –∏ –¥–µ—Ä–µ–≤—å—è'}
                ],
                'student_progress_context': {
                    'total_success_rate': 0.68
                }
            }
        }
    ]
    
    for i, test_case in enumerate(test_cases, 1):
        print_subsection(f"–ì–ï–ù–ï–†–ê–¶–ò–Ø {i}: {test_case['name']}")
        
        data = test_case['data']
        
        print("üìã –í–•–û–î–ù–´–ï –î–ê–ù–ù–´–ï:")
        print(f"   –°—Ç—É–¥–µ–Ω—Ç: {data['student_name']}")
        print(f"   –ó–∞–¥–∞–Ω–∏–µ: {data['task_title']}")
        print(f"   –°–ª–æ–∂–Ω–æ—Å—Ç—å: {data['task_difficulty']}")
        
        if data['target_skill_info']:
            skill = data['target_skill_info'][0]
            print(f"   –¶–µ–ª–µ–≤–æ–π –Ω–∞–≤—ã–∫: {skill['skill_name']}")
            print(f"   –û—Å–≤–æ–µ–Ω–Ω–æ—Å—Ç—å: {skill['current_mastery_probability']:.1%}")
        
        prereq_count = len(data.get('prerequisite_skills_snapshot', []))
        print(f"   Prerequisite –Ω–∞–≤—ã–∫–æ–≤: {prereq_count}")
        
        progress = data.get('student_progress_context', {})
        if progress:
            print(f"   –û–±—â–∏–π —É—Å–ø–µ—Ö: {progress.get('total_success_rate', 0):.1%}")
          # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç
        templates = PromptTemplates()
        target_skill = data['target_skill_info'][0]['skill_name'] if data['target_skill_info'] else 'Programming'
        target_mastery = data['target_skill_info'][0]['current_mastery_probability'] if data['target_skill_info'] else 0.1
        
        prompt = templates.recommendation_explanation_prompt(
            student_name=data['student_name'],
            task_title=data['task_title'],
            task_difficulty=data['task_difficulty'],
            task_type=data.get('task_type', 'single'),  # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–ø –∑–∞–¥–∞–Ω–∏—è
            target_skill=target_skill,
            target_skill_mastery=target_mastery,
            prerequisite_skills=data.get('prerequisite_skills_snapshot', []),            dependent_skills=data.get('dependent_skills_snapshot', []),  # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≤–∏—Å–∏–º—ã–µ –Ω–∞–≤—ã–∫–∏
            student_progress=data.get('student_progress_context', {})
        )
        
        print(f"\nü§ñ –ü–û–õ–ù–´–ô –ü–†–û–ú–ü–¢ –î–õ–Ø LLM:")
        print(prompt)
        
        print(f"\n‚öôÔ∏è –ì–ï–ù–ï–†–ê–¶–ò–Ø...")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ
        explanation = generator.generate_recommendation_explanation(data)
        
        print(f"\n‚ú® –†–ï–ó–£–õ–¨–¢–ê–¢ LLM:")
        if explanation:
            print(explanation)
        else:            print("[–ü–£–°–¢–û–ô –û–¢–í–ï–¢ –ò–õ–ò –û–®–ò–ë–ö–ê]")
        
        print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"   –î–ª–∏–Ω–∞ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è: {len(explanation)} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"   –°–ª–æ–≤: {len(explanation.split()) if explanation else 0}")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∞"""
    print_separator("üß™ –î–ï–¢–ê–õ–¨–ù–´–ô –¢–ï–°–¢ LLM –ú–û–î–£–õ–Ø", "üöÄ")
    
    try:
        # 1. –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–º–ø—Ç–æ–≤ (–±–µ–∑ LLM)
        test_prompt_generation()
        
        # 2. –¢–µ—Å—Ç —Ä–µ–∞–ª—å–Ω–æ–π LLM —Å 5 –ø—Ä–∏–º–µ—Ä–∞–º–∏
        print("\n" + "=" * 80)
        user_input = input("ü§ñ –ó–∞–≥—Ä—É–∑–∏—Ç—å LLM –º–æ–¥–µ–ª—å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è? (y/N): ").strip().lower()
        
        if user_input in ['y', 'yes', '–¥', '–¥–∞']:
            test_llm_with_detailed_output()
        else:
            print("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç —Ä–µ–∞–ª—å–Ω–æ–π LLM")
        
        print_separator("‚úÖ –í–°–ï –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´", "üéâ")
        
    except KeyboardInterrupt:
        print("\n\n‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n\nüí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main()
