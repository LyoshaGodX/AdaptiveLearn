#!/usr/bin/env python3
"""
–¢–µ—Å—Ç LLM –º–æ–¥—É–ª—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç:
1. –ó–∞–≥—Ä—É–∑–∫—É LLM –º–æ–¥–µ–ª–∏
2. –ì–µ–Ω–µ—Ä–∞—Ü–∏—é –æ–±—ä—è—Å–Ω–µ–Ω–∏–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
3. –†–∞–±–æ—Ç—É —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –ë–î
"""

import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ Django –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(str(Path(__file__).parent.parent.parent))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'adaptive_learning.settings')

import django
django.setup()

from mlmodels.llm.explanation_generator import ExplanationGenerator
from mlmodels.models import DQNRecommendation
from django.contrib.auth.models import User


def test_llm_basic():
    """–ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç LLM –±–µ–∑ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏"""
    print("üß™ –¢–ï–°–¢ LLM –ú–û–î–£–õ–Ø (–ë–ï–ó –ó–ê–ì–†–£–ó–ö–ò –ú–û–î–ï–õ–ò)")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –±–µ–∑ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    generator = ExplanationGenerator()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_data = {
        'student_name': '–ê–ª–µ–∫—Å–µ–π',
        'task_title': '–¶–∏–∫–ª—ã –≤ Python',
        'task_difficulty': 'intermediate',
        'target_skill_info': [{
            'skill_name': '–¶–∏–∫–ª—ã',
            'current_mastery_probability': 0.3
        }],
        'prerequisite_skills_snapshot': [{
            'skill_name': '–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ',
            'mastery_probability': 0.9
        }],
        'student_progress_context': {
            'total_success_rate': 0.65
        }
    }
    
    print("üìù –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
    print(f"  –°—Ç—É–¥–µ–Ω—Ç: {test_data['student_name']}")
    print(f"  –ó–∞–¥–∞–Ω–∏–µ: {test_data['task_title']}")
    print(f"  –°–ª–æ–∂–Ω–æ—Å—Ç—å: {test_data['task_difficulty']}")
    print(f"  –¶–µ–ª–µ–≤–æ–π –Ω–∞–≤—ã–∫: {test_data['target_skill_info'][0]['skill_name']}")
    print(f"  –û—Å–≤–æ–µ–Ω–Ω–æ—Å—Ç—å: {test_data['target_skill_info'][0]['current_mastery_probability']:.1%}")
    
    print("\nü§ñ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±—ä—è—Å–Ω–µ–Ω–∏—è (fallback —Ä–µ–∂–∏–º):")
    explanation = generator.generate_recommendation_explanation(test_data)
    print(f"  –†–µ–∑—É–ª—å—Ç–∞—Ç: {explanation}")
    print(f"  –î–ª–∏–Ω–∞: {len(explanation)} —Å–∏–º–≤–æ–ª–æ–≤")
    
    print("\n‚úÖ –ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω")
    return True


def test_llm_with_real_data():
    """–¢–µ—Å—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –ë–î"""
    print("\nüß™ –¢–ï–°–¢ –° –†–ï–ê–õ–¨–ù–´–ú–ò –î–ê–ù–ù–´–ú–ò")
    print("=" * 60)
    
    # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é
    recommendation = DQNRecommendation.objects.filter(
        target_skill_info__isnull=False
    ).order_by('-created_at').first()
    
    if not recommendation:
        print("‚ö†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å LLM –¥–∞–Ω–Ω—ã–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return False
    
    print(f"üìä –ù–∞–π–¥–µ–Ω–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è #{recommendation.id}")
    print(f"  –°—Ç—É–¥–µ–Ω—Ç: {recommendation.student.full_name}")
    print(f"  –ó–∞–¥–∞–Ω–∏–µ: {recommendation.task.title}")
    print(f"  –°–æ–∑–¥–∞–Ω–∞: {recommendation.created_at}")
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è LLM
    recommendation_data = {
        'student_name': recommendation.student.full_name.split()[0],  # –ò–º—è
        'task_title': recommendation.task.title,
        'task_difficulty': recommendation.task.difficulty,
        'target_skill_info': recommendation.target_skill_info or [],
        'prerequisite_skills_snapshot': recommendation.prerequisite_skills_snapshot or [],
        'student_progress_context': recommendation.student_progress_context or {}
    }
    
    print("\nüìù –î–∞–Ω–Ω—ã–µ –¥–ª—è LLM:")
    if recommendation_data['target_skill_info']:
        skill_info = recommendation_data['target_skill_info'][0]
        print(f"  –¶–µ–ª–µ–≤–æ–π –Ω–∞–≤—ã–∫: {skill_info.get('skill_name', 'N/A')}")
        print(f"  –û—Å–≤–æ–µ–Ω–Ω–æ—Å—Ç—å: {skill_info.get('current_mastery_probability', 0):.1%}")
    
    prereq_count = len(recommendation_data['prerequisite_skills_snapshot'])
    print(f"  Prerequisite –Ω–∞–≤—ã–∫–æ–≤: {prereq_count}")
    
    progress = recommendation_data['student_progress_context']
    if progress:
        total_rate = progress.get('total_success_rate', 0)
        print(f"  –û–±—â–∏–π —É—Å–ø–µ—Ö: {total_rate:.1%}")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ (fallback —Ä–µ–∂–∏–º)
    generator = ExplanationGenerator()
    explanation = generator.generate_recommendation_explanation(recommendation_data)
    
    print(f"\nü§ñ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ:")
    print(f"  {explanation}")
    print(f"  –î–ª–∏–Ω–∞: {len(explanation)} —Å–∏–º–≤–æ–ª–æ–≤")
    
    return True


def test_llm_initialization():
    """–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ LLM (–±–µ–∑ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏)"""
    print("\nüß™ –¢–ï–°–¢ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò LLM")
    print("=" * 60)
    
    generator = ExplanationGenerator(model_key='qwen2.5-0.5b')
    
    print("üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏:")
    model_info = generator.model_manager.get_model_info()
    for key, value in model_info.items():
        print(f"  {key}: {value}")
    
    print("\n‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ —Ç–µ—Å—Ç–µ")
    print("  –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:")
    print("  pip install torch transformers accelerate")
    
    return True


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∞"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï LLM –ú–û–î–£–õ–Ø")
    print("=" * 80)
    
    try:
        # –ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç
        success1 = test_llm_basic()
        
        # –¢–µ—Å—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        success2 = test_llm_with_real_data()
        
        # –¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        success3 = test_llm_initialization()
        
        print("\n" + "=" * 80)
        if success1 and success2 and success3:
            print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
            print("\nüìã –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
            print("1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install torch transformers accelerate")
            print("2. –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–π—Ç–µ —Å DQN —Å–∏—Å—Ç–µ–º–æ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")
            print("3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ–±—ä—è—Å–Ω–µ–Ω–∏–π")
        else:
            print("‚ùå –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–®–õ–ò")
            
    except Exception as e:
        print(f"üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main()
