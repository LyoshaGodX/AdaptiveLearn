"""
–¢–µ—Å—Ç –∫–∞—Ä–∫–∞—Å–∞ DKN –º–æ–¥–µ–ª–∏

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã DKN —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
–ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º –∫ —Å–æ–∑–¥–∞–Ω–∏—é —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö.
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

import django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'adaptive_learning.settings')
django.setup()

import torch
import numpy as np
from typing import Dict, List
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

from mlmodels.dkn.model import DKNModel, DKNConfig
from mlmodels.dkn.data_processor import DKNDataProcessor, DKNDataset
from mlmodels.dkn.trainer import AdvancedDKNTrainer
from mlmodels.dkn.recommender import DKNRecommender

# Django models
from django.contrib.auth.models import User
from skills.models import Skill
from methodist.models import Task
from mlmodels.models import TaskAttempt
from student.models import StudentProfile


def test_dkn_components():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã DKN"""
    
    print("=" * 60)
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ö–ê–†–ö–ê–°–ê DKN –ú–û–î–ï–õ–ò")
    print("=" * 60)
    
    # 1. –¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    print("\n1Ô∏è‚É£ –¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    try:
        config = DKNConfig()
        print(f"   ‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞: {config.skill_embedding_dim}D —ç–º–±–µ–¥–¥–∏–Ω–≥–∏")
        print(f"   ‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: lr={config.learning_rate}, batch={config.batch_size}")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return False
    
    # 2. –¢–µ—Å—Ç –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
    print("\n2Ô∏è‚É£ –¢–µ—Å—Ç –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö...")
    try:
        processor = DKNDataProcessor()
        print(f"   ‚úÖ –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä —Å–æ–∑–¥–∞–Ω: {len(processor.skill_to_id)} –Ω–∞–≤—ã–∫–æ–≤")
        print(f"   ‚úÖ –ú–∞–ø–ø–∏–Ω–≥–∏: {len(processor.task_to_id)} –∑–∞–¥–∞–Ω–∏–π")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞: {e}")
        return False
    
    # 3. –¢–µ—Å—Ç –º–æ–¥–µ–ª–∏
    print("\n3Ô∏è‚É£ –¢–µ—Å—Ç –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –º–æ–¥–µ–ª–∏...")
    try:
        num_skills = max(1, len(processor.skill_to_id))
        num_tasks = max(1, len(processor.task_to_id))
        
        model = DKNModel(num_skills, num_tasks, config)
        print(f"   ‚úÖ –ú–æ–¥–µ–ª—å —Å–æ–∑–¥–∞–Ω–∞: {num_skills} –Ω–∞–≤—ã–∫–æ–≤, {num_tasks} –∑–∞–¥–∞–Ω–∏–π")
        print(f"   ‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {sum(p.numel() for p in model.parameters()):,}")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –º–æ–¥–µ–ª–∏: {e}")
        return False
    
    # 4. –¢–µ—Å—Ç —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    print("\n4Ô∏è‚É£ –¢–µ—Å—Ç —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö...")
    try:
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—ã–µ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
        synthetic_data = create_synthetic_sample()
        dataset = DKNDataset(synthetic_data)
        print(f"   ‚úÖ –°–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ: {len(dataset)} –ø—Ä–∏–º–µ—Ä–æ–≤")
        
        # –¢–µ—Å—Ç –æ–¥–Ω–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞
        sample = dataset[0]
        print(f"   ‚úÖ –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: {list(sample.keys())}")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False
    
    # 5. –¢–µ—Å—Ç —Ç—Ä–µ–Ω–µ—Ä–∞
    print("\n5Ô∏è‚É£ –¢–µ—Å—Ç —Ç—Ä–µ–Ω–µ—Ä–∞...")
    try:
        trainer = AdvancedDKNTrainer(model, config, save_dir='test_checkpoints')
        print(f"   ‚úÖ –¢—Ä–µ–Ω–µ—Ä —Å–æ–∑–¥–∞–Ω: {trainer.device}")
        print(f"   ‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä: {type(trainer.optimizer).__name__}")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–µ–Ω–µ—Ä–∞: {e}")
        return False
    
    # 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö
    print("\n6Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î...")
    try:
        skills_count = Skill.objects.count()
        tasks_count = Task.objects.count()
        attempts_count = TaskAttempt.objects.count()
        students_count = User.objects.filter(student_profile__isnull=False).count()
        
        print(f"   üìä –ù–∞–≤—ã–∫–æ–≤ –≤ –ë–î: {skills_count}")
        print(f"   üìä –ó–∞–¥–∞–Ω–∏–π –≤ –ë–î: {tasks_count}")
        print(f"   üìä –ü–æ–ø—ã—Ç–æ–∫ –≤ –ë–î: {attempts_count}")
        print(f"   üìä –°—Ç—É–¥–µ–Ω—Ç–æ–≤ –≤ –ë–î: {students_count}")
        
        if skills_count == 0 or tasks_count == 0:
            print("   ‚ö†Ô∏è  –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î")
        else:
            print("   ‚úÖ –î–∞–Ω–Ω—ã–µ –≤ –ë–î –≥–æ—Ç–æ–≤—ã")
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–î: {e}")
        return False
    
    print("\n" + "=" * 60)
    print("üéâ –í–°–ï –ö–û–ú–ü–û–ù–ï–ù–¢–´ DKN –†–ê–ë–û–¢–ê–Æ–¢ –ö–û–†–†–ï–ö–¢–ù–û!")
    print("=" * 60)
    
    return True


def create_synthetic_sample() -> List[Dict]:
    """–°–æ–∑–¥–∞–µ—Ç –Ω–µ–±–æ–ª—å—à–æ–π –ø—Ä–∏–º–µ—Ä —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    synthetic_data = []
    
    # –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤
    for i in range(10):
        example = {
            'student_id': 1,
            'task_id': i % 3,
            'history': [
                {
                    'task_id': j % 5,
                    'is_correct': np.random.random() > 0.3,
                    'score': np.random.random(),
                    'time_spent': np.random.randint(30, 300),
                    'difficulty': np.random.randint(0, 3),
                    'task_type': np.random.randint(0, 3),
                    'skills': [np.random.randint(0, 5) for _ in range(3)]
                }
                for j in range(10)
            ],
            'bkt_params': {
                k: {
                    'p_learned': np.random.random(),
                    'p_transit': np.random.random(),
                    'p_guess': np.random.random() * 0.3,
                    'p_slip': np.random.random() * 0.3
                }
                for k in range(5)
            },
            'task_skills': [i % 3, (i+1) % 3],
            'task_data': {
                'difficulty': i % 3,
                'task_type': i % 3,
                'estimated_time': np.random.randint(60, 600)
            },
            'target': np.random.random() > 0.4  # –¶–µ–ª–µ–≤–∞—è –º–µ—Ç–∫–∞
        }
        synthetic_data.append(example)
    
    return synthetic_data


def analyze_readiness():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ —Å–æ–∑–¥–∞–Ω–∏—é —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
    
    print("\n" + "=" * 60)
    print("üìã –ê–ù–ê–õ–ò–ó –ì–û–¢–û–í–ù–û–°–¢–ò –ö –°–ò–ù–¢–ï–¢–ò–ß–ï–°–ö–ò–ú –î–ê–ù–ù–´–ú")
    print("=" * 60)
    
    checklist = [
        ("DKN –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞", True, "–ú–æ–¥–µ–ª—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é"),
        ("–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–∞–Ω–Ω—ã—Ö", True, "–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞"),
        ("–¢—Ä–µ–Ω–µ—Ä", True, "–°–∏—Å—Ç–µ–º–∞ –æ–±—É—á–µ–Ω–∏—è –≥–æ—Ç–æ–≤–∞"),
        ("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ç–æ—Ä", True, "–°–∏—Å—Ç–µ–º–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –≥–æ—Ç–æ–≤–∞"),
        ("BKT –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è", True, "BKT –º–æ–¥–µ–ª—å –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∞"),
        ("–ì—Ä–∞—Ñ –Ω–∞–≤—ã–∫–æ–≤", True, "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≥—Ä–∞—Ñ–∞ –Ω–∞–≤—ã–∫–æ–≤ –µ—Å—Ç—å"),
        ("–í–∞–ª–∏–¥–∞—Ü–∏—è", True, "–ú–µ—Ç—Ä–∏–∫–∏ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã"),
        ("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π", True, "Checkpoint —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞")
    ]
    
    ready_count = 0
    for item, status, description in checklist:
        status_symbol = "‚úÖ" if status else "‚ùå"
        print(f"   {status_symbol} {item}: {description}")
        if status:
            ready_count += 1
    
    print(f"\nüìä –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å: {ready_count}/{len(checklist)} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")
    
    if ready_count == len(checklist):
        print("\nüöÄ –ì–û–¢–û–í –ö –°–û–ó–î–ê–ù–ò–Æ –°–ò–ù–¢–ï–¢–ò–ß–ï–°–ö–ò–• –î–ê–ù–ù–´–•!")
        print("   –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("   1. –°–æ–∑–¥–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö")
        print("   2. –°–æ–∑–¥–∞—Ç—å —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤")
        print("   3. –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–±—É—á–∞—é—â—É—é –≤—ã–±–æ—Ä–∫—É")
        print("   4. –û–±—É—á–∏—Ç—å DKN –º–æ–¥–µ–ª—å")
        print("   5. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
    else:
        print("\n‚ö†Ô∏è  –¢–†–ï–ë–£–ï–¢–°–Ø –î–û–†–ê–ë–û–¢–ö–ê")
        missing = [item for item, status, _ in checklist if not status]
        print(f"   –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å: {', '.join(missing)}")


if __name__ == "__main__":
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
        success = test_dkn_components()
        
        if success:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å
            analyze_readiness()
        else:
            print("\n‚ùå –¢–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫–∏.")
            
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
