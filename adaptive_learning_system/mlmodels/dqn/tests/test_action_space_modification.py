"""
–¢–µ—Å—Ç –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –¥–µ–π—Å—Ç–≤–∏–π DQN –º–æ–¥–µ–ª–∏

–≠—Ç–æ—Ç —Ç–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å data_processor.py:
1. –§–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è DQN –º–æ–¥–µ–ª–∏
2. –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –¥–µ–π—Å—Ç–≤–∏–π —Å —É—á–µ—Ç–æ–º –≥—Ä–∞—Ñ–∞ –Ω–∞–≤—ã–∫–æ–≤
3. –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ prerequisite
4. –í–∫–ª—é—á–∞—Ç—å –≥—Ä–∞—Ñ –Ω–∞–≤—ã–∫–æ–≤ –≤ –≤–µ–∫—Ç–æ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è
5. –û–±–µ—Å–ø–µ—á–∏–≤–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ä–∞–±–æ—Ç—É Q-—Ñ—É–Ω–∫—Ü–∏–∏ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ–º –¥–µ–π—Å—Ç–≤–∏–π
"""

import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ Django –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(str(Path(__file__).parent.parent.parent.parent))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'adaptive_learning.settings')

import django
django.setup()

import torch
import numpy as np
from django.contrib.auth.models import User
from skills.models import Skill  
from methodist.models import Task, Course
from mlmodels.models import TaskAttempt, StudentSkillMastery
from student.models import StudentProfile

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ DQN –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
from mlmodels.dqn.data_processor import DQNDataProcessor, DQNEnvironment
from mlmodels.dqn.model import DQNConfig, create_dqn_agent


class TestDQNActionSpaceModification:
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –¥–µ–π—Å—Ç–≤–∏–π DQN"""
    
    def __init__(self, student_id: int = 7):
        self.student_id = student_id
        self.processor = DQNDataProcessor()
        self.env = DQNEnvironment(student_id)
    def test_state_vector_formation(self):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –≤–µ–∫—Ç–æ—Ä–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å –≥—Ä–∞—Ñ–æ–º –Ω–∞–≤—ã–∫–æ–≤"""
        print("\nüß† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –≤–µ–∫—Ç–æ—Ä–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è...")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞
            state_data = self.processor.get_student_state(self.student_id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è (–±–µ–∑ mastered_skills)
            required_keys = ['bkt_params', 'history', 'available_actions', 'skills_graph']
            missing_keys = [key for key in required_keys if key not in state_data]
            
            if missing_keys:
                print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è: {missing_keys}")
                return False
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            bkt_params = state_data['bkt_params']
            history = state_data['history']
            skills_graph = state_data['skills_graph']
            
            print(f"‚úÖ –í–µ–∫—Ç–æ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω:")
            print(f"  - BKT –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {bkt_params.shape} (—Ç–æ–ª—å–∫–æ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∑–Ω–∞–Ω–∏—è)")
            print(f"  - –ò—Å—Ç–æ—Ä–∏—è: {history.shape}")
            print(f"  - –ì—Ä–∞—Ñ –Ω–∞–≤—ã–∫–æ–≤: {skills_graph.shape}")
            print(f"  - –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è: {len(state_data['available_actions'])}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ BKT –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            print(f"\nüìä –î–µ—Ç–∞–ª–∏ BKT –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:")
            mastery_levels = bkt_params.squeeze().tolist()
            skill_stats = {
                '–≤—ã—Å–æ–∫–∏–π (>0.8)': sum(1 for m in mastery_levels if m > 0.8),
                '—Å—Ä–µ–¥–Ω–∏–π (0.5-0.8)': sum(1 for m in mastery_levels if 0.5 <= m <= 0.8), 
                '–Ω–∏–∑–∫–∏–π (<0.5)': sum(1 for m in mastery_levels if m < 0.5)
            }
            for level, count in skill_stats.items():
                print(f"  - –ù–∞–≤—ã–∫–∏ —Å {level} —É—Ä–æ–≤–Ω–µ–º: {count}")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ–ø—ã—Ç–æ–∫
            print(f"\nüìà –î–µ—Ç–∞–ª–∏ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ø—ã—Ç–æ–∫ ({history.shape[0]} –∑–∞–ø–∏—Å–µ–π):")
            if history.shape[0] > 0:
                success_rate = (history[:, 1] == 1.0).float().mean().item()
                avg_difficulty = history[:, 2].mean().item()
                print(f"  - –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.2%}")
                print(f"  - –°—Ä–µ–¥–Ω—è—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: {avg_difficulty:.1f}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏
                print("  - –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –ø–æ–ø—ã—Ç–æ–∫ (task_id, success, difficulty, type, skill_level, mastery_change, time, streak):")
                for i in range(min(5, history.shape[0])):
                    row = history[-(i+1)].tolist()  # –ë–µ—Ä–µ–º —Å –∫–æ–Ω—Ü–∞
                    formatted = [f"{x:.2f}" if isinstance(x, float) else str(int(x)) for x in row]
                    print(f"    {formatted}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä–∞—Ñ –Ω–∞–≤—ã–∫–æ–≤
            if skills_graph.sum().item() == 0:
                print("‚ö†Ô∏è –ì—Ä–∞—Ñ –Ω–∞–≤—ã–∫–æ–≤ –ø—É—Å—Ç–æ–π - prerequisite —Å–≤—è–∑–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
            else:
                num_connections = int(skills_graph.sum().item())
                print(f"üîó Prerequisite —Å–≤—è–∑–µ–π –≤ –≥—Ä–∞—Ñ–µ: {num_connections}")
                
                # –û–±—ä—è—Å–Ω—è–µ–º, –∫–∞–∫ –≥—Ä–∞—Ñ –ø–æ–º–æ–≥–∞–µ—Ç –º–æ–¥–µ–ª–∏
                print("üìñ –ö–∞–∫ –≥—Ä–∞—Ñ –Ω–∞–≤—ã–∫–æ–≤ –ø–æ–º–æ–≥–∞–µ—Ç –º–æ–¥–µ–ª–∏:")
                print("  - –ú–∞—Ç—Ä–∏—Ü–∞ —Å–º–µ–∂–Ω–æ—Å—Ç–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –º–µ–∂–¥—É –Ω–∞–≤—ã–∫–∞–º–∏")
                print("  - –ú–æ–¥–µ–ª—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è:")
                print("    ‚Ä¢ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π")
                print("    ‚Ä¢ –ü–æ–Ω–∏–º–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏–∑—É—á–µ–Ω–∏—è")
                print("    ‚Ä¢ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –ø—É—Ç–∏ –æ–±—É—á–µ–Ω–∏—è")
                print("  - –í –≤–µ–∫—Ç–æ—Ä–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≥—Ä–∞—Ñ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω –∫–∞–∫ —Å–ø–ª—é—â–µ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞")
                print(f"    —Ä–∞–∑–º–µ—Ä–æ–º {skills_graph.shape[0]}√ó{skills_graph.shape[1]} = {skills_graph.numel()} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
            import traceback
            traceback.print_exc()
            return False
    def test_action_space_filtering(self):
        """–¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ prerequisite"""
        print("\nüéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –¥–µ–π—Å—Ç–≤–∏–π...")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞ –∏ –µ–≥–æ BKT –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            user = User.objects.get(id=self.student_id)
            student_profile = StudentProfile.objects.get(user=user)
            bkt_params = self.processor._get_all_bkt_parameters(student_profile)
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–æ–≤—É—é –ª–æ–≥–∏–∫—É —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ (—á–µ—Ä–µ–∑ DQNEnvironment)
            available_actions = self.env.get_available_actions(bkt_params, self.processor.skill_to_id)
            
            print(f"‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π —Å –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–æ–π: {len(available_actions)}")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ BKT –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            mastery_levels = bkt_params.squeeze().tolist()
            high_mastery = sum(1 for m in mastery_levels if m > 0.9)
            medium_mastery = sum(1 for m in mastery_levels if 0.5 <= m <= 0.9)
            low_mastery = sum(1 for m in mastery_levels if m < 0.5)
            
            print(f"üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω–µ–π –æ—Å–≤–æ–µ–Ω–∏—è –Ω–∞–≤—ã–∫–æ–≤:")
            print(f"  - –í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å (>0.9): {high_mastery} –Ω–∞–≤—ã–∫–æ–≤")
            print(f"  - –°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å (0.5-0.9): {medium_mastery} –Ω–∞–≤—ã–∫–æ–≤") 
            print(f"  - –ù–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å (<0.5): {low_mastery} –Ω–∞–≤—ã–∫–æ–≤")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–º–µ—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            print(f"\nüîç –ê–Ω–∞–ª–∏–∑ –ª–æ–≥–∏–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:")
            total_tasks = len(self.env.task_to_skills)
            filtered_out = total_tasks - len(available_actions)
            
            print(f"  - –í—Å–µ–≥–æ –∑–∞–¥–∞–Ω–∏–π –≤ —Å–∏—Å—Ç–µ–º–µ: {total_tasks}")
            print(f"  - –î–æ—Å—Ç—É–ø–Ω–æ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {len(available_actions)}")
            print(f"  - –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ: {filtered_out} ({filtered_out/total_tasks*100:.1f}%)")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
            print(f"\n‚úÖ –ü—Ä–∏–º–µ—Ä—ã –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π:")
            for i, action_idx in enumerate(available_actions[:5]):
                task_id = self.env.action_to_task_id[action_idx]
                task_skills = self.env.task_to_skills.get(task_id, set())
                
                skill_masteries = []
                for skill_id in task_skills:
                    skill_idx = self.processor.skill_to_id.get(skill_id)
                    if skill_idx is not None:
                        mastery = bkt_params[skill_idx, 0].item()
                        skill_masteries.append(f"{skill_id}:{mastery:.2f}")
                
                print(f"  {i+1}. –ó–∞–¥–∞–Ω–∏–µ {task_id}: –Ω–∞–≤—ã–∫–∏ {skill_masteries}")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –¥–µ–π—Å—Ç–≤–∏–π: {e}")
            import traceback
            traceback.print_exc()
            return False
    def test_prerequisite_enforcement(self):
        """–¢–µ—Å—Ç —Å–æ–±–ª—é–¥–µ–Ω–∏—è prerequisite –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π"""
        print("\nüîí –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±–ª—é–¥–µ–Ω–∏—è prerequisite –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π...")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞
            state_data = self.processor.get_student_state(self.student_id)
            bkt_params = state_data['bkt_params']
            available_actions = state_data['available_actions']
            
            violations = 0
            checked_tasks = 0
            
            print(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º prerequisite –¥–ª—è {len(available_actions)} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
            for action_idx in available_actions[:10]:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ 10 –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
                task_id = self.env.action_to_task_id[action_idx]
                task_skills = self.env.task_to_skills.get(task_id, set())
                
                for skill_id in task_skills:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ –≤—Å–µ prerequisite
                    if not self.env._check_prerequisites_mastered(skill_id, bkt_params, self.processor.skill_to_id, 0.85):
                        violations += 1
                        prerequisites = self.env.skills_graph.get(skill_id, set())
                        print(f"‚ùó –ù–∞—Ä—É—à–µ–Ω–∏–µ prerequisite –≤ –∑–∞–¥–∞–Ω–∏–∏ {task_id}")
                        print(f"   –ù–∞–≤—ã–∫ {skill_id} —Ç—Ä–µ–±—É–µ—Ç: {prerequisites}")
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Ä–æ–≤–Ω–∏ –æ—Å–≤–æ–µ–Ω–∏—è prerequisite
                        for prereq_id in prerequisites:
                            skill_idx = self.processor.skill_to_id.get(prereq_id)
                            if skill_idx is not None:
                                mastery = bkt_params[skill_idx, 0].item()
                                print(f"   Prerequisite {prereq_id}: {mastery:.3f} (–Ω—É–∂–Ω–æ ‚â• 0.85)")
                        break
                
                checked_tasks += 1
            
            if violations == 0:
                print(f"‚úÖ Prerequisite –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–æ–±–ª—é–¥–µ–Ω—ã –¥–ª—è –≤—Å–µ—Ö {checked_tasks} –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π")
                print("üéØ –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
            else:
                print(f"‚ùå –ù–∞–π–¥–µ–Ω–æ {violations} –Ω–∞—Ä—É—à–µ–Ω–∏–π prerequisite –∏–∑ {checked_tasks} –∑–∞–¥–∞–Ω–∏–π")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            print(f"\nüîç –ü—Ä–∏–º–µ—Ä—ã —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ prerequisite:")
            for i, skill_id in enumerate(list(self.env.skills_graph.keys())[:3]):
                prerequisites = self.env.skills_graph.get(skill_id, set())
                if prerequisites:
                    is_available = self.env._check_prerequisites_mastered(skill_id, bkt_params, self.processor.skill_to_id)
                    print(f"  –ù–∞–≤—ã–∫ {skill_id}: prerequisite {prerequisites} ‚Üí {'‚úÖ' if is_available else '‚ùå'}")
            
            return violations == 0
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ prerequisite: {e}")
            import traceback
            traceback.print_exc()
            return False
    def test_q_function_with_restricted_actions(self):
        """–¢–µ—Å—Ç Q-—Ñ—É–Ω–∫—Ü–∏–∏ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ–º –¥–µ–π—Å—Ç–≤–∏–π"""
        print("\nü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Q-—Ñ—É–Ω–∫—Ü–∏–∏ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏...")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ —Å–æ–∑–¥–∞–µ–º DQN –∞–≥–µ–Ω—Ç–∞
            state_data = self.processor.get_student_state(self.student_id)
            
            config = DQNConfig()
            config.num_actions = self.processor.get_num_tasks()
            num_skills = self.processor.get_num_skills()
            
            agent = create_dqn_agent(config, num_skills)
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            bkt_params = state_data['bkt_params'].unsqueeze(0)
            history = state_data['history'].unsqueeze(0)
            skills_graph = state_data['skills_graph'].unsqueeze(0)
            
            # –ö–æ–¥–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            encoded_state = agent.q_network.encode_state(bkt_params, history)
            
            # –ü–æ–ª—É—á–∞–µ–º Q-values –¥–ª—è –≤—Å–µ—Ö –¥–µ–π—Å—Ç–≤–∏–π
            q_values = agent.q_network(encoded_state)
            
            print(f"‚úÖ Q-—Ñ—É–Ω–∫—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç:")
            print(f"  - –í—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: BKT {bkt_params.shape}, –∏—Å—Ç–æ—Ä–∏—è {history.shape}")
            print(f"  - –ó–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {encoded_state.shape}")
            print(f"  - Q-values: {q_values.shape}")
            print(f"  - –î–∏–∞–ø–∞–∑–æ–Ω Q-values: [{q_values.min():.3f}, {q_values.max():.3f}]")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏–π —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏
            available_actions = state_data['available_actions']
            
            if available_actions:
                # –ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
                action_unrestricted = q_values.argmax().item()
                
                # –° –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–∏—è
                with torch.no_grad():
                    masked_q_values = q_values.clone()
                    mask = torch.ones(config.num_actions, dtype=torch.bool)
                    mask[available_actions] = False  # –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –ù–ï –º–∞—Å–∫–∏—Ä—É–µ–º
                    masked_q_values[0, mask] = float('-inf')  # –ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—É—á–∞—é—Ç -inf
                    action_restricted = masked_q_values.argmax().item()
                
                print(f"\nüéØ –ü—Ä–æ—Ü–µ—Å—Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π:")
                print(f"  - –í—Å–µ–≥–æ Q-values: {q_values.shape[1]}")
                print(f"  - –î–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π: {len(available_actions)}")
                print(f"  - –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π: {q_values.shape[1] - len(available_actions)}")
                print(f"  - –î–µ–π—Å—Ç–≤–∏–µ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π: {action_unrestricted}")
                print(f"  - –î–µ–π—Å—Ç–≤–∏–µ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏: {action_restricted}")
                print(f"  - –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ: {action_unrestricted != action_restricted}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º Q-values –¥–ª—è –ø–µ—Ä–≤—ã—Ö –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
                print(f"\nüìä Q-values –¥–ª—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π:")
                for i, action_idx in enumerate(available_actions[:5]):
                    q_val = q_values[0, action_idx].item()
                    print(f"  - –î–µ–π—Å—Ç–≤–∏–µ {action_idx}: Q-value = {q_val:.4f}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º Q-values –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
                all_actions = set(range(config.num_actions))
                unavailable_actions = list(all_actions - set(available_actions))[:5]
                print(f"\nüö´ Q-values –¥–ª—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π (–¥–æ –º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–∏—è):")
                for action_idx in unavailable_actions:
                    q_val = q_values[0, action_idx].item()
                    print(f"  - –î–µ–π—Å—Ç–≤–∏–µ {action_idx}: Q-value = {q_val:.4f} ‚Üí –∑–∞–º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–æ –∫–∞–∫ -inf")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –¥–æ—Å—Ç—É–ø–Ω–æ
                if action_restricted in available_actions:
                    print("‚úÖ –í—ã–±—Ä–∞–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö")
                else:
                    print("‚ùå –í—ã–±—Ä–∞–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –ù–ï –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö")
                    return False
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã Q-—Ñ—É–Ω–∫—Ü–∏–∏: {e}")
            import traceback
            traceback.print_exc()
            return False
    
    def test_action_space_consistency(self):
        """–¢–µ—Å—Ç —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –¥–µ–π—Å—Ç–≤–∏–π"""
        print("\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –¥–µ–π—Å—Ç–≤–∏–π...")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –º–∞–ø–ø–∏–Ω–≥–∏
            total_tasks = self.processor.get_num_tasks()
            total_actions = len(self.env.task_ids)
            
            print(f"  - –í—Å–µ–≥–æ –∑–∞–¥–∞–Ω–∏–π –≤ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–µ: {total_tasks}")
            print(f"  - –í—Å–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏–π –≤ —Å—Ä–µ–¥–µ: {total_actions}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –º–∞–ø–ø–∏–Ω–≥–æ–≤
            if total_tasks != total_actions:
                print("‚ùå –ù–µ—Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –º–µ–∂–¥—É –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–º –∏ —Å—Ä–µ–¥–æ–π")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º bidirectional –º–∞–ø–ø–∏–Ω–≥
            mapping_errors = 0
            for task_id in self.env.task_ids[:10]:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ 10
                action_idx = self.env.task_id_to_action[task_id]
                back_task_id = self.env.action_to_task_id[action_idx]
                
                if task_id != back_task_id:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –º–∞–ø–ø–∏–Ω–≥–∞: {task_id} -> {action_idx} -> {back_task_id}")
                    mapping_errors += 1
            
            if mapping_errors == 0:
                print("‚úÖ –ú–∞–ø–ø–∏–Ω–≥–∏ –º–µ–∂–¥—É ID –∑–∞–¥–∞—á –∏ –∏–Ω–¥–µ–∫—Å–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω—ã")
            else:
                print(f"‚ùå –ù–∞–π–¥–µ–Ω–æ {mapping_errors} –æ—à–∏–±–æ–∫ –≤ –º–∞–ø–ø–∏–Ω–≥–µ")
                return False
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –¥–æ—Å—Ç—É–ø–Ω—ã–º –¥–µ–π—Å—Ç–≤–∏—è–º
            state_data = self.processor.get_student_state(self.student_id)
            available_actions = state_data['available_actions']
            
            # –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö [0, total_actions)
            invalid_actions = [a for a in available_actions if a < 0 or a >= total_actions]
            
            if invalid_actions:
                print(f"‚ùå –ù–∞–π–¥–µ–Ω—ã –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ –∏–Ω–¥–µ–∫—Å—ã –¥–µ–π—Å—Ç–≤–∏–π: {invalid_actions}")
                return False
            else:
                print(f"‚úÖ –í—Å–µ {len(available_actions)} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –∏–º–µ—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏: {e}")
            import traceback
            traceback.print_exc()
            return False
    
    def test_skill_difficulty_matching(self):
        """–¢–µ—Å—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∑–∞–¥–∞–Ω–∏–π —É—Ä–æ–≤–Ω—é –Ω–∞–≤—ã–∫–æ–≤"""
        print("\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∑–∞–¥–∞–Ω–∏–π —É—Ä–æ–≤–Ω—é –Ω–∞–≤—ã–∫–æ–≤...")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å —É—á–µ—Ç–æ–º —É—Ä–æ–≤–Ω—è –Ω–∞–≤—ã–∫–æ–≤
            recommendations = self.processor.get_recommended_actions(
                student_id=self.student_id, 
                top_k=10
            )
            
            if not recommendations:
                print("‚ö†Ô∏è –ù–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
                return True
            
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(recommendations)} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            state_data = self.processor.get_student_state(self.student_id)
            bkt_params = state_data['bkt_params']
            
            for i, (action_idx, priority) in enumerate(recommendations[:5]):
                task_id = self.env.action_to_task_id[action_idx]
                task_data = self.processor.get_task_data(task_id)
                
                # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–≤—ã–∫–∏ –∑–∞–¥–∞–Ω–∏—è –∏ –∏—Ö —É—Ä–æ–≤–Ω–∏ –æ—Å–≤–æ–µ–Ω–∏—è
                task_skills = task_data['skills']
                skill_levels = []
                
                for skill_id in task_skills:
                    skill_idx = self.processor.skill_to_id.get(skill_id)
                    if skill_idx is not None:
                        mastery = bkt_params[skill_idx, 0].item()
                        skill_levels.append(mastery)
                
                avg_mastery = np.mean(skill_levels) if skill_levels else 0.5
                
                print(f"  {i+1}. –ó–∞–¥–∞–Ω–∏–µ {task_id} (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority:.3f}):")
                print(f"     - –°–ª–æ–∂–Ω–æ—Å—Ç—å: {task_data['difficulty']}, —Ç–∏–ø: {task_data['task_type']}")
                print(f"     - –ù–∞–≤—ã–∫–∏: {task_skills}")
                print(f"     - –°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å –æ—Å–≤–æ–µ–Ω–∏—è: {avg_mastery:.3f}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è
                expected_difficulty = 0 if avg_mastery < 0.5 else (1 if avg_mastery < 0.8 else 2)
                difficulty_match = abs(task_data['difficulty'] - expected_difficulty) <= 1
                
                if difficulty_match:
                    print(f"     ‚úÖ –°–ª–æ–∂–Ω–æ—Å—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —É—Ä–æ–≤–Ω—é –Ω–∞–≤—ã–∫–æ–≤")
                else:
                    print(f"     ‚ö†Ô∏è –°–ª–æ–∂–Ω–æ—Å—Ç—å –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —É—Ä–æ–≤–Ω—é –Ω–∞–≤—ã–∫–æ–≤ (–æ–∂–∏–¥–∞–ª–æ—Å—å: {expected_difficulty})")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏: {e}")
            import traceback
            traceback.print_exc()
            return False
    def test_detailed_history_analysis(self):
        """–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ø—ã—Ç–æ–∫"""
        print("\nüìä –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ø—ã—Ç–æ–∫...")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞
            user = User.objects.get(id=self.student_id)
            student_profile = StudentProfile.objects.get(user=user)
            history = self.processor._get_student_history(student_profile)
            print(f"‚úÖ –ò—Å—Ç–æ—Ä–∏—è –ø–æ–ø—ã—Ç–æ–∫: {history.shape}")
            print(f"üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–∞–∂–¥–æ–π –∑–∞–ø–∏—Å–∏ (7 –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤):")
            print(f"  0. task_id_encoded - –ö–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π ID –∑–∞–¥–∞–Ω–∏—è")
            print(f"  1. success - –£—Å–ø–µ—à–Ω–æ—Å—Ç—å (0/1)")
            print(f"  2. difficulty - –°–ª–æ–∂–Ω–æ—Å—Ç—å (0=–ø—Ä–æ—Å—Ç–∞—è, 1=—Å—Ä–µ–¥–Ω—è—è, 2=—Å–ª–æ–∂–Ω–∞—è)")
            print(f"  3. task_type - –¢–∏–ø –∑–∞–¥–∞–Ω–∏—è (0=single, 1=multiple, 2=true_false)")
            print(f"  4. skill_level - –£—Ä–æ–≤–µ–Ω—å –æ—Å–≤–æ–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –Ω–∞–≤—ã–∫–∞ (0-1)")
            print(f"  5. time_spent - –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è (0-1)")
            print(f"  6. streak - –°–µ—Ä–∏—è —É—Å–ø–µ—Ö–æ–≤ (0-1)")
            
            if history.shape[0] > 0:
                print(f"\nüîç –ó–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö {min(10, history.shape[0])} –ø–æ–ø—ã—Ç–æ–∫:")
                print("    task_id | success | diff | type | skill_lvl | time | streak")
                print("    " + "-" * 65)
                
                for i in range(min(10, history.shape[0])):
                    row = history[i].tolist()
                    formatted_row = [
                        f"{int(row[0]):7d}",    # task_id
                        f"{row[1]:7.0f}",       # success
                        f"{row[2]:4.0f}",       # difficulty
                        f"{row[3]:4.0f}",       # task_type
                        f"{row[4]:9.3f}",       # skill_level
                        f"{row[5]:4.2f}",       # time_spent
                        f"{row[6]:6.3f}"        # streak
                    ]
                    print("    " + " | ".join(formatted_row))
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º                print(f"\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º:")
                print(f"  - –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {(history[:, 1] == 1.0).float().mean():.1%}")
                print(f"  - –°–ª–æ–∂–Ω–æ—Å—Ç—å: –º–∏–Ω={history[:, 2].min():.0f}, –º–∞–∫—Å={history[:, 2].max():.0f}, —Å—Ä–µ–¥–Ω–µ–µ={history[:, 2].mean():.1f}")
                print(f"  - –£—Ä–æ–≤–µ–Ω—å –Ω–∞–≤—ã–∫–æ–≤: –º–∏–Ω={history[:, 4].min():.3f}, –º–∞–∫—Å={history[:, 4].max():.3f}, —Å—Ä–µ–¥–Ω–µ–µ={history[:, 4].mean():.3f}")
                print(f"  - –í—Ä–µ–º—è: –º–∏–Ω={history[:, 5].min():.3f}, –º–∞–∫—Å={history[:, 5].max():.3f}, —Å—Ä–µ–¥–Ω–µ–µ={history[:, 5].mean():.3f}")
                print(f"  - –°–µ—Ä–∏—è —É—Å–ø–µ—Ö–æ–≤: –º–∏–Ω={history[:, 6].min():.3f}, –º–∞–∫—Å={history[:, 6].max():.3f}, —Å—Ä–µ–¥–Ω–µ–µ={history[:, 6].mean():.3f}")
                
                # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
                print(f"\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:")
                unique_tasks = len(torch.unique(history[:, 0]))
                unique_difficulties = len(torch.unique(history[:, 2]))
                unique_types = len(torch.unique(history[:, 3]))
                
                print(f"  - –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –≤ –∏—Å—Ç–æ—Ä–∏–∏: {unique_tasks}")
                print(f"  - –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏: {unique_difficulties}")
                print(f"  - –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∑–∞–¥–∞–Ω–∏–π: {unique_types}")
                print(f"  ‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä mastery_change —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
            import traceback
            traceback.print_exc()
            return False

    def test_skills_graph_representation(self):
        """–ê–Ω–∞–ª–∏–∑ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –≥—Ä–∞—Ñ–∞ –Ω–∞–≤—ã–∫–æ–≤"""
        print("\nüï∏Ô∏è –ê–Ω–∞–ª–∏–∑ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –≥—Ä–∞—Ñ–∞ –Ω–∞–≤—ã–∫–æ–≤...")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≥—Ä–∞—Ñ –Ω–∞–≤—ã–∫–æ–≤
            skills_graph = self.processor._build_skills_graph_matrix()
            
            print(f"‚úÖ –ì—Ä–∞—Ñ –Ω–∞–≤—ã–∫–æ–≤: {skills_graph.shape}")
            print(f"üîó –í—Å–µ–≥–æ prerequisite —Å–≤—è–∑–µ–π: {int(skills_graph.sum())}")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≥—Ä–∞—Ñ–∞
            num_skills = skills_graph.shape[0]
            skills_with_prereqs = (skills_graph.sum(dim=1) > 0).sum().item()
            max_prereqs = skills_graph.sum(dim=1).max().item()
            
            print(f"üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –≥—Ä–∞—Ñ–∞:")
            print(f"  - –í—Å–µ–≥–æ –Ω–∞–≤—ã–∫–æ–≤: {num_skills}")
            print(f"  - –ù–∞–≤—ã–∫–æ–≤ —Å prerequisite: {skills_with_prereqs}")
            print(f"  - –ú–∞–∫—Å–∏–º—É–º prerequisite —É –æ–¥–Ω–æ–≥–æ –Ω–∞–≤—ã–∫–∞: {int(max_prereqs)}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, –∫–∞–∫ –≥—Ä–∞—Ñ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω –≤ –≤–µ–∫—Ç–æ—Ä–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            print(f"\nüß† –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –≤ –≤–µ–∫—Ç–æ—Ä–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è:")
            print(f"  - –ú–∞—Ç—Ä–∏—Ü–∞ {num_skills}√ó{num_skills} —Å–ø–ª—é—â–∏–≤–∞–µ—Ç—Å—è –≤ –≤–µ–∫—Ç–æ—Ä —Ä–∞–∑–º–µ—Ä–∞ {skills_graph.numel()}")
            print(f"  - –ö–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç [i,j] –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç: '—è–≤–ª—è–µ—Ç—Å—è –ª–∏ –Ω–∞–≤—ã–∫ j prerequisite –¥–ª—è –Ω–∞–≤—ã–∫–∞ i'")
            print(f"  - –ó–Ω–∞—á–µ–Ω–∏–µ 1.0 = –µ—Å—Ç—å —Å–≤—è–∑—å, 0.0 = –Ω–µ—Ç —Å–≤—è–∑–∏")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã —Å–≤—è–∑–µ–π
            print(f"\nüîç –ü—Ä–∏–º–µ—Ä—ã prerequisite —Å–≤—è–∑–µ–π:")
            connections_found = 0
            for i in range(min(num_skills, 5)):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ 5 –Ω–∞–≤—ã–∫–æ–≤
                prereqs = (skills_graph[i] > 0).nonzero().flatten()
                if len(prereqs) > 0:
                    print(f"  - –ù–∞–≤—ã–∫ {i+1} —Ç—Ä–µ–±—É–µ—Ç –Ω–∞–≤—ã–∫–∏: {[p.item()+1 for p in prereqs]}")
                    connections_found += 1
                    if connections_found >= 3:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 –ø—Ä–∏–º–µ—Ä–∞
                        break
            
            if connections_found == 0:
                print("  ‚ö†Ô∏è  Prerequisite —Å–≤—è–∑–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø–µ—Ä–≤—ã—Ö 5 –Ω–∞–≤—ã–∫–∞—Ö")
            
            # –û–±—ä—è—Å–Ω—è–µ–º, –∫–∞–∫ —ç—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç –º–æ–¥–µ–ª–∏
            print(f"\nüéì –ö–∞–∫ –≥—Ä–∞—Ñ –ø–æ–º–æ–≥–∞–µ—Ç DQN –º–æ–¥–µ–ª–∏:")
            print(f"  - –ú–æ–¥–µ–ª—å –≤–∏–¥–∏—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –º–µ–∂–¥—É –Ω–∞–≤—ã–∫–∞–º–∏ —á–µ—Ä–µ–∑ –º–∞—Ç—Ä–∏—Ü—É —Å–º–µ–∂–Ω–æ—Å—Ç–∏")
            print(f"  - –ü—Ä–∏ –≤—ã–±–æ—Ä–µ –¥–µ–π—Å—Ç–≤–∏—è –º–æ–¥–µ–ª—å —É—á–∏—Ç—ã–≤–∞–µ—Ç prerequisite –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è")
            print(f"  - –ì—Ä–∞—Ñ –ø–æ–∑–≤–æ–ª—è–µ—Ç –º–æ–¥–µ–ª–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–∑—É—á–µ–Ω–∏—è")
            print(f"  - –í—Ö–æ–¥–Ω–æ–π —Å–ª–æ–π –ø–æ–ª—É—á–∞–µ—Ç —Å–ø–ª—é—â–µ–Ω–Ω—É—é –º–∞—Ç—Ä–∏—Ü—É –∫–∞–∫ —á–∞—Å—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏—è")
            print(f"  - –†–∞–∑–º–µ—Ä –≤—Ö–æ–¥–∞ –æ—Ç –≥—Ä–∞—Ñ–∞: {skills_graph.numel()} –Ω–µ–π—Ä–æ–Ω–æ–≤")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –≥—Ä–∞—Ñ–∞ –Ω–∞–≤—ã–∫–æ–≤: {e}")
            import traceback
            traceback.print_exc()
            return False
def run_action_space_modification_tests():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –¥–µ–π—Å—Ç–≤–∏–π"""
    print("üöÄ –¢–ï–°–¢–´ –ú–û–î–ò–§–ò–ö–ê–¶–ò–ò –ü–†–û–°–¢–†–ê–ù–°–¢–í–ê –î–ï–ô–°–¢–í–ò–ô DQN")
    print("=" * 70)
    
    tester = TestDQNActionSpaceModification(student_id=7)
    tests = [
        ("–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è", tester.test_state_vector_formation),
        ("–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ø—ã—Ç–æ–∫", tester.test_detailed_history_analysis),
        ("–ê–Ω–∞–ª–∏–∑ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –≥—Ä–∞—Ñ–∞ –Ω–∞–≤—ã–∫–æ–≤", tester.test_skills_graph_representation),
        ("–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –¥–µ–π—Å—Ç–≤–∏–π", tester.test_action_space_filtering),
        ("–°–æ–±–ª—é–¥–µ–Ω–∏–µ prerequisite –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π", tester.test_prerequisite_enforcement),
        ("Q-—Ñ—É–Ω–∫—Ü–∏—è —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏", tester.test_q_function_with_restricted_actions),
        ("–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –¥–µ–π—Å—Ç–≤–∏–π", tester.test_action_space_consistency),
        ("–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —É—Ä–æ–≤–Ω—é –Ω–∞–≤—ã–∫–æ–≤", tester.test_skill_difficulty_matching),
        ("–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ø—ã—Ç–æ–∫", tester.test_detailed_history_analysis),
        ("–ê–Ω–∞–ª–∏–∑ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –≥—Ä–∞—Ñ–∞ –Ω–∞–≤—ã–∫–æ–≤", tester.test_skills_graph_representation),
    ]
    
    passed = 0
    total = len(tests)
    
    for name, test_func in tests:
        print(f"\n{'='*50}")
        print(f"üß™ –¢–µ—Å—Ç: {name}")
        print('='*50)
        
        try:
            if test_func():
                print(f"‚úÖ {name}: –ü–†–û–ô–î–ï–ù")
                passed += 1
            else:
                print(f"‚ùå {name}: –ù–ï –ü–†–û–ô–î–ï–ù")
        except Exception as e:
            print(f"üí• {name}: –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê - {e}")
    
    print(f"\n{'='*70}")
    print(f"üìä –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print('='*70)
    print(f"–ü—Ä–æ–π–¥–µ–Ω–æ: {passed}/{total}")
    print(f"–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏: {passed/total*100:.1f}%")
    
    if passed == total:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –¥–µ–π—Å—Ç–≤–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        print("‚úÖ DQN –º–æ–¥–µ–ª—å –≥–æ—Ç–æ–≤–∞ –∫ –æ–±—É—á–µ–Ω–∏—é —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏ –ø–æ prerequisite")
    else:
        print("‚ö†Ô∏è –ù–ê–ô–î–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´ –≤ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –¥–µ–π—Å—Ç–≤–∏–π")
    
    return passed == total


if __name__ == "__main__":
    success = run_action_space_modification_tests()
    exit(0 if success else 1)
