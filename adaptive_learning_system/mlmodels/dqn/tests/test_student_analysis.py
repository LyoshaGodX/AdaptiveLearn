#!/usr/bin/env python3
"""
–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞ –∏ –µ–≥–æ –æ–±—É—á–µ–Ω–∏—è

–≠—Ç–æ—Ç —Ç–µ—Å—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—É—é –∫–∞—Ä—Ç–∏–Ω—É:
- BKT –æ—Ü–µ–Ω–∫–∏ –Ω–∞–≤—ã–∫–æ–≤ —Å—Ç—É–¥–µ–Ω—Ç–∞
- –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –Ω–∞–≤—ã–∫–∏ –ø–æ –≥—Ä–∞—Ñ—É –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
- –ò—Å—Ç–æ—Ä–∏—é –ø–æ–ø—ã—Ç–æ–∫ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
- –î–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–æ–ø—ã—Ç–∫–µ
"""

import os
import sys
from pathlib import Path
import json
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ Django –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(str(Path(__file__).parent.parent.parent.parent))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'adaptive_learning.settings')

import django
django.setup()

import torch
from django.contrib.auth.models import User
from django.db.models import Q, Avg, Count

from skills.models import Skill
from methodist.models import Task
from mlmodels.models import TaskAttempt, StudentSkillMastery, DQNRecommendation
from student.models import StudentProfile
from mlmodels.dqn.data_processor import DQNDataProcessor
from mlmodels.dqn.recommender import DQNRecommender


class StudentAnalyzer:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞"""
    
    def __init__(self, student_id: int):
        self.student_id = student_id
        self.processor = DQNDataProcessor()
        self.user = User.objects.get(id=student_id)
        self.profile, _ = StudentProfile.objects.get_or_create(user=self.user)    
    def analyze_student_state(self):
        """–ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞"""
        print("=" * 80)
        print(f"üéì –ê–ù–ê–õ–ò–ó –°–û–°–¢–û–Ø–ù–ò–Ø –°–¢–£–î–ï–ù–¢–ê {self.student_id}")
        print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {self.user.username} ({self.user.first_name} {self.user.last_name})")
        print("=" * 80)
        
        # 1. BKT –æ—Ü–µ–Ω–∫–∏ –Ω–∞–≤—ã–∫–æ–≤
        self._analyze_bkt_skills()
        
        # 2. –î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞–≤—ã–∫–∏ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è
        self._analyze_available_skills_detailed()
        
        # 3. –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ –∏ —Å–≤—è–∑–∞–Ω–Ω–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è
        self._analyze_last_attempt_and_recommendation()
        
        # 4. –¢–µ–∫—É—â–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è
        self._analyze_current_recommendation()
        
        print("=" * 80)
        print("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω")
        print("=" * 80)
    
    def _analyze_bkt_skills(self):
        """–ê–Ω–∞–ª–∏–∑ BKT –æ—Ü–µ–Ω–æ–∫ –Ω–∞–≤—ã–∫–æ–≤"""
        print("\nüìä BKT –û–¶–ï–ù–ö–ò –ù–ê–í–´–ö–û–í –°–¢–£–î–ï–ù–¢–ê")
        print("-" * 50)
          # –ü–æ–ª—É—á–∞–µ–º BKT –¥–∞–Ω–Ω—ã–µ
        bkt_data = self.processor._get_all_bkt_parameters(self.profile)
        
        if bkt_data is None or len(bkt_data) == 0:
            print("‚ö†Ô∏è BKT –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
            
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –Ω–∞–≤—ã–∫–æ–≤
        skills = list(Skill.objects.all().order_by('id'))
        
        print(f"üìà –í—Å–µ–≥–æ –Ω–∞–≤—ã–∫–æ–≤: {len(skills)}")
        print(f"üìä BKT –¥–∞–Ω–Ω—ã—Ö: {len(bkt_data)}")
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ —É—Ä–æ–≤–Ω—é –æ—Å–≤–æ–µ–Ω–∏—è
        high_mastery = []  # > 0.8
        medium_mastery = []  # 0.5 - 0.8  
        low_mastery = []  # < 0.5
        
        print("\nüéØ –î–ï–¢–ê–õ–ò–ó–ê–¶–ò–Ø –ü–û –ù–ê–í–´–ö–ê–ú:")
        for i, skill in enumerate(skills):
            if i < len(bkt_data):
                prob = float(bkt_data[i])
                level = "üî•" if prob > 0.8 else "üî∂" if prob > 0.5 else "üî¥"
                
                print(f"  {level} {skill.name:<30} | P(–∑–Ω–∞–Ω–∏–µ) = {prob:.4f}")
                
                if prob > 0.8:
                    high_mastery.append((skill, prob))
                elif prob > 0.5:
                    medium_mastery.append((skill, prob))
                else:
                    low_mastery.append((skill, prob))
            else:                print(f"  ‚ùì {skill.name:<30} | –ù–µ—Ç BKT –¥–∞–Ω–Ω—ã—Ö")
        
        print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –û–°–í–û–ï–ù–ò–Ø:")
        print(f"  üî• –í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å (>0.8): {len(high_mastery)} –Ω–∞–≤—ã–∫–æ–≤")
        print(f"  üî∂ –°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å (0.5-0.8): {len(medium_mastery)} –Ω–∞–≤—ã–∫–æ–≤") 
        print(f"  üî¥ –ù–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å (<0.5): {len(low_mastery)} –Ω–∞–≤—ã–∫–æ–≤")
    def _analyze_available_skills_detailed(self):
        """–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–∞–≤—ã–∫–æ–≤ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è"""
        print("\nüéØ –î–û–°–¢–£–ü–ù–´–ï –ù–ê–í–´–ö–ò –î–õ–Ø –ò–ó–£–ß–ï–ù–ò–Ø")
        print("-" * 50)
        
        # –ü–æ–ª—É—á–∞–µ–º BKT –¥–∞–Ω–Ω—ã–µ
        bkt_data = self.processor._get_all_bkt_parameters(self.profile)
        skills = list(Skill.objects.all().order_by('id'))
        
        if bkt_data is None or len(bkt_data) == 0:
            print("‚ö†Ô∏è BKT –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Å–≤–æ–µ–Ω–Ω—ã–µ –Ω–∞–≤—ã–∫–∏ (–ø–æ—Ä–æ–≥ 0.7)
        mastered_skills = set()
        for i, skill in enumerate(skills):
            if i < len(bkt_data) and float(bkt_data[i]) > 0.7:
                mastered_skills.add(skill.id)
        
        print(f"üìä –ê–õ–ì–û–†–ò–¢–ú –û–ü–†–ï–î–ï–õ–ï–ù–ò–Ø –î–û–°–¢–£–ü–ù–û–°–¢–ò:")
        print(f"   1. –í—Å–µ –Ω–∞–≤—ã–∫–∏ –≤ —Å–∏—Å—Ç–µ–º–µ: {len(skills)}")
        print(f"   2. –û—Å–≤–æ–µ–Ω–Ω—ã–µ –Ω–∞–≤—ã–∫–∏ (P>0.7): {len(mastered_skills)}")
        print(f"   3. –î–æ—Å—Ç—É–ø–Ω—ã–µ = –Ω–∞–≤—ã–∫–∏ –±–µ–∑ prerequisite –ò–õ–ò —Å –æ—Å–≤–æ–µ–Ω–Ω—ã–º–∏ prerequisite")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –Ω–∞–≤—ã–∫
        available_skills = []
        blocked_skills = []
        
        for i, skill in enumerate(skills):
            bkt_prob = float(bkt_data[i]) if i < len(bkt_data) else 0.0
            
            # –ü–æ–ª—É—á–∞–µ–º prerequisites
            prerequisites = skill.prerequisites.all()
            
            if not prerequisites.exists():
                # –ù–µ—Ç prerequisites - –Ω–∞–≤—ã–∫ –¥–æ—Å—Ç—É–ø–µ–Ω
                available_skills.append((skill, bkt_prob, []))
            else:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º prerequisites
                missing_prereqs = []
                for prereq in prerequisites:
                    if prereq.id not in mastered_skills:
                        missing_prereqs.append(prereq.name)
                
                if not missing_prereqs:
                    # –í—Å–µ prerequisites –æ—Å–≤–æ–µ–Ω—ã - –Ω–∞–≤—ã–∫ –¥–æ—Å—Ç—É–ø–µ–Ω
                    available_skills.append((skill, bkt_prob, [p.name for p in prerequisites]))
                else:
                    # –ï—Å—Ç—å –Ω–µ–æ—Å–≤–æ–µ–Ω–Ω—ã–µ prerequisites - –Ω–∞–≤—ã–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
                    blocked_skills.append((skill, bkt_prob, missing_prereqs))
        
        print(f"\nüéØ –í–°–ï –î–û–°–¢–£–ü–ù–´–ï –ù–ê–í–´–ö–ò ({len(available_skills)}):")
        for skill, prob, prereqs in available_skills:
            status = "üî• –û–°–í–û–ï–ù" if prob > 0.8 else "üî∂ –ò–ó–£–ß–ê–ï–¢–°–Ø" if prob > 0.5 else "üî¥ –¢–†–ï–ë–£–ï–¢ –ò–ó–£–ß–ï–ù–ò–Ø"
            prereq_info = f" | –¢—Ä–µ–±–æ–≤–∞–ª: {', '.join(prereqs[:3])}" if prereqs else " | –ë–∞–∑–æ–≤—ã–π –Ω–∞–≤—ã–∫"
            if len(prereqs) > 3:
                prereq_info += f" (+{len(prereqs)-3} –µ—â—ë)"
            print(f"  {status} {skill.name:<35} | P={prob:.4f}{prereq_info}")
        
        print(f"\nüö´ –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù–ù–´–ï –ù–ê–í–´–ö–ò ({len(blocked_skills)}):")
        for skill, prob, missing in blocked_skills[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
            missing_str = ", ".join(missing[:3])
            if len(missing) > 3:
                missing_str += f" (+{len(missing)-3} –µ—â—ë)"
            print(f"  ‚ùå {skill.name:<35} | P={prob:.4f} | –ù—É–∂–Ω—ã: {missing_str}")
        
        if len(blocked_skills) > 10:
            print(f"  ... –∏ –µ—â—ë {len(blocked_skills) - 10} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞–≤—ã–∫–æ–≤")
    
    def _analyze_last_attempt_and_recommendation(self):
        """–ê–Ω–∞–ª–∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ–ø—ã—Ç–∫–∏ –∏ —Å–≤—è–∑–∞–Ω–Ω–æ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
        print("\nÔøΩ –ü–û–°–õ–ï–î–ù–Ø–Ø –ü–û–ü–´–¢–ö–ê –ò –°–í–Ø–ó–ê–ù–ù–ê–Ø –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø")
        print("-" * 50)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –ø–æ–ø—ã—Ç–∫—É
        attempt = TaskAttempt.objects.filter(
            student__user_id=self.student_id
        ).select_related('task', 'student').order_by('-completed_at').first()
        
        if not attempt:
            print("‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        status = "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ" if attempt.is_correct else "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ"
        print(f"üéØ –ü–æ–ø—ã—Ç–∫–∞ #{attempt.id} | {status}")
        print(f"üìÖ –í—Ä–µ–º—è: {attempt.completed_at.strftime('%Y-%m-%d %H:%M:%S')}")
        print(f"üìã –ó–∞–¥–∞–Ω–∏–µ: {attempt.task.title}")
        print(f"‚ö° –°–ª–æ–∂–Ω–æ—Å—Ç—å: {attempt.task.difficulty}")
          # –ù–∞–≤—ã–∫–∏ –∑–∞–¥–∞–Ω–∏—è
        task_skills = attempt.task.skills.all()
        print(f"üéØ –†–∞–∑–≤–∏–≤–∞–µ–º—ã–µ –Ω–∞–≤—ã–∫–∏ ({task_skills.count()}):")
        for skill in task_skills:
            print(f"  ‚Ä¢ {skill.name}")
        
        # –ü–æ–∏—Å–∫ —Å–≤—è–∑–∞–Ω–Ω–æ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        print(f"\nü§ñ –°–í–Ø–ó–ê–ù–ù–ê–Ø –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø:")
        try:
            # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –ø—Ä—è–º—É—é —Å–≤—è–∑—å —á–µ—Ä–µ–∑ –ø–æ–ª–µ attempt –≤ DQNRecommendation
            recommendation = DQNRecommendation.objects.filter(attempt=attempt).first()
            
            if recommendation:
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –ø—Ä—è–º–∞—è —Å–≤—è–∑—å (—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è -> –ø–æ–ø—ã—Ç–∫–∞):")
                self._print_recommendation_details(recommendation)
            else:
                # –ï—Å–ª–∏ –ø—Ä—è–º–æ–π —Å–≤—è–∑–∏ –Ω–µ—Ç, –∏—â–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –∑–∞–¥–∞–Ω–∏—é
                print(f"üîç –ü—Ä—è–º–∞—è —Å–≤—è–∑—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—â–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –∑–∞–¥–∞–Ω–∏—é...")
                
                # –ò—â–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —ç—Ç–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞ –ø–æ —Ç–æ–º—É –∂–µ –∑–∞–¥–∞–Ω–∏—é
                potential_recs = DQNRecommendation.objects.filter(
                    student__user_id=self.user.id,
                    task=attempt.task
                ).order_by('-created_at')
                
                if potential_recs.exists():
                    closest_rec = None
                    min_time_diff = None
                    
                    for rec in potential_recs:
                        # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–Ω–æ—Å—Ç—å –≤–æ –≤—Ä–µ–º–µ–Ω–∏
                        time_diff = abs((attempt.completed_at - rec.created_at).total_seconds())
                        if min_time_diff is None or time_diff < min_time_diff:
                            min_time_diff = time_diff
                            closest_rec = rec
                    
                    if closest_rec and min_time_diff <= 3600:  # –í –ø—Ä–µ–¥–µ–ª–∞—Ö —á–∞—Å–∞
                        print(f"ÔøΩ –ù–∞–π–¥–µ–Ω–∞ –≤–µ—Ä–æ—è—Ç–Ω–∞—è —Å–≤—è–∑—å (—Ä–∞–∑–Ω–∏—Ü–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–∏: {min_time_diff:.0f} —Å–µ–∫):")
                        self._print_recommendation_details(closest_rec)
                    else:
                        print(f"‚ùå –ü–æ–¥—Ö–æ–¥—è—â–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                else:
                    print(f"‚ùå –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: {e}")
    
    def _analyze_current_recommendation(self):
        """–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
        print("\nüìå –¢–ï–ö–£–©–ê–Ø –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø")
        print("-" * 50)
        
        try:
            from mlmodels.models import StudentCurrentRecommendation
            current = StudentCurrentRecommendation.objects.filter(
                student__user_id=self.student_id
            ).select_related('recommendation__task').first()
            
            if current:
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Ç–µ–∫—É—â–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:")
                print(f"üìÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {current.set_at.strftime('%Y-%m-%d %H:%M:%S')}")
                print(f"üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: {current.times_viewed}")
                
                # LLM –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –≤ —Ç–µ–∫—É—â–µ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                if hasattr(current, 'llm_explanation') and current.llm_explanation:
                    print(f"ü§ñ LLM –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –≤ —Ç–µ–∫—É—â–µ–π –∑–∞–ø–∏—Å–∏: ‚úÖ –ï—Å—Ç—å ({len(current.llm_explanation)} —Å–∏–º–≤–æ–ª–æ–≤)")
                    preview = current.llm_explanation[:150] + "..." if len(current.llm_explanation) > 150 else current.llm_explanation
                    print(f"   üìù –ü—Ä–µ–≤—å—é: {preview}")
                else:
                    print(f"ü§ñ LLM –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –≤ —Ç–µ–∫—É—â–µ–π –∑–∞–ø–∏—Å–∏: ‚ùå –ü—É—Å—Ç–æ–µ")
                
                self._print_recommendation_details(current.recommendation)
            else:
                print(f"‚ùå –¢–µ–∫—É—â–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
                
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: {e}")
    
    def _print_recommendation_details(self, recommendation):
        """–ü–µ—á–∞—Ç–∞–µ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
        print(f"  üÜî ID —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: {recommendation.id}")
        print(f"  üìã ID –∑–∞–¥–∞–Ω–∏—è: {recommendation.task.id}")
        print(f"  üìù –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è: {recommendation.task.title}")
        print(f"  üë§ –°—Ç—É–¥–µ–Ω—Ç ID (User): {recommendation.student.user.id}")
        print(f"  ÔøΩ –°—Ç—É–¥–µ–Ω—Ç ID (Profile): {recommendation.student.id}")
        print(f"  ÔøΩüìä Q-value: {recommendation.q_value:.6f}")
        print(f"  üìà –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {recommendation.confidence:.6f}")
        print(f"  üí° –ü—Ä–∏—á–∏–Ω–∞: {recommendation.reason}")
        print(f"  üìÖ –°–æ–∑–¥–∞–Ω–∞: {recommendation.created_at.strftime('%Y-%m-%d %H:%M:%S')}")
        print(f"  üéØ –ê–∫—Ç–∏–≤–Ω–∞—è: {'–î–∞' if recommendation.is_active else '–ù–µ—Ç'}")
        print(f"  ‚ö° –°–ª–æ–∂–Ω–æ—Å—Ç—å –∑–∞–¥–∞–Ω–∏—è: {recommendation.task.difficulty}")
        print(f"  üî§ –¢–∏–ø –∑–∞–¥–∞–Ω–∏—è: {recommendation.task.task_type}")
        print(f"  ‚úÖ –ó–∞–¥–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ: {'–î–∞' if recommendation.task.is_active else '–ù–µ—Ç'}")
        
        # –°–≤—è–∑–∞–Ω–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞
        if recommendation.attempt:
            status = "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ" if recommendation.attempt.is_correct else "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ"
            print(f"  üîó –°–≤—è–∑–∞–Ω–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞: #{recommendation.attempt.id} {status}")
            print(f"     üìÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∞: {recommendation.attempt.completed_at.strftime('%Y-%m-%d %H:%M:%S')}")
        else:
            print(f"  üîó –°–≤—è–∑–∞–Ω–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞: –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
          # –°–Ω–∏–º–æ–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞
        if hasattr(recommendation, 'student_state_snapshot') and recommendation.student_state_snapshot:
            print(f"  üìä –°–Ω–∏–º–æ–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è: –°–æ—Ö—Ä–∞–Ω–µ–Ω ({len(str(recommendation.student_state_snapshot))} —Å–∏–º–≤–æ–ª–æ–≤)")
        else:
            print(f"  üìä –°–Ω–∏–º–æ–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è: –ù–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
          # LLM –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –≤ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if hasattr(recommendation, 'llm_explanation') and recommendation.llm_explanation:
            print(f"  ü§ñ LLM –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –≤ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: ‚úÖ –ï—Å—Ç—å ({len(recommendation.llm_explanation)} —Å–∏–º–≤–æ–ª–æ–≤)")
            preview = recommendation.llm_explanation[:150] + "..." if len(recommendation.llm_explanation) > 150 else recommendation.llm_explanation
            print(f"     üìù –ü—Ä–µ–≤—å—é: {preview}")
        else:
            print(f"  ü§ñ LLM –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –≤ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: ‚ùå –ü—É—Å—Ç–æ–µ")
        
        # LLM –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –ø–æ–ª—è
        print(f"\n  üìä LLM –ö–û–ù–¢–ï–ö–°–¢–ù–´–ï –ü–û–õ–Ø:")
        
        # Prerequisite –Ω–∞–≤—ã–∫–∏
        if hasattr(recommendation, 'prerequisite_skills_snapshot') and recommendation.prerequisite_skills_snapshot:
            print(f"  üîó Prerequisite –Ω–∞–≤—ã–∫–∏: ‚úÖ –ï—Å—Ç—å ({len(recommendation.prerequisite_skills_snapshot)} –∑–∞–ø–∏—Å–µ–π)")
            for skill in recommendation.prerequisite_skills_snapshot[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                print(f"     ‚Ä¢ {skill.get('skill_name', 'N/A')} | P(–∑–Ω–∞–Ω–∏–µ) = {skill.get('mastery_probability', 0):.4f}")
        else:
            print(f"  üîó Prerequisite –Ω–∞–≤—ã–∫–∏: ‚ùå –ü—É—Å—Ç–æ–µ")
        
        # –ó–∞–≤–∏—Å–∏–º—ã–µ –Ω–∞–≤—ã–∫–∏
        if hasattr(recommendation, 'dependent_skills_snapshot') and recommendation.dependent_skills_snapshot:
            print(f"  üîÑ –ó–∞–≤–∏—Å–∏–º—ã–µ –Ω–∞–≤—ã–∫–∏: ‚úÖ –ï—Å—Ç—å ({len(recommendation.dependent_skills_snapshot)} –∑–∞–ø–∏—Å–µ–π)")
            for skill in recommendation.dependent_skills_snapshot[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                print(f"     ‚Ä¢ {skill.get('skill_name', 'N/A')} | P(–∑–Ω–∞–Ω–∏–µ) = {skill.get('mastery_probability', 0):.4f}")
        else:
            print(f"  üîÑ –ó–∞–≤–∏—Å–∏–º—ã–µ –Ω–∞–≤—ã–∫–∏: ‚ùå –ü—É—Å—Ç–æ–µ")
        
        # –¶–µ–ª–µ–≤–æ–π –Ω–∞–≤—ã–∫
        if hasattr(recommendation, 'target_skill_info') and recommendation.target_skill_info:
            print(f"  üéØ –¶–µ–ª–µ–≤–æ–π –Ω–∞–≤—ã–∫: ‚úÖ –ï—Å—Ç—å ({len(recommendation.target_skill_info)} –∑–∞–ø–∏—Å–µ–π)")
            for skill in recommendation.target_skill_info[:2]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 2
                print(f"     ‚Ä¢ {skill.get('skill_name', 'N/A')} | –¢–µ–∫—É—â–∞—è P(–∑–Ω–∞–Ω–∏–µ) = {skill.get('current_mastery_probability', 0):.4f}")
                print(f"       –ü–æ–ø—ã—Ç–æ–∫: {skill.get('attempts_count', 0)} | –£—Å–ø–µ—Ö: {skill.get('success_rate', 0):.2%}")
        else:
            print(f"  üéØ –¶–µ–ª–µ–≤–æ–π –Ω–∞–≤—ã–∫: ‚ùå –ü—É—Å—Ç–æ–µ")
        
        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
        if hasattr(recommendation, 'alternative_tasks_considered') and recommendation.alternative_tasks_considered:
            print(f"  üîÄ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã: ‚úÖ –ï—Å—Ç—å ({len(recommendation.alternative_tasks_considered)} –∑–∞–¥–∞–Ω–∏–π)")
            for task in recommendation.alternative_tasks_considered[:2]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 2
                print(f"     ‚Ä¢ –ó–∞–¥–∞–Ω–∏–µ {task.get('task_id', 'N/A')}: {task.get('task_title', 'N/A')} | Q={task.get('q_value', 0):.4f}")
        else:
            print(f"  üîÄ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã: ‚ùå –ü—É—Å—Ç–æ–µ")
        
        # –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        if hasattr(recommendation, 'student_progress_context') and recommendation.student_progress_context:
            progress = recommendation.student_progress_context
            print(f"  üìà –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: ‚úÖ –ï—Å—Ç—å")
            print(f"     ‚Ä¢ –û–±—â–∏—Ö –ø–æ–ø—ã—Ç–æ–∫: {progress.get('total_attempts', 0)}")
            print(f"     ‚Ä¢ –û–±—â–∏–π —É—Å–ø–µ—Ö: {progress.get('total_success_rate', 0):.2%}")
            print(f"     ‚Ä¢ –ù–µ–¥–∞–≤–Ω–∏—Ö –ø–æ–ø—ã—Ç–æ–∫: {progress.get('recent_attempts_count', 0)}")
            print(f"     ‚Ä¢ –ù–µ–¥–∞–≤–Ω–∏–π —É—Å–ø–µ—Ö: {progress.get('recent_success_rate', 0):.2%}")
        else:
            print(f"  üìà –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: ‚ùå –ü—É—Å—Ç–æ–µ")
def test_student_analysis():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∞"""
    print("üß™ –¢–ï–°–¢ –î–ï–¢–ê–õ–¨–ù–û–ì–û –ê–ù–ê–õ–ò–ó–ê –°–û–°–¢–û–Ø–ù–ò–Ø –°–¢–£–î–ï–ù–¢–ê")
    print("=" * 80)
    
    # –ù–∞–π–¥–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏
    students_with_attempts = TaskAttempt.objects.values('student__user_id').annotate(
        attempt_count=Count('id')
    ).filter(attempt_count__gt=0).order_by('-attempt_count')[:5]
    
    if not students_with_attempts:
        print("‚ö†Ô∏è –°—Ç—É–¥–µ–Ω—Ç—ã —Å –ø–æ–ø—ã—Ç–∫–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞
        print("üîß –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞...")
        user, created = User.objects.get_or_create(
            username='test_student_analysis',
            defaults={'first_name': 'Test', 'last_name': 'Student'}
        )
        student_id = user.id
        print(f"üë§ –°–æ–∑–¥–∞–Ω —Å—Ç—É–¥–µ–Ω—Ç ID: {student_id}")
        
    else:
        # –ë–µ—Ä–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞ —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø–æ–ø—ã—Ç–æ–∫
        student_id = students_with_attempts[0]['student__user_id']
        attempt_count = students_with_attempts[0]['attempt_count']
        print(f"üë§ –í—ã–±—Ä–∞–Ω —Å—Ç—É–¥–µ–Ω—Ç ID: {student_id} ({attempt_count} –ø–æ–ø—ã—Ç–æ–∫)")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
    analyzer = StudentAnalyzer(student_id)
    analyzer.analyze_student_state()
    
    return True


if __name__ == "__main__":
    try:
        success = test_student_analysis()
        if success:
            print("\nüéâ –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω!")
        else:
            print("\n‚ùå –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–∞–º–∏")
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
