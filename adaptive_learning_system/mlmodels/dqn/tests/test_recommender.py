"""
–¢–µ—Å—Ç DQN —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã

–≠—Ç–æ—Ç —Ç–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã DQN:
1. –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –∞–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞
2. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –æ—Ç DQN –º–æ–¥–µ–ª–∏
3. –î–µ—Ç–∞–ª—å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Å–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
4. –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –ª–æ–≥–∏–∫–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
"""

import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ Django –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(str(Path(__file__).parent.parent.parent.parent))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'adaptive_learning.settings')

import django
django.setup()

import torch
import numpy as np
from datetime import datetime

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É
from mlmodels.dqn.recommender import DQNRecommender


class TestDQNRecommender:
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ DQN —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    
    def __init__(self, student_id: int = 7):
        self.student_id = student_id
        self.recommender = DQNRecommender()  # –ë–µ–∑ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ª—É—á–∞–π–Ω—É—é
        
    def test_full_recommendation_pipeline(self):
        """–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"""
        print("\nüéØ –ü–û–õ–ù–´–ô –¢–ï–°–¢ DQN –†–ï–ö–û–ú–ï–ù–î–ê–¢–ï–õ–¨–ù–û–ô –°–ò–°–¢–ï–ú–´")
        print("=" * 80)
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            print(f"üîç –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞ ID: {self.student_id}")
            result = self.recommender.get_recommendations(self.student_id, top_k=50)
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            self._display_student_state(result.student_state)
            self._display_model_info(result.model_info)
            self._display_recommendations(result.recommendations, result.student_state)
            self._display_detailed_analysis(result)
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã: {e}")
            import traceback
            traceback.print_exc()
            return False
    
    def _display_student_state(self, state):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞"""
        print(f"\nüë§ –°–û–°–¢–û–Ø–ù–ò–ï –°–¢–£–î–ï–ù–¢–ê {state.student_id}")
        print("-" * 50)
        
        print(f"üß† –ù–∞–≤—ã–∫–∏ ({state.total_skills}):")
        print(f"  - –í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å (>80%): {state.high_mastery_skills}")
        print(f"  - –°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å (50-80%): {state.medium_mastery_skills}")
        print(f"  - –ù–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å (<50%): {state.low_mastery_skills}")
        
        print(f"\nüìà –ò—Å—Ç–æ—Ä–∏—è –ø–æ–ø—ã—Ç–æ–∫:")
        print(f"  - –í—Å–µ–≥–æ –ø–æ–ø—ã—Ç–æ–∫: {state.total_attempts}")
        if state.total_attempts > 0:
            print(f"  - –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {state.success_rate:.1%}")
            print(f"  - –°—Ä–µ–¥–Ω—è—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: {state.avg_difficulty:.1f}")
        else:
            print("  - –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ø—ã—Ç–∫–∞—Ö")
        
        print(f"\nüéØ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è:")
        print(f"  - –í—Å–µ–≥–æ –∑–∞–¥–∞–Ω–∏–π –≤ —Å–∏—Å—Ç–µ–º–µ: {state.total_tasks}")
        print(f"  - –î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: {state.available_tasks}")
        print(f"  - –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ (prerequisite): {state.filtered_tasks} ({state.filtered_tasks/state.total_tasks*100:.1f}%)")
        
        print(f"\nüî¢ –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏ –≤–µ–∫—Ç–æ—Ä–æ–≤:")
        print(f"  - BKT –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {state.bkt_params.shape}")
        print(f"  - –ò—Å—Ç–æ—Ä–∏—è: {state.history.shape}")
        print(f"  - –ì—Ä–∞—Ñ –Ω–∞–≤—ã–∫–æ–≤: {state.skills_graph.shape}")
    
    def _display_model_info(self, model_info):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª–∏"""
        print(f"\nü§ñ –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û DQN –ú–û–î–ï–õ–ò")
        print("-" * 50)
        print(f"  - –¢–∏–ø –º–æ–¥–µ–ª–∏: {model_info['model_type']}")
        print(f"  - –ü—É—Ç—å –∫ –º–æ–¥–µ–ª–∏: {model_info['model_path'] or '–°–ª—É—á–∞–π–Ω–∞—è –º–æ–¥–µ–ª—å'}")
        print(f"  - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–≤—ã–∫–æ–≤: {model_info['num_skills']}")
        print(f"  - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞–Ω–∏–π: {model_info['num_tasks']}")
        print(f"  - –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏—è: BKT {model_info['state_dim']}, –∏—Å—Ç–æ—Ä–∏—è {model_info['history_dim']}")
        print(f"  - –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å –≥—Ä–∞—Ñ–∞: {model_info['graph_dim']}")
    
    def _display_recommendations(self, recommendations, student_state):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
        print(f"\nüéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò DQN ({len(recommendations)} –∑–∞–¥–∞–Ω–∏–π)")
        print("-" * 50)
        
        if not recommendations:
            print("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")
            return
        
        for i, rec in enumerate(recommendations, 1):
            print(f"\n{i}. –ó–ê–î–ê–ù–ò–ï {rec.task_id}")
            print(f"   üé≤ Q-value: {rec.q_value:.4f}")
            print(f"   üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {rec.confidence:.1%}")
            print(f"   üìä –°–ª–æ–∂–Ω–æ—Å—Ç—å: {rec.difficulty}")
            print(f"   üìù –¢–∏–ø: {rec.task_type}")
            print(f"   ‚è±Ô∏è –í—Ä–µ–º—è: ~{rec.estimated_time // 60} –º–∏–Ω")
            print(f"   üîó –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–∞–≤—ã–∫–∞–º: {rec.skill_match_score:.1%}")
            print(f"   üí° –ü—Ä–∏—á–∏–Ω–∞: {rec.reason}")
            
            if rec.skills:
                print(f"   üß† –†–∞–∑–≤–∏–≤–∞–µ–º—ã–µ –Ω–∞–≤—ã–∫–∏: {rec.skills}")
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –æ—Å–≤–æ–µ–Ω–∏—è –∫–∞–∂–¥–æ–≥–æ –Ω–∞–≤—ã–∫–∞
                for skill_id in rec.skills:
                    skill_idx = self.recommender.data_processor.skill_to_id.get(skill_id)
                    if skill_idx is not None and skill_idx < len(student_state.bkt_params):
                        mastery = student_state.bkt_params[skill_idx, 0].item()
                        status = "üü¢" if mastery > 0.8 else "üü°" if mastery > 0.5 else "üî¥"
                        print(f"      {status} –ù–∞–≤—ã–∫ {skill_id}: {mastery:.1%}")
    
    def _display_detailed_analysis(self, result):
        """–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
        print(f"\nüî¨ –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó")
        print("-" * 50)
        
        if not result.recommendations:
            return
        
        # –ê–Ω–∞–ª–∏–∑ Q-values
        q_values = [rec.q_value for rec in result.recommendations]
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Q-values:")
        print(f"  - –î–∏–∞–ø–∞–∑–æ–Ω: [{min(q_values):.4f}, {max(q_values):.4f}]")
        print(f"  - –°—Ä–µ–¥–Ω–µ–µ: {np.mean(q_values):.4f}")
        print(f"  - –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {np.std(q_values):.4f}")
        
        # –ê–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        difficulties = [rec.difficulty for rec in result.recommendations]
        difficulty_count = {d: difficulties.count(d) for d in set(difficulties)}
        print(f"\nüìà –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:")
        for diff, count in difficulty_count.items():
            print(f"  - {diff}: {count} –∑–∞–¥–∞–Ω–∏–π")
        
        # –ê–Ω–∞–ª–∏–∑ –Ω–∞–≤—ã–∫–æ–≤
        all_skills = []
        for rec in result.recommendations:
            all_skills.extend(rec.skills)
        
        if all_skills:
            unique_skills = list(set(all_skills))
            print(f"\nüß† –ù–∞–≤—ã–∫–∏ –≤ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è—Ö:")
            print(f"  - –í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –Ω–∞–≤—ã–∫–æ–≤: {len(unique_skills)}")
            print(f"  - –ù–∞–≤—ã–∫–∏: {sorted(unique_skills)}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –æ—Å–≤–æ–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö –Ω–∞–≤—ã–∫–æ–≤
            print(f"\nüìä –£—Ä–æ–≤–µ–Ω—å –æ—Å–≤–æ–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö –Ω–∞–≤—ã–∫–æ–≤:")
            for skill_id in sorted(unique_skills)[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                skill_idx = self.recommender.data_processor.skill_to_id.get(skill_id)
                if skill_idx is not None and skill_idx < len(result.student_state.bkt_params):
                    mastery = result.student_state.bkt_params[skill_idx, 0].item()
                    bar_length = int(mastery * 20)
                    bar = "‚ñà" * bar_length + "‚ñë" * (20 - bar_length)
                    print(f"  –ù–∞–≤—ã–∫ {skill_id:2d}: {bar} {mastery:.1%}")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é
        print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –°–ò–°–¢–ï–ú–ï:")
        print(f"  - –î–æ—Å—Ç—É–ø–Ω–æ {result.student_state.available_tasks} –∏–∑ {result.student_state.total_tasks} –∑–∞–¥–∞–Ω–∏–π")
        if result.student_state.available_tasks < 10:
            print(f"  ‚ö†Ô∏è  –ú–∞–ª–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π - –≤–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ–∏—Ç –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é")
        
        if result.student_state.total_attempts == 0:
            print(f"  üí° –°—Ç—É–¥–µ–Ω—Ç –Ω–æ–≤—ã–π - —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Å–Ω–æ–≤–∞–Ω—ã —Ç–æ–ª—å–∫–æ –Ω–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö BKT –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö")
        elif result.student_state.success_rate < 0.5:
            print(f"  üìâ –ù–∏–∑–∫–∞—è —É—Å–ø–µ—à–Ω–æ—Å—Ç—å - –º–æ–¥–µ–ª—å –¥–æ–ª–∂–Ω–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç—ã–µ –∑–∞–¥–∞–Ω–∏—è")
        elif result.student_state.success_rate > 0.8:
            print(f"  üìà –í—ã—Å–æ–∫–∞—è —É—Å–ø–µ—à–Ω–æ—Å—Ç—å - –º–æ–¥–µ–ª—å –º–æ–∂–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–µ –≤—ã–∑–æ–≤—ã")
    
    def test_individual_explanations(self):
        """–¢–µ—Å—Ç –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –æ–±—ä—è—Å–Ω–µ–Ω–∏–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
        print(f"\nüìù –ò–ù–î–ò–í–ò–î–£–ê–õ–¨–ù–´–ï –û–ë–™–Ø–°–ù–ï–ù–ò–Ø –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ô")
        print("-" * 50)
        
        try:
            result = self.recommender.get_recommendations(self.student_id, top_k=3)
            
            for i, rec in enumerate(result.recommendations, 1):
                print(f"\n{i}. –û–ë–™–Ø–°–ù–ï–ù–ò–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
                explanation = self.recommender.explain_recommendation(rec, result.student_state)
                print(explanation)
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è—Ö: {e}")
            return False
    
    def test_edge_cases(self):
        """–¢–µ—Å—Ç –∫—Ä–∞–π–Ω–∏—Ö —Å–ª—É—á–∞–µ–≤"""
        print(f"\nüß™ –¢–ï–°–¢ –ö–†–ê–ô–ù–ò–• –°–õ–£–ß–ê–ï–í")
        print("-" * 50)
        
        tests_passed = 0
        total_tests = 3
        
        # –¢–µ—Å—Ç 1: –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å—Ç—É–¥–µ–Ω—Ç
        print(f"\n1. –¢–µ—Å—Ç –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞:")
        try:
            result = self.recommender.get_recommendations(99999, top_k=3)
            print(f"‚ùå –î–æ–ª–∂–Ω–∞ –±—ã–ª–∞ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç—å –æ—à–∏–±–∫–∞ –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞")
        except Exception as e:
            print(f"‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –æ—à–∏–±–∫–∞: {type(e).__name__}")
            tests_passed += 1
        
        # –¢–µ—Å—Ç 2: –ó–∞–ø—Ä–æ—Å 0 —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        print(f"\n2. –¢–µ—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ 0 —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:")
        try:
            result = self.recommender.get_recommendations(self.student_id, top_k=0)
            if len(result.recommendations) == 0:
                print(f"‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫")
                tests_passed += 1
            else:
                print(f"‚ùå –î–æ–ª–∂–µ–Ω –±—ã–ª –≤–µ—Ä–Ω—É—Ç—å—Å—è –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫")
        except Exception as e:
            print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        
        # –¢–µ—Å—Ç 3: –ó–∞–ø—Ä–æ—Å –±–æ–ª—å—à–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        print(f"\n3. –¢–µ—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ –±–æ–ª—å—à–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:")
        try:
            result = self.recommender.get_recommendations(self.student_id, top_k=1000)
            max_possible = result.student_state.available_tasks
            actual = len(result.recommendations)
            if actual <= max_possible:
                print(f"‚úÖ –í–µ—Ä–Ω—É–ª–æ—Å—å {actual} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π (–º–∞–∫—Å–∏–º—É–º –¥–æ—Å—Ç—É–ø–Ω—ã—Ö: {max_possible})")
                tests_passed += 1
            else:
                print(f"‚ùå –í–µ—Ä–Ω—É–ª–æ—Å—å –±–æ–ª—å—à–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π ({actual}) —á–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ ({max_possible})")
        except Exception as e:
            print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∫—Ä–∞–π–Ω–∏—Ö —Å–ª—É—á–∞–µ–≤: {tests_passed}/{total_tests}")
        return tests_passed == total_tests


def run_recommender_tests():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    print("üöÄ –¢–ï–°–¢–´ DQN –†–ï–ö–û–ú–ï–ù–î–ê–¢–ï–õ–¨–ù–û–ô –°–ò–°–¢–ï–ú–´")
    print("=" * 80)
    print(f"üïê –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    tester = TestDQNRecommender(student_id=7)
    
    tests = [
        ("–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã", tester.test_full_recommendation_pipeline),
        ("–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è", tester.test_individual_explanations),
        ("–ö—Ä–∞–π–Ω–∏–µ —Å–ª—É—á–∞–∏", tester.test_edge_cases),
    ]
    
    passed = 0
    total = len(tests)
    
    for name, test_func in tests:
        print(f"\n{'='*60}")
        print(f"üß™ –¢–µ—Å—Ç: {name}")
        print('='*60)
        
        try:
            if test_func():
                print(f"‚úÖ {name}: –ü–†–û–ô–î–ï–ù")
                passed += 1
            else:
                print(f"‚ùå {name}: –ù–ï –ü–†–û–ô–î–ï–ù")
        except Exception as e:
            print(f"üí• {name}: –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê - {e}")
    
    print(f"\n{'='*80}")
    print(f"üìä –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –†–ï–ö–û–ú–ï–ù–î–ê–¢–ï–õ–¨–ù–û–ô –°–ò–°–¢–ï–ú–´")
    print('='*80)
    print(f"–ü—Ä–æ–π–¥–µ–Ω–æ: {passed}/{total}")
    print(f"–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏: {passed/total*100:.1f}%")
    
    if passed == total:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –†–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
    else:
        print("‚ö†Ô∏è –ù–ê–ô–î–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´ –≤ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ")
    
    return passed == total


if __name__ == "__main__":
    success = run_recommender_tests()
    exit(0 if success else 1)
