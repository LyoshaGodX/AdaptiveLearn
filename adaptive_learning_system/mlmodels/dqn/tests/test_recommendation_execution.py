#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏

–≠—Ç–æ—Ç —Ç–µ—Å—Ç –ø—Ä–æ—Å—Ç–æ:
1. –ë–µ—Ä–µ—Ç —Ç–µ–∫—É—â—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é —Å—Ç—É–¥–µ–Ω—Ç–∞
2. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
3. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞–Ω–∏–∏
4. –°–∏–º—É–ª–∏—Ä—É–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–ø—ã—Ç–∫–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–º
5. –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –ø–æ–ø—ã—Ç–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
6. –ù–ï –≤–º–µ—à–∏–≤–∞–µ—Ç—Å—è –≤ —Ä–∞–±–æ—Ç—É DQN —Å–∏—Å—Ç–µ–º—ã

–¶–µ–ª—å: –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
"""

import os
import sys
from pathlib import Path
import random
from datetime import datetime, timedelta

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ Django –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(str(Path(__file__).parent.parent.parent.parent))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'adaptive_learning.settings')

import django
django.setup()

from django.contrib.auth.models import User
from django.utils import timezone
from django.db.models import Count

from skills.models import Skill
from methodist.models import Task
from mlmodels.models import TaskAttempt, DQNRecommendation, StudentCurrentRecommendation
from student.models import StudentProfile


def get_current_recommendation(student_id):
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é —Å—Ç—É–¥–µ–Ω—Ç–∞"""
    try:
        current = StudentCurrentRecommendation.objects.select_related(
            'recommendation__task'
        ).get(student__user_id=student_id)
        
        recommendation = current.recommendation
        
        return {
            'recommendation_id': recommendation.id,
            'task_id': recommendation.task.id,
            'task': recommendation.task,
            'q_value': recommendation.q_value,
            'confidence': recommendation.confidence,
            'reason': recommendation.reason,
            'llm_explanation': recommendation.llm_explanation,
            'created_at': recommendation.created_at,
            'set_as_current_at': current.set_at,
            'current_llm_explanation': current.llm_explanation
        }
    except StudentCurrentRecommendation.DoesNotExist:
        return None


def analyze_recommendation(rec_data):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
    print("\nü§ñ –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –¢–ï–ö–£–©–ï–ô –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò")
    print("-" * 50)
    
    print(f"üÜî ID —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: {rec_data['recommendation_id']}")
    print(f"üìÖ –°–æ–∑–¥–∞–Ω–∞: {rec_data['created_at'].strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"üéØ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∫–∞–∫ —Ç–µ–∫—É—â–∞—è: {rec_data['set_as_current_at'].strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"üìä Q-value: {rec_data['q_value']:.6f}")
    print(f"üìà –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {rec_data['confidence']:.6f}")
    print(f"üí° –ü—Ä–∏—á–∏–Ω–∞: {rec_data['reason']}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º LLM –æ–±—ä—è—Å–Ω–µ–Ω–∏—è
    print(f"\nü§ñ LLM –û–ë–™–Ø–°–ù–ï–ù–ò–Ø:")
    print(f"  üìù –í —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: {'‚úÖ –ï—Å—Ç—å' if rec_data['llm_explanation'] else '‚ùå –ü—É—Å—Ç–æ–µ'}")
    if rec_data['llm_explanation']:
        explanation_preview = rec_data['llm_explanation'][:200] + "..." if len(rec_data['llm_explanation']) > 200 else rec_data['llm_explanation']
        print(f"     {explanation_preview}")
    
    print(f"  üìÑ –í —Ç–µ–∫—É—â–µ–π –∑–∞–ø–∏—Å–∏: {'‚úÖ –ï—Å—Ç—å' if rec_data['current_llm_explanation'] else '‚ùå –ü—É—Å—Ç–æ–µ'}")
    if rec_data['current_llm_explanation']:
        current_preview = rec_data['current_llm_explanation'][:200] + "..." if len(rec_data['current_llm_explanation']) > 200 else rec_data['current_llm_explanation']
        print(f"     {current_preview}")


def analyze_task(task):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞–Ω–∏–∏"""
    print("\nüìã –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –†–ï–ö–û–ú–ï–ù–î–û–í–ê–ù–ù–û–ú –ó–ê–î–ê–ù–ò–ò")
    print("-" * 50)
    
    print(f"üÜî ID –∑–∞–¥–∞–Ω–∏—è: {task.id}")
    print(f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {task.title}")
    print(f"üî§ –¢–∏–ø: {task.task_type}")
    print(f"‚ö° –°–ª–æ–∂–Ω–æ—Å—Ç—å: {task.difficulty}")
    print(f"‚úÖ –ê–∫—Ç–∏–≤–Ω–æ–µ: {'–î–∞' if task.is_active else '–ù–µ—Ç'}")
    print(f"üìÖ –°–æ–∑–¥–∞–Ω–æ: {task.created_at.strftime('%Y-%m-%d %H:%M:%S')}")
    
    # –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
    print(f"\nüìñ –°–û–î–ï–†–ñ–ê–ù–ò–ï –ó–ê–î–ê–ù–ò–Ø:")
    content = task.question_text or "–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ"
    print(f"  {content[:300]}{'...' if len(content) > 300 else ''}")
    
    # –ù–∞–≤—ã–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ä–∞–∑–≤–∏–≤–∞–µ—Ç –∑–∞–¥–∞–Ω–∏–µ
    skills = task.skills.all()
    print(f"\nüéØ –†–ê–ó–í–ò–í–ê–ï–ú–´–ï –ù–ê–í–´–ö–ò ({skills.count()}):")
    for skill in skills:
        print(f"  ‚Ä¢ {skill.name}")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–¥–∞–Ω–∏—è
    attempts_count = TaskAttempt.objects.filter(task=task).count()
    if attempts_count > 0:
        success_count = TaskAttempt.objects.filter(task=task, is_correct=True).count()
        success_rate = (success_count / attempts_count * 100)
        print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ó–ê–î–ê–ù–ò–Ø:")
        print(f"  üìà –í—Å–µ–≥–æ –ø–æ–ø—ã—Ç–æ–∫: {attempts_count}")
        print(f"  ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {success_count}")
        print(f"  üìä –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%")
    else:
        print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê: –ó–∞–¥–∞–Ω–∏–µ –µ—â—ë –Ω–∏–∫—Ç–æ –Ω–µ —Ä–µ—à–∞–ª")


def simulate_attempt(student_profile, task):
    """–°–∏–º—É–ª–∏—Ä—É–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–ø—ã—Ç–∫–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–º"""
    print("\nüéÆ –°–ò–ú–£–õ–Ø–¶–ò–Ø –í–´–ü–û–õ–ù–ï–ù–ò–Ø –ü–û–ü–´–¢–ö–ò")
    print("-" * 50)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    is_correct = random.choice([True, False, True])  # –Ω–µ–±–æ–ª—å—à–æ–π —É–∫–ª–æ–Ω –≤ —Å—Ç–æ—Ä–æ–Ω—É —É—Å–ø–µ—Ö–∞
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –æ—Ç–≤–µ—Ç
    answer_options = [
        f"–û—Ç–≤–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞ –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ {task.id}",
        f"–†–µ—à–µ–Ω–∏–µ: –≤–∞—Ä–∏–∞–Ω—Ç {random.randint(1, 4)}",
        "42",
        f"–ü–æ–ø—ã—Ç–∫–∞ —Ä–µ—à–µ–Ω–∏—è #{random.randint(1000, 9999)}",
        "–ú–æ–π –æ—Ç–≤–µ—Ç"
    ]
    given_answer = random.choice(answer_options)
    
    print(f"üéØ –ó–∞–¥–∞–Ω–∏–µ: {task.title}")
    print(f"üí≠ –û—Ç–≤–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞: {given_answer}")
    print(f"üé≤ –†–µ–∑—É–ª—å—Ç–∞—Ç: {'‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ' if is_correct else '‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ'}")
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ–ø—ã—Ç–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    try:
        attempt = TaskAttempt.objects.create(
            student=student_profile,
            task=task,
            is_correct=is_correct,
            given_answer=given_answer,
            started_at=timezone.now() - timedelta(minutes=random.randint(1, 5)),
            time_spent=random.randint(30, 180)  # –æ—Ç 30 —Å–µ–∫—É–Ω–¥ –¥–æ 3 –º–∏–Ω—É—Ç
        )
        
        print(f"üíæ –ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –ë–î —Å ID: {attempt.id}")
        print(f"üìÖ –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {attempt.completed_at.strftime('%Y-%m-%d %H:%M:%S')}")
        
        return attempt
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–ø—ã—Ç–∫–∏: {e}")
        return None


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∞"""
    print("üß™ –ü–†–û–°–¢–û–ô –¢–ï–°–¢ –í–´–ü–û–õ–ù–ï–ù–ò–Ø –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò")
    print("=" * 80)
    
    # –ù–∞–π–¥–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞ —Å —Ç–µ–∫—É—â–µ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–µ–π
    students_with_current_rec = StudentCurrentRecommendation.objects.values('student__user_id').distinct()
    
    if not students_with_current_rec:
        print("‚ö†Ô∏è –°—Ç—É–¥–µ–Ω—Ç—ã —Å —Ç–µ–∫—É—â–∏–º–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return False
    
    # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞ —Å —Ç–µ–∫—É—â–µ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–µ–π
    student_id = students_with_current_rec[0]['student__user_id']
    user = User.objects.get(id=student_id)
    profile, _ = StudentProfile.objects.get_or_create(user=user)
    
    print(f"üë§ –í—ã–±—Ä–∞–Ω —Å—Ç—É–¥–µ–Ω—Ç: {user.username} (ID: {student_id})")
    
    # 1. –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é
    print("\nüîç –ü–û–õ–£–ß–ï–ù–ò–ï –¢–ï–ö–£–©–ï–ô –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò...")
    current_rec = get_current_recommendation(student_id)
    
    if not current_rec:
        print("‚ùå –£ —Å—Ç—É–¥–µ–Ω—Ç–∞ –Ω–µ—Ç —Ç–µ–∫—É—â–µ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
        return False
    
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Ç–µ–∫—É—â–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è #{current_rec['recommendation_id']}")
    
    # 2. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é
    analyze_recommendation(current_rec)
    
    # 3. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–¥–∞–Ω–∏–µ
    analyze_task(current_rec['task'])
    
    # 4. –°–∏–º—É–ª–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–ø—ã—Ç–∫–∏
    attempt = simulate_attempt(profile, current_rec['task'])
    
    if attempt:
        print(f"\n‚úÖ –ü–æ–ø—ã—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–∞!")
        print(f"üîÑ –¢–µ–ø–µ—Ä—å —Å–∏—Å—Ç–µ–º–∞ –¥–æ–ª–∂–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:")
        print(f"   ‚Ä¢ –°–≤—è–∑–∞—Ç—å –ø–æ–ø—ã—Ç–∫—É —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–µ–π")
        print(f"   ‚Ä¢ –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é")
        print(f"   ‚Ä¢ –û–±–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é —Å—Ç—É–¥–µ–Ω—Ç–∞")
        
        print(f"\nüí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ test_student_analysis.py –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞ {student_id},")
        print(f"   —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!")
        
        return True
    else:
        print(f"\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –ø–æ–ø—ã—Ç–∫—É")
        return False


if __name__ == "__main__":
    try:
        success = main()
        if success:
            print("\nüéâ –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω!")
        else:
            print("\n‚ùå –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–∞–º–∏")
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
