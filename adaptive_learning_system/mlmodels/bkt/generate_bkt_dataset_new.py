"""
–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ BKT –º–æ–¥–µ–ª–∏
–°–æ–∑–¥–∞–µ—Ç –≤—ã–±–æ—Ä–∫—É –∏–∑ 200 —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏ –æ–±—É—á–µ–Ω–∏—è
"""

import os
import sys
import django
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
sys.path.append(os.path.dirname(os.path.abspath(__file__)))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'adaptive_learning.settings')
django.setup()

import random
import numpy as np
import pandas as pd
from typing import Dict, List, Tuple, Optional
from dataclasses import dataclass
import json
from datetime import datetime, timedelta

from strategies import (
    StudentStrategy, BeginnerStrategy, IntermediateStrategy, 
    AdvancedStrategy, GiftedStrategy, StruggleStrategy,
    StudentStrategyFactory
)
from generator import SyntheticDataGenerator

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Django –º–æ–¥–µ–ª–∏ –Ω–∞–ø—Ä—è–º—É—é
from skills.models import Course, Skill, Task
from student.models import Student

@dataclass
class DatasetConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞—Ç–∞—Å–µ—Ç–∞"""
    num_students: int = 200
    courses_per_student: Tuple[int, int] = (1, 3)  # –ú–∏–Ω–∏–º—É–º –∏ –º–∞–∫—Å–∏–º—É–º –∫—É—Ä—Å–æ–≤ –Ω–∞ —Å—Ç—É–¥–µ–Ω—Ç–∞
    noise_level: float = 0.15  # –£—Ä–æ–≤–µ–Ω—å —à—É–º–∞ –≤ –¥–∞–Ω–Ω—ã—Ö (0-1)
    time_span_days: int = 365  # –ü–µ—Ä–∏–æ–¥ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö (–¥–Ω–∏)
    min_attempts_per_task: int = 1  # –ú–∏–Ω–∏–º—É–º –ø–æ–ø—ã—Ç–æ–∫ –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ
    max_attempts_per_task: int = 3  # –ú–∞–∫—Å–∏–º—É–º –ø–æ–ø—ã—Ç–æ–∫ –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ
    
    # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
    strategy_distribution: Optional[Dict[str, float]] = None
    
    def __post_init__(self):
        if self.strategy_distribution is None:
            self.strategy_distribution = {
                'beginner': 0.25,      # 25% –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö
                'intermediate': 0.35,   # 35% —Å—Ä–µ–¥–Ω–∏—Ö  
                'advanced': 0.25,      # 25% –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö
                'gifted': 0.10,        # 10% –æ–¥–∞—Ä–µ–Ω–Ω—ã—Ö
                'struggle': 0.05       # 5% –∏—Å–ø—ã—Ç—ã–≤–∞—é—â–∏—Ö —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏
            }

class BKTDatasetGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è BKT –º–æ–¥–µ–ª–∏"""
    
    def __init__(self, config: Optional[DatasetConfig] = None):
        self.config = config or DatasetConfig()
        self.synthetic_generator = SyntheticDataGenerator()
        
        # –î–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        random.seed(42)
        np.random.seed(42)
        
        print(f"üéØ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ BKT –¥–∞—Ç–∞—Å–µ—Ç–∞")
        print(f"   üìä –°—Ç—É–¥–µ–Ω—Ç–æ–≤: {self.config.num_students}")
        print(f"   üìö –ö—É—Ä—Å–æ–≤ –Ω–∞ —Å—Ç—É–¥–µ–Ω—Ç–∞: {self.config.courses_per_student[0]}-{self.config.courses_per_student[1]}")
        print(f"   üîä –£—Ä–æ–≤–µ–Ω—å —à—É–º–∞: {self.config.noise_level}")
        print(f"   üìÖ –ü–µ—Ä–∏–æ–¥: {self.config.time_span_days} –¥–Ω–µ–π")
    
    def _load_course_data(self) -> Dict:
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∫—É—Ä—Å–∞—Ö, –Ω–∞–≤—ã–∫–∞—Ö –∏ –∑–∞–¥–∞–Ω–∏—è—Ö –∏–∑ Django –º–æ–¥–µ–ª–µ–π"""
        print("üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –∫—É—Ä—Å–∞—Ö...")
        
        courses = Course.objects.all()
        course_data = {}
        total_tasks = 0
        
        for course in courses:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–≤—ã–∫–∏ –∫—É—Ä—Å–∞
            course_skills = course.skills.all()
            course_tasks = []
            
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–∞–≤—ã–∫–∞
            for skill in course_skills:
                skill_tasks = Task.objects.filter(skill=skill)
                for task in skill_tasks:
                    course_tasks.append({
                        'id': task.id,
                        'skill_id': skill.id,
                        'task_type': task.task_type,
                        'difficulty': task.difficulty,
                        'title': task.title,
                        'content': task.content
                    })
            
            course_data[course.id] = {
                'course_info': {
                    'id': course.id,
                    'name': course.name,
                    'description': course.description
                },
                'skills': [{'id': skill.id, 'name': skill.name, 'description': skill.description} 
                          for skill in course_skills],
                'tasks': course_tasks
            }
            total_tasks += len(course_tasks)
            
            print(f"   ‚úÖ {course.name}: {len(course_skills)} –Ω–∞–≤—ã–∫–æ–≤, {len(course_tasks)} –∑–∞–¥–∞–Ω–∏–π")
        
        print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {len(courses)} –∫—É—Ä—Å–æ–≤, –≤—Å–µ–≥–æ {total_tasks} –∑–∞–¥–∞–Ω–∏–π")
        return course_data
    
    def _create_student_population(self) -> List[Tuple[int, StudentStrategy, List[str]]]:
        """–°–æ–∑–¥–∞—Ç—å –ø–æ–ø—É–ª—è—Ü–∏—é —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏ –∏ –∫—É—Ä—Å–∞–º–∏"""
        print(f"üë• –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ø—É–ª—è—Ü–∏–∏ –∏–∑ {self.config.num_students} —Å—Ç—É–¥–µ–Ω—Ç–æ–≤...")
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
        strategies = StudentStrategyFactory.create_mixed_population(
            self.config.num_students, 
            self.config.strategy_distribution
        )
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—É—Ä—Å–æ–≤
        courses = Course.objects.all()
        course_ids = [course.id for course in courses]
        
        students = []
        strategy_stats = {}
        
        for student_id in range(1, self.config.num_students + 1):
            strategy = strategies[student_id - 1]
            strategy_name = strategy.__class__.__name__.replace('Strategy', '').lower()
            
            # –°–ª—É—á–∞–π–Ω–æ –≤—ã–±–∏—Ä–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É—Ä—Å–æ–≤ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞
            num_courses = random.randint(*self.config.courses_per_student)
            
            # –°–ª—É—á–∞–π–Ω–æ –≤—ã–±–∏—Ä–∞–µ–º –∫—É—Ä—Å—ã –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞
            student_courses = random.sample(course_ids, min(num_courses, len(course_ids)))
            
            students.append((student_id, strategy, student_courses))
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º
            if strategy_name not in strategy_stats:
                strategy_stats[strategy_name] = 0
            strategy_stats[strategy_name] += 1
        
        print("üìà –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π —Å—Ç—É–¥–µ–Ω—Ç–æ–≤:")
        for strategy, count in strategy_stats.items():
            percentage = (count / self.config.num_students) * 100
            print(f"   {strategy}: {count} —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ ({percentage:.1f}%)")
        
        return students
    
    def _add_noise_to_performance(self, base_success_prob: float) -> float:
        """–î–æ–±–∞–≤–∏—Ç—å —à—É–º –∫ –±–∞–∑–æ–≤–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ —É—Å–ø–µ—Ö–∞"""
        noise = np.random.normal(0, self.config.noise_level)
        noisy_prob = base_success_prob + noise
        return max(0.0, min(1.0, noisy_prob))  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º [0, 1]
    
    def _simulate_learning_progression(self, student_strategy: StudentStrategy, 
                                     tasks: List[Dict], skills: List[Dict]) -> List[Dict]:
        """–°–∏–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å–∏—é –æ–±—É—á–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞"""
        attempts = []
        skill_mastery = {skill['id']: 0.1 for skill in skills}  # –ù–∞—á–∞–ª—å–Ω–æ–µ –æ—Å–≤–æ–µ–Ω–∏–µ
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–¥–∞–Ω–∏—è –ø–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∏ –Ω–∞–≤—ã–∫–∞–º
        sorted_tasks = sorted(tasks, key=lambda t: (t.get('difficulty', 'intermediate'), t['skill_id']))
        
        start_date = datetime.now() - timedelta(days=self.config.time_span_days)
        current_date = start_date
        
        for task in sorted_tasks:
            skill_id = task['skill_id']
            current_mastery = skill_mastery[skill_id]
            
            # –°—Ç—É–¥–µ–Ω—Ç —Ä–µ—à–∞–µ—Ç, —Å—Ç–æ–∏—Ç –ª–∏ –ø—ã—Ç–∞—Ç—å—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ
            should_attempt = student_strategy.should_attempt_task(
                task_difficulty=task.get('difficulty', 'intermediate'),
                current_mastery=current_mastery
            )
            
            if should_attempt:
                # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
                num_attempts = random.randint(
                    self.config.min_attempts_per_task, 
                    self.config.max_attempts_per_task
                )
                
                for attempt_num in range(num_attempts):
                    # –ë–∞–∑–æ–≤–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É—Å–ø–µ—Ö–∞
                    base_success_prob = student_strategy.get_success_probability(
                        task_difficulty=task.get('difficulty', 'intermediate'),
                        current_mastery=current_mastery
                    )
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º —à—É–º
                    noisy_success_prob = self._add_noise_to_performance(base_success_prob)
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ø—ã—Ç–∫–∏
                    if task.get('task_type') == 'multiple':
                        # –î–ª—è multiple choice - –Ω–µ–±–∏–Ω–∞—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
                        if random.random() < noisy_success_prob:
                            answer_score = random.uniform(0.6, 1.0)  # –ß–∞—Å—Ç–∏—á–Ω–æ –∏–ª–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
                        else:
                            answer_score = random.uniform(0.0, 0.4)  # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏–ª–∏ —á–∞—Å—Ç–∏—á–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
                    else:
                        # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ - –±–∏–Ω–∞—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
                        answer_score = 1.0 if random.random() < noisy_success_prob else 0.0
                    
                    # –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (—Å —É—á–µ—Ç–æ–º —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∏ –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–∞)
                    base_time = {
                        'beginner': 5,
                        'intermediate': 8, 
                        'advanced': 12
                    }.get(task.get('difficulty', 'intermediate'), 8)
                    
                    time_multiplier = 2.0 - current_mastery  # –ß–µ–º –≤—ã—à–µ –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–æ, —Ç–µ–º –±—ã—Å—Ç—Ä–µ–µ
                    solve_time = max(1, int(base_time * time_multiplier * random.uniform(0.5, 1.5)))
                    
                    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–ø—ã—Ç–∫—É
                    attempt = {
                        'student_id': task.get('student_id', 1),
                        'task_id': task['id'],
                        'skill_id': skill_id,
                        'course_id': task.get('course_id'),
                        'attempt_number': attempt_num + 1,
                        'answer_score': answer_score,
                        'is_correct': answer_score > 0.5,
                        'task_type': task.get('task_type', 'single'),
                        'difficulty': task.get('difficulty', 'intermediate'),
                        'solve_time_minutes': solve_time,
                        'timestamp': current_date,
                        'strategy': student_strategy.__class__.__name__.replace('Strategy', '').lower()
                    }
                    attempts.append(attempt)
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–≤–æ–µ–Ω–∏–µ –Ω–∞–≤—ã–∫–∞ (–ø—Ä–æ—Å—Ç–∞—è —Å–∏–º—É–ª—è—Ü–∏—è –æ–±—É—á–µ–Ω–∏—è)
                    if answer_score > 0.5:
                        learning_rate = student_strategy.characteristics.learning_speed.value
                        skill_mastery[skill_id] = min(1.0, 
                            skill_mastery[skill_id] + learning_rate * answer_score * 0.1
                        )
                    
                    # –°–¥–≤–∏–≥–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ —Å–ª—É—á–∞–π–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
                    current_date += timedelta(
                        minutes=random.randint(30, 180),  # 30 –º–∏–Ω—É—Ç - 3 —á–∞—Å–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
                        hours=random.randint(0, 48)       # –î–æ 2 –¥–Ω–µ–π –º–µ–∂–¥—É –∑–∞–¥–∞–Ω–∏—è–º–∏
                    )
                    
                    # –ï—Å–ª–∏ —Å—Ç—É–¥–µ–Ω—Ç —Å–ø—Ä–∞–≤–∏–ª—Å—è, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∑–∞–¥–∞–Ω–∏—é
                    if answer_score > 0.7 and attempt_num > 0:
                        break
        
        return attempts
    
    def generate_dataset(self, output_dir: str = "bkt_training_data") -> Dict[str, str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç –¥–ª—è –æ–±—É—á–µ–Ω–∏—è BKT"""
        print("üöÄ –ì–ï–ù–ï–†–ê–¶–ò–Ø –°–ò–ù–¢–ï–¢–ò–ß–ï–°–ö–û–ì–û –î–ê–¢–ê–°–ï–¢–ê –î–õ–Ø BKT")
        print("=" * 60)
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –≤—ã–≤–æ–¥–∞
        output_path = Path(output_dir)
        output_path.mkdir(exist_ok=True)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫—É—Ä—Å–∞—Ö
        course_data = self._load_course_data()
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ø—É–ª—è—Ü–∏—é —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
        students = self._create_student_population()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞
        print(f"\nüìö –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {len(students)} —Å—Ç—É–¥–µ–Ω—Ç–æ–≤...")
        all_attempts = []
        
        for i, (student_id, strategy, student_courses) in enumerate(students, 1):
            if i % 20 == 0:
                print(f"   –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—É–¥–µ–Ω—Ç–∞ {i}/{len(students)}")
            
            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞ –∏–∑ –µ–≥–æ –∫—É—Ä—Å–æ–≤
            student_tasks = []
            student_skills = []
            
            for course_id in student_courses:
                if course_id in course_data:
                    course_tasks = course_data[course_id]['tasks'].copy()
                    course_skills = course_data[course_id]['skills']
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—É–¥–µ–Ω—Ç–µ –∏ –∫—É—Ä—Å–µ –∫ –∑–∞–¥–∞–Ω–∏—è–º
                    for task in course_tasks:
                        task['student_id'] = student_id
                        task['course_id'] = course_id
                    
                    student_tasks.extend(course_tasks)
                    student_skills.extend(course_skills)
            
            # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ –Ω–∞–≤—ã–∫–∏
            unique_skills = []
            seen_skill_ids = set()
            for skill in student_skills:
                if skill['id'] not in seen_skill_ids:
                    unique_skills.append(skill)
                    seen_skill_ids.add(skill['id'])
            
            # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –∑–∞–¥–∞–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            random.shuffle(student_tasks)
            
            # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ–±—É—á–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞
            student_attempts = self._simulate_learning_progression(
                strategy, student_tasks, unique_skills
            )
            
            all_attempts.extend(student_attempts)
        
        print(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(all_attempts)} –ø–æ–ø—ã—Ç–æ–∫ —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π")
        
        # –°–æ–∑–¥–∞–µ–º DataFrame
        df = pd.DataFrame(all_attempts)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–∞—Ç–∞—Å–µ—Ç—É
        print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –î–ê–¢–ê–°–ï–¢–ê:")
        print(f"   üìù –í—Å–µ–≥–æ –ø–æ–ø—ã—Ç–æ–∫: {len(df)}")
        print(f"   üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤: {df['student_id'].nunique()}")
        print(f"   üìã –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π: {df['task_id'].nunique()}")
        print(f"   üéØ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –Ω–∞–≤—ã–∫–æ–≤: {df['skill_id'].nunique()}")
        print(f"   üìö –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫—É—Ä—Å–æ–≤: {df['course_id'].nunique()}")
        print(f"   ‚úÖ –û–±—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(df['is_correct'].sum() / len(df)) * 100:.1f}%")
        print(f"   ‚è±Ô∏è  –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ: {df['solve_time_minutes'].mean():.1f} –º–∏–Ω—É—Ç")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º
        print(f"\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –°–¢–†–ê–¢–ï–ì–ò–Ø–ú:")
        strategy_stats = df.groupby('strategy').agg({
            'student_id': 'count',
            'is_correct': 'mean',
            'solve_time_minutes': 'mean'
        }).round(3)
        
        for strategy, stats in strategy_stats.iterrows():
            print(f"   {strategy}: {stats['student_id']} –ø–æ–ø—ã—Ç–æ–∫, "
                  f"—É—Å–ø–µ—Ö {stats['is_correct']*100:.1f}%, "
                  f"–≤—Ä–µ–º—è {stats['solve_time_minutes']:.1f} –º–∏–Ω")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –∑–∞–¥–∞–Ω–∏–π
        print(f"\nüéØ –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –¢–ò–ü–ê–ú –ó–ê–î–ê–ù–ò–ô:")
        task_type_stats = df.groupby('task_type').agg({
            'student_id': 'count',
            'is_correct': 'mean',
            'answer_score': 'mean'
        }).round(3)
        
        for task_type, stats in task_type_stats.iterrows():
            print(f"   {task_type}: {stats['student_id']} –ø–æ–ø—ã—Ç–æ–∫, "
                  f"—É—Å–ø–µ—Ö {stats['is_correct']*100:.1f}%, "
                  f"—Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª {stats['answer_score']:.2f}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç–∞—Å–µ—Ç –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
        files_created = {}
        
        # CSV –¥–ª—è –æ–±—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        csv_path = output_path / "bkt_training_dataset.csv"
        df.to_csv(csv_path, index=False)
        files_created['csv'] = str(csv_path)
        print(f"üíæ –î–∞—Ç–∞—Å–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ CSV: {csv_path}")
        
        # JSON –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        json_path = output_path / "bkt_training_dataset.json"
        df.to_json(json_path, orient='records', date_format='iso', indent=2)
        files_created['json'] = str(json_path)
        print(f"üíæ –î–∞—Ç–∞—Å–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ JSON: {json_path}")
        
        # Parquet –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        parquet_path = output_path / "bkt_training_dataset.parquet"
        df.to_parquet(parquet_path, index=False)
        files_created['parquet'] = str(parquet_path)
        print(f"üíæ –î–∞—Ç–∞—Å–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ Parquet: {parquet_path}")
        
        # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–∞—Ç–∞—Å–µ—Ç–∞
        metadata = {
            'generation_config': {
                'num_students': self.config.num_students,
                'courses_per_student': self.config.courses_per_student,
                'noise_level': self.config.noise_level,
                'time_span_days': self.config.time_span_days,
                'strategy_distribution': self.config.strategy_distribution
            },
            'dataset_stats': {
                'total_attempts': len(df),
                'unique_students': df['student_id'].nunique(),
                'unique_tasks': df['task_id'].nunique(),
                'unique_skills': df['skill_id'].nunique(),
                'unique_courses': df['course_id'].nunique(),
                'overall_success_rate': float(df['is_correct'].mean()),
                'average_solve_time': float(df['solve_time_minutes'].mean())
            },
            'strategy_stats': strategy_stats.to_dict('index'),
            'task_type_stats': task_type_stats.to_dict('index'),
            'generation_timestamp': datetime.now().isoformat()
        }
        
        metadata_path = output_path / "dataset_metadata.json"
        with open(metadata_path, 'w', encoding='utf-8') as f:
            json.dump(metadata, f, indent=2, ensure_ascii=False)
        files_created['metadata'] = str(metadata_path)
        print(f"üìã –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {metadata_path}")
        
        print(f"\n‚úÖ –ì–ï–ù–ï–†–ê–¶–ò–Ø –î–ê–¢–ê–°–ï–¢–ê –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
        print(f"üìÇ –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã: {len(files_created)}")
        for file_type, file_path in files_created.items():
            print(f"   {file_type.upper()}: {file_path}")
        
        return files_created

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞—Ç–∞—Å–µ—Ç–∞"""
    print("üéì –ì–ï–ù–ï–†–ê–¢–û–† –°–ò–ù–¢–ï–¢–ò–ß–ï–°–ö–û–ì–û –î–ê–¢–ê–°–ï–¢–ê –î–õ–Ø BKT –ú–û–î–ï–õ–ò")
    print("=" * 60)
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    config = DatasetConfig(
        num_students=200,
        courses_per_student=(1, 3),
        noise_level=0.15,
        time_span_days=365,
        min_attempts_per_task=1,
        max_attempts_per_task=3
    )
    
    # –°–æ–∑–¥–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
    generator = BKTDatasetGenerator(config)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞—Ç–∞—Å–µ—Ç
    files = generator.generate_dataset("bkt_training_data")
    
    print(f"\nüéØ –ì–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –¥–ª—è –æ–±—É—á–µ–Ω–∏—è BKT –º–æ–¥–µ–ª–∏!")
    print(f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–∞–π–ª: {files['csv']} –¥–ª—è –æ–±—É—á–µ–Ω–∏—è")

if __name__ == "__main__":
    main()
