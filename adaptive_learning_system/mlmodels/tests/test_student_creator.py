"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞ —Å –ø–æ–ø—ã—Ç–∫–∞–º–∏.

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±–∞–∑–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –±–µ–∑ –ø–æ–ª–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞.

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python manage.py shell
    exec(open('mlmodels/tests/test_student_creator.py').read())
"""

import os
import sys
import django
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
project_root = Path(__file__).parent.parent.parent
sys.path.insert(0, str(project_root))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'adaptive_learning.settings')
django.setup()

from mlmodels.tests.create_student_with_attempts import StudentCreatorWithAttempts
from django.contrib.auth.models import User
from student.models import StudentProfile
from methodist.models import Task
from skills.models import Skill


def test_basic_functionality():
    """–¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏...")
    
    creator = StudentCreatorWithAttempts()
    
    # –¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏
    creator.trajectory_builder.initialize()
    print(f"‚úì –¢—Ä–∞–µ–∫—Ç–æ—Ä–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞, –Ω–∞–≤—ã–∫–æ–≤: {len(creator.trajectory_builder.skills_graph)}")
    
    # –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ü–µ–ª–µ–≤—ã—Ö —É—Ä–æ–≤–Ω–µ–π
    target_mastery = creator.generate_target_mastery_from_trajectory()
    print(f"‚úì –¶–µ–ª–µ–≤—ã–µ —É—Ä–æ–≤–Ω–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã: {len(target_mastery)} –Ω–∞–≤—ã–∫–æ–≤")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ü–µ–ª–µ–≤—ã—Ö —É—Ä–æ–≤–Ω–µ–π
    mastered = sum(1 for level in target_mastery.values() if level >= 0.9)
    partial = sum(1 for level in target_mastery.values() if 0.3 <= level < 0.9)
    unlearned = sum(1 for level in target_mastery.values() if level < 0.3)
    
    print(f"   - –ü–æ–ª–Ω–æ–µ –æ—Å–≤–æ–µ–Ω–∏–µ: {mastered}")
    print(f"   - –ß–∞—Å—Ç–∏—á–Ω–æ–µ –æ—Å–≤–æ–µ–Ω–∏–µ: {partial}")
    print(f"   - –ù–µ –∏–∑—É—á–µ–Ω–æ: {unlearned}")
    
    return True


def test_data_availability():
    """–¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î"""
    print("\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–≤—ã–∫–∏
    skills_count = Skill.objects.count()
    print(f"‚úì –ù–∞–≤—ã–∫–æ–≤ –≤ –ë–î: {skills_count}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–¥–∞–Ω–∏—è
    tasks_count = Task.objects.count()
    print(f"‚úì –ó–∞–¥–∞–Ω–∏–π –≤ –ë–î: {tasks_count}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑–∏ –∑–∞–¥–∞–Ω–∏–π –∏ –Ω–∞–≤—ã–∫–æ–≤
    tasks_with_skills = Task.objects.filter(skills__isnull=False).distinct().count()
    print(f"‚úì –ó–∞–¥–∞–Ω–∏–π —Å–æ —Å–≤—è–∑–∞–Ω–Ω—ã–º–∏ –Ω–∞–≤—ã–∫–∞–º–∏: {tasks_with_skills}")
    
    if tasks_with_skills == 0:
        print("‚ö†Ô∏è  –ù–µ—Ç –∑–∞–¥–∞–Ω–∏–π —Å–æ —Å–≤—è–∑–∞–Ω–Ω—ã–º–∏ –Ω–∞–≤—ã–∫–∞–º–∏ - —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ø—ã—Ç–æ–∫ –º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å")
        return False
    
    # –ü—Ä–∏–º–µ—Ä—ã –∑–∞–¥–∞–Ω–∏–π –ø–æ –Ω–∞–≤—ã–∫–∞–º
    print(f"\nüìù –ü—Ä–∏–º–µ—Ä—ã –∑–∞–¥–∞–Ω–∏–π –ø–æ –Ω–∞–≤—ã–∫–∞–º:")
    for skill in Skill.objects.all()[:5]:
        task_count = skill.tasks.count()
        print(f"   ‚Ä¢ {skill.name}: {task_count} –∑–∞–¥–∞–Ω–∏–π")
    
    return True


def test_student_creation_logic():
    """–¢–µ—Å—Ç –ª–æ–≥–∏–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞ (–±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è)"""
    print("\nüë®‚Äçüéì –¢–µ—Å—Ç –ª–æ–≥–∏–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞...")
    
    creator = StudentCreatorWithAttempts()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    username = "alex_klementev"
    exists_before = User.objects.filter(username=username).exists()
    print(f"‚úì –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {exists_before}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è
    full_name = "–ö–ª–µ–º–µ–Ω—Ç—å–µ–≤ –ê–ª–µ–∫—Å–µ–π –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á"
    email = "Alex0.oKlem@gmail.com"
    organization = "–†–ì–ü–£ –∏–º. –ì–µ—Ä—Ü–µ–Ω–∞"
    
    print(f"‚úì –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è:")
    print(f"   - –§–ò–û: {full_name}")
    print(f"   - Email: {email}")
    print(f"   - –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: {organization}")
    
    return True


def test_attempt_creation_logic():
    """–¢–µ—Å—Ç –ª–æ–≥–∏–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ø—ã—Ç–æ–∫"""
    print("\nüìù –¢–µ—Å—Ç –ª–æ–≥–∏–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ø—ã—Ç–æ–∫...")
    
    creator = StudentCreatorWithAttempts()
    creator.trajectory_builder.initialize()
    
    # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –Ω–∞–≤—ã–∫ —Å –∑–∞–¥–∞–Ω–∏—è–º–∏
    test_skill = None
    for skill in Skill.objects.all():
        if skill.tasks.exists():
            test_skill = skill
            break
    
    if not test_skill:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –Ω–∞–≤—ã–∫ —Å –∑–∞–¥–∞–Ω–∏—è–º–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        return False
    
    print(f"‚úì –¢–µ—Å—Ç–æ–≤—ã–π –Ω–∞–≤—ã–∫: {test_skill.name}")
    print(f"   - –ó–∞–¥–∞–Ω–∏–π: {test_skill.tasks.count()}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π –æ—Å–≤–æ–µ–Ω–∏—è
    test_levels = [0.95, 0.6, 0.2]
    for level in test_levels:
        print(f"   - –£—Ä–æ–≤–µ–Ω—å {level}: ", end="")
        
        if level >= 0.9:
            expected_attempts = "8-15, –≤—ã—Å–æ–∫–∞—è —É—Å–ø–µ—à–Ω–æ—Å—Ç—å"
        elif level >= 0.3:
            expected_attempts = "5-10, —Å—Ä–µ–¥–Ω—è—è —É—Å–ø–µ—à–Ω–æ—Å—Ç—å"
        else:
            expected_attempts = "2-5, –Ω–∏–∑–∫–∞—è —É—Å–ø–µ—à–Ω–æ—Å—Ç—å"
        
        print(expected_attempts)
    
    return True


def main():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞...\n")
    
    try:
        test1 = test_basic_functionality()
        test2 = test_data_availability()
        test3 = test_student_creation_logic()
        test4 = test_attempt_creation_logic()
        
        if all([test1, test2, test3, test4]):
            print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
            print("\nüéØ –ì–æ—Ç–æ–≤ –∫ —Å–æ–∑–¥–∞–Ω–∏—é —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞ —Å –∫–æ–º–∞–Ω–¥–æ–π:")
            print("   python manage.py create_student_with_attempts")
        else:
            print("\n‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –≤—ã—è–≤–∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main()
