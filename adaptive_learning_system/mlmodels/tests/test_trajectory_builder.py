"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ –æ–±—É—á–µ–Ω–∏—è.

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python manage.py shell
    exec(open('mlmodels/tests/test_trajectory_builder.py').read())
"""

import os
import sys
import django
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
project_root = Path(__file__).parent.parent.parent
sys.path.insert(0, str(project_root))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'adaptive_learning.settings')
django.setup()

from mlmodels.tests.learning_trajectory_builder import LearningTrajectoryBuilder


def test_trajectory_building():
    """–¢–µ—Å—Ç –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ –æ–±—É—á–µ–Ω–∏—è...")
    
    builder = LearningTrajectoryBuilder()
    builder.initialize()
    
    # –¢–µ—Å—Ç —Å–∏–º—É–ª—è—Ü–∏–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞
    result = builder.simulate_student_learning(
        target_mastered_count=5,
        target_partial_count=3
    )
    
    print(f"‚úì –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∏–º—É–ª—è—Ü–∏–∏: {type(result)}")
    
    if isinstance(result, tuple) and len(result) == 2:
        mastery, learning_steps = result
        print(f"‚úì Mastery: {type(mastery)}, —Ä–∞–∑–º–µ—Ä: {len(mastery)}")
        print(f"‚úì Learning steps: {type(learning_steps)}, —Ä–∞–∑–º–µ—Ä: {len(learning_steps)}")
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–∞–≤—ã–∫–æ–≤
        available = builder.get_available_skills(mastery)
        print(f"‚úì –î–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–∞–≤—ã–∫–æ–≤: {len(available)}")
        
        # –¢–µ—Å—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        recommendations = builder.get_learning_recommendations(mastery, limit=5)
        print(f"‚úì –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {len(recommendations)}")
        
        # –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        is_valid, errors = builder.validate_mastery_consistency(mastery)
        print(f"‚úì –í–∞–ª–∏–¥–∞—Ü–∏—è: {'OK' if is_valid else '–û—à–∏–±–∫–∏'}")
        if errors:
            print(f"   –û—à–∏–±–æ–∫: {len(errors)}")
            for error in errors[:2]:
                print(f"   - {error}")
        
        # –ü—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö
        print(f"\nüìù –ü–†–ò–ú–ï–†–´ –î–ê–ù–ù–´–•:")
        
        # –ü—Ä–∏–º–µ—Ä –æ—Å–≤–æ–µ–Ω–Ω—ã—Ö –Ω–∞–≤—ã–∫–æ–≤
        mastered = [(k, v) for k, v in mastery.items() if v >= 0.9]
        print(f"   –û—Å–≤–æ–µ–Ω–Ω—ã—Ö –Ω–∞–≤—ã–∫–æ–≤: {len(mastered)}")
        for skill_id, level in mastered[:3]:
            name = builder.skill_info[skill_id].name
            print(f"     ‚Ä¢ {name}: {level:.2f}")
        
        # –ü—Ä–∏–º–µ—Ä —à–∞–≥–æ–≤ –æ–±—É—á–µ–Ω–∏—è
        print(f"   –®–∞–≥–æ–≤ –æ–±—É—á–µ–Ω–∏—è: {len(learning_steps)}")
        for step in learning_steps[:3]:
            print(f"     ‚Ä¢ –®–∞–≥ {step['step']}: {step['skill_name']} ({step['mastery_level']:.2f})")
        
        # –ü—Ä–∏–º–µ—Ä —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        print(f"   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {len(recommendations)}")
        for rec in recommendations[:3]:
            print(f"     ‚Ä¢ {rec['skill_name']} (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {rec['priority_score']:.1f})")
        
        return True
    else:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
        return False


def test_export():
    """–¢–µ—Å—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüíæ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–∫—Å–ø–æ—Ä—Ç–∞...")
    
    builder = LearningTrajectoryBuilder()
    builder.initialize()
    
    mastery, learning_steps = builder.simulate_student_learning(
        target_mastered_count=3,
        target_partial_count=2
    )
    
    # –¢–µ—Å—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞
    temp_dir = Path(__file__).parent.parent.parent / 'temp_dir'
    builder.export_trajectory_data(mastery, learning_steps, str(temp_dir))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
    export_file = temp_dir / 'student_learning_trajectory.json'
    if export_file.exists():
        print(f"‚úì –§–∞–π–ª —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω: {export_file.stat().st_size} bytes")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        import json
        with open(export_file, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        print(f"‚úì –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö:")
        for key in data.keys():
            print(f"   - {key}")
        
        return True
    else:
        print(f"‚ùå –§–∞–π–ª –Ω–µ —Å–æ–∑–¥–∞–Ω")
        return False


def main():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏...\n")
    
    try:
        success1 = test_trajectory_building()
        success2 = test_export()
        
        if success1 and success2:
            print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        else:
            print("\n‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main()
