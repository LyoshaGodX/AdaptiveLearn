"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞ –∏ —Å–∏–º—É–ª—è—Ü–∏–∏ –ø–æ–ø—ã—Ç–æ–∫ —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π.

–°–æ–∑–¥–∞–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞ –ö–ª–µ–º–µ–Ω—Ç—å–µ–≤–∞ –ê–ª–µ–∫—Å–µ—è –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á–∞ –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –ø–æ–ø—ã—Ç–∫–∏ —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π
—Å–ª–µ–¥—É—è –≥—Ä–∞—Ñ—É –Ω–∞–≤—ã–∫–æ–≤. BKT –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–∞–∂–¥–æ–π –ø–æ–ø—ã—Ç–∫–∏.

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python manage.py shell
    exec(open('mlmodels/tests/create_student_with_attempts.py').read())
"""

import os
import sys
import django
from typing import Dict, List, Set, Optional
import random
from datetime import datetime, timedelta
from pathlib import Path
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
def setup_django():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    project_root = Path(__file__).parent.parent.parent
    sys.path.insert(0, str(project_root))
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'adaptive_learning.settings')
    django.setup()

setup_django()

from django.contrib.auth.models import User
from django.utils import timezone
from django.db import transaction
from student.models import StudentProfile, StudentCourseEnrollment
from skills.models import Skill, Course
from methodist.models import Task, TaskType, DifficultyLevel
from mlmodels.models import TaskAttempt, StudentSkillMastery
from mlmodels.tests.parse_skills_graph import SkillsGraphParser


class StudentCreatorWithAttempts:
    """–°–æ–∑–¥–∞—Ç–µ–ª—å —Å—Ç—É–¥–µ–Ω—Ç–∞ —Å —Å–∏–º—É–ª—è—Ü–∏–µ–π –ø–æ–ø—ã—Ç–æ–∫ —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π"""
    
    def __init__(self):
        self.student_profile = None
        self.skills_graph = {}  # –ì—Ä–∞—Ñ –Ω–∞–≤—ã–∫–æ–≤ —Å prerequisites
        self.skills_by_depth = {}  # –ù–∞–≤—ã–∫–∏ –ø–æ —É—Ä–æ–≤–Ω—è–º –≥–ª—É–±–∏–Ω—ã
        self.created_attempts = []
          # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∏–º—É–ª—è—Ü–∏–∏
        self.time_variation = (30, 600)  # –û—Ç 30 —Å–µ–∫—É–Ω–¥ –¥–æ 10 –º–∏–Ω—É—Ç
        
    def initialize_skills_graph(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≥—Ä–∞—Ñ –Ω–∞–≤—ã–∫–æ–≤"""
        print("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥—Ä–∞—Ñ–∞ –Ω–∞–≤—ã–∫–æ–≤...")
        
        parser = SkillsGraphParser()
        parser.parse_skills_graph()
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≥—Ä–∞—Ñ –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç (–Ω–∞–∑–≤–∞–Ω–∏—è –Ω–∞–≤—ã–∫–æ–≤ –≤–º–µ—Å—Ç–æ ID)
        skill_id_to_name = {skill.id: skill.name for skill in Skill.objects.all()}
        
        self.skills_graph = {}
        for skill_id, prereq_ids in parser.skills_graph.items():
            skill_name = skill_id_to_name.get(skill_id)
            if skill_name:
                prereq_names = []
                for prereq_id in prereq_ids:
                    prereq_name = skill_id_to_name.get(prereq_id)
                    if prereq_name:
                        prereq_names.append(prereq_name)
                
                self.skills_graph[skill_name] = {
                    'prerequisites': prereq_names,
                    'skill_id': skill_id
                }
        
        # –í—ã—á–∏—Å–ª—è–µ–º –≥–ª—É–±–∏–Ω—ã –Ω–∞–≤—ã–∫–æ–≤
        skill_depths = parser._calculate_skill_depths()
        self.skills_by_depth = {}
        for skill_id, depth in skill_depths.items():
            skill_name = skill_id_to_name.get(skill_id)
            if skill_name:
                if depth not in self.skills_by_depth:
                    self.skills_by_depth[depth] = []
                self.skills_by_depth[depth].append(skill_name)
        
        print(f"‚úÖ –ì—Ä–∞—Ñ –Ω–∞–≤—ã–∫–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω:")
        print(f"   ‚Ä¢ –ù–∞–≤—ã–∫–æ–≤: {len(self.skills_graph)}")
        print(f"   ‚Ä¢ –£—Ä–æ–≤–Ω–µ–π –≥–ª—É–±–∏–Ω—ã: {len(self.skills_by_depth)}")
        print(f"   ‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥–ª—É–±–∏–Ω–∞: {max(self.skills_by_depth.keys()) if self.skills_by_depth else 0}")
        
        return self.skills_graph
    
    def create_student(self, recreate=False) -> StudentProfile:
        """–°–æ–∑–¥–∞–µ—Ç –∏–ª–∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞"""
        username = "alex_klementev"
        
        if recreate:
            print("‚ö†Ô∏è  –ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞...")
            try:
                user = User.objects.get(username=username)
                user.delete()
                print("‚úÖ –°—Ç–∞—Ä—ã–π —Å—Ç—É–¥–µ–Ω—Ç —É–¥–∞–ª–µ–Ω")
            except User.DoesNotExist:
                pass
        
        print("üë®‚Äçüéì –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞ –ö–ª–µ–º–µ–Ω—Ç—å–µ–≤–∞ –ê–ª–µ–∫—Å–µ—è –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á–∞...")
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user, created = User.objects.get_or_create(
            username=username,
            defaults={
                'first_name': "–ê–ª–µ–∫—Å–µ–π",
                'last_name': "–ö–ª–µ–º–µ–Ω—Ç—å–µ–≤",
                'email': "Alex0.oKlem@gmail.com",
                'is_active': True
            }
        )
        
        if not created and not recreate:
            print(f"‚ö†Ô∏è –°—Ç—É–¥–µ–Ω—Ç {username} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ recreate=True –¥–ª—è –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è.")
            self.student_profile = user.studentprofile
            return self.student_profile
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å —Å—Ç—É–¥–µ–Ω—Ç–∞
        student_profile, _ = StudentProfile.objects.get_or_create(
            user=user,
            defaults={
                'full_name': "–ö–ª–µ–º–µ–Ω—Ç—å–µ–≤ –ê–ª–µ–∫—Å–µ–π –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á",
                'email': "Alex0.oKlem@gmail.com",
                'organization': "–†–ì–ü–£ –∏–º. –ì–µ—Ä—Ü–µ–Ω–∞",
                'is_active': True
            }
        )
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞ –Ω–∞ –∫—É—Ä—Å—ã
        courses = Course.objects.all()
        for course in courses:
            StudentCourseEnrollment.objects.get_or_create(
                student=student_profile,
                course=course,
                defaults={
                    'enrolled_at': timezone.now(),
                    'status': 'enrolled'
                }
            )
        
        self.student_profile = student_profile
        
        print(f"‚úÖ –°—Ç—É–¥–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω:")
        print(f"   ‚Ä¢ –§–ò–û: {student_profile.full_name}")
        print(f"   ‚Ä¢ Email: {student_profile.email}")
        print(f"   ‚Ä¢ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: {student_profile.organization}")
        print(f"   ‚Ä¢ Username: {user.username}")
        print(f"   ‚Ä¢ –ó–∞–ø–∏—Å–∞–Ω –Ω–∞ –∫—É—Ä—Å–æ–≤: {courses.count()}")
        
        return student_profile
    
    def get_mastered_skills(self) -> Set[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Å–≤–æ–µ–Ω–Ω—ã–µ –Ω–∞–≤—ã–∫–∏ (BKT >= 0.7)"""
        if not self.student_profile:
            return set()
        
        masteries = StudentSkillMastery.objects.filter(
            student=self.student_profile,
            current_mastery_prob__gte=0.7
        )
        return {mastery.skill.name for mastery in masteries}
    
    def get_available_skills(self) -> Set[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–≤—ã–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è (prerequisites –≤—ã–ø–æ–ª–Ω–µ–Ω—ã)"""
        mastered_skills = self.get_mastered_skills()
        available_skills = set()
        
        for skill_name, skill_data in self.skills_graph.items():
            prerequisites = skill_data.get('prerequisites', [])
            
            # –ï—Å–ª–∏ –≤—Å–µ prerequisites –≤—ã–ø–æ–ª–Ω–µ–Ω—ã, –Ω–∞–≤—ã–∫ –¥–æ—Å—Ç—É–ø–µ–Ω
            if all(prereq in mastered_skills for prereq in prerequisites):
                available_skills.add(skill_name)
        
        return available_skills
    
    def create_attempts_for_skill(self, skill_name: str, target_attempts: int, target_success_rate: float) -> List[TaskAttempt]:
        """–°–æ–∑–¥–∞–µ—Ç –ø–æ–ø—ã—Ç–∫–∏ –¥–ª—è –æ–¥–Ω–æ–≥–æ –Ω–∞–≤—ã–∫–∞"""
        try:
            skill = Skill.objects.get(name=skill_name)
        except Skill.DoesNotExist:
            print(f"‚ö†Ô∏è –ù–∞–≤—ã–∫ '{skill_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return []
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –Ω–∞–≤—ã–∫–∞
        tasks = list(Task.objects.filter(skills=skill))
        if not tasks:
            print(f"‚ö†Ô∏è –ù–µ—Ç –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –Ω–∞–≤—ã–∫–∞ '{skill_name}'")
            return []
        
        print(f"   üìö {skill_name}: {target_attempts} –ø–æ–ø—ã—Ç–æ–∫, —Ü–µ–ª—å {target_success_rate:.1%}")
        
        attempts = []
        current_time = timezone.now() - timedelta(days=random.randint(1, 30))
        
        for i in range(target_attempts):
            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ
            task = random.choice(tasks)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞ (—Å —Ä–æ—Å—Ç–æ–º –∫ –∫–æ–Ω—Ü—É)
            progress_factor = i / max(target_attempts - 1, 1)
            adjusted_success_rate = target_success_rate * (0.4 + 0.6 * progress_factor)
            is_correct = random.random() < adjusted_success_rate
            
            # –í—Ä–µ–º—è —Ä–µ—à–µ–Ω–∏—è
            base_time = random.randint(*self.time_variation)
            if task.difficulty == DifficultyLevel.ADVANCED:
                base_time = int(base_time * 1.5)
            elif task.difficulty == DifficultyLevel.BEGINNER:
                base_time = int(base_time * 0.7)
            
            if not is_correct:
                base_time = int(base_time * 1.3)
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ–ø—ã—Ç–∫—É
            attempt_start = current_time
            attempt_end = current_time + timedelta(seconds=base_time)
            
            attempt = TaskAttempt.objects.create(
                student=self.student_profile,
                task=task,
                is_correct=is_correct,
                given_answer=f"–û—Ç–≤–µ—Ç –Ω–∞ {task.title}" if is_correct else "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç",
                correct_answer=f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ {task.title}",
                started_at=attempt_start,
                completed_at=attempt_end,
                time_spent=base_time,
                metadata={
                    'skill': skill_name,
                    'attempt_number': i + 1,
                    'total_attempts': target_attempts,
                    'simulated': True
                }
            )
            # BKT –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ TaskAttempt.save()!
            
            attempts.append(attempt)
            current_time = attempt_end + timedelta(minutes=random.randint(5, 60))
        
        return attempts
    def simulate_learning_progression(self, max_skills_to_learn=8):
        """–°–∏–º—É–ª–∏—Ä—É–µ—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ –∏–∑—É—á–µ–Ω–∏–µ –Ω–∞–≤—ã–∫–æ–≤ –ø–æ –≥—Ä–∞—Ñ—É"""
        print(f"\nüéØ –°–∏–º—É–ª—è—Ü–∏—è –∏–∑—É—á–µ–Ω–∏—è –Ω–∞–≤—ã–∫–æ–≤ (–º–∞–∫—Å–∏–º—É–º {max_skills_to_learn})...")
        
        learned_skills = 0
        iteration = 0
        max_iterations = 50  # –ó–∞—â–∏—Ç–∞ –æ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
        target_fully_learned = 6  # –¶–µ–ª–µ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å–≤–æ–µ–Ω–Ω—ã—Ö –Ω–∞–≤—ã–∫–æ–≤
        
        while learned_skills < max_skills_to_learn and iteration < max_iterations:
            iteration += 1
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞–≤—ã–∫–∏
            available_skills = self.get_available_skills()
            mastered_skills = self.get_mastered_skills()
            
            # –ò—Å–∫–ª—é—á–∞–µ–º —É–∂–µ –∏–∑—É—á–µ–Ω–Ω—ã–µ –Ω–∞–≤—ã–∫–∏
            available_skills = available_skills - mastered_skills
            
            if not available_skills:
                print("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–∞–≤—ã–∫–æ–≤ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è")
                break
            
            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –Ω–∞–≤—ã–∫
            skill_to_learn = random.choice(list(available_skills))
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑—É—á–µ–Ω–∏—è
            if learned_skills < target_fully_learned:  # –ü–µ—Ä–≤—ã–µ 6 –Ω–∞–≤—ã–∫–æ–≤ - –≤—ã—Å–æ–∫–∞—è —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –æ—Å–≤–æ–µ–Ω–∏—è
                attempts = random.randint(8, 15)
                success_rate = random.uniform(0.75, 0.95)
            elif learned_skills == target_fully_learned:  # 7-–π –Ω–∞–≤—ã–∫ - —Å—Ä–µ–¥–Ω—è—è —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –¥–ª—è —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ –æ—Å–≤–æ–µ–Ω–∏—è
                attempts = random.randint(4, 7)
                success_rate = random.uniform(0.45, 0.65)  # –î–ª—è —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ –æ—Å–≤–æ–µ–Ω–∏—è (0.5-0.8)
            else:  # –û—Å—Ç–∞–ª—å–Ω—ã–µ –Ω–∞–≤—ã–∫–∏ - –Ω–∏–∑–∫–∞—è —É—Å–ø–µ—à–Ω–æ—Å—Ç—å
                attempts = random.randint(2, 5)
                success_rate = random.uniform(0.3, 0.5)
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ–ø—ã—Ç–∫–∏ –¥–ª—è –Ω–∞–≤—ã–∫–∞
            skill_attempts = self.create_attempts_for_skill(skill_to_learn, attempts, success_rate)
            self.created_attempts.extend(skill_attempts)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å–≤–æ–µ–Ω –ª–∏ –Ω–∞–≤—ã–∫
            try:
                mastery = StudentSkillMastery.objects.get(
                    student=self.student_profile,
                    skill__name=skill_to_learn
                )
                if mastery.current_mastery_prob >= 0.8:
                    if learned_skills < target_fully_learned:
                        learned_skills += 1
                        print(f"   ‚úÖ –ù–∞–≤—ã–∫ '{skill_to_learn}' –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å–≤–æ–µ–Ω (BKT: {mastery.current_mastery_prob:.3f})")
                    else:
                        print(f"   ‚úÖ –ù–∞–≤—ã–∫ '{skill_to_learn}' –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å–≤–æ–µ–Ω (BKT: {mastery.current_mastery_prob:.3f})")
                elif mastery.current_mastery_prob >= 0.5:
                    print(f"   üü° –ù–∞–≤—ã–∫ '{skill_to_learn}' —á–∞—Å—Ç–∏—á–Ω–æ –æ—Å–≤–æ–µ–Ω (BKT: {mastery.current_mastery_prob:.3f})")
                    if learned_skills >= target_fully_learned:
                        # –£—á–∏—Ç—ã–≤–∞–µ–º —á–∞—Å—Ç–∏—á–Ω–æ –æ—Å–≤–æ–µ–Ω–Ω—ã–π –Ω–∞–≤—ã–∫ –≤ –æ–±—â–µ–º —Å—á–µ—Ç–µ
                        learned_skills += 1
                else:
                    print(f"   üî¥ –ù–∞–≤—ã–∫ '{skill_to_learn}' —Å–ª–∞–±–æ –æ—Å–≤–æ–µ–Ω (BKT: {mastery.current_mastery_prob:.3f})")
            except StudentSkillMastery.DoesNotExist:
                print(f"   ‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö BKT –¥–ª—è –Ω–∞–≤—ã–∫–∞ '{skill_to_learn}'")
        
        print(f"\n‚úÖ –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞:")
        print(f"   ‚Ä¢ –ò—Ç–µ—Ä–∞—Ü–∏–π: {iteration}")
        print(f"   ‚Ä¢ –ò–∑—É—á–µ–Ω–Ω—ã—Ö –Ω–∞–≤—ã–∫–æ–≤: {learned_skills}")
        print(f"   ‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ø—ã—Ç–æ–∫: {len(self.created_attempts)}")
    
    def analyze_student_progress(self) -> Dict:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å —Å—Ç—É–¥–µ–Ω—Ç–∞"""
        print("\nüìä –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å—Ç—É–¥–µ–Ω—Ç–∞...")
        
        if not self.student_profile:
            print("‚ùå –°—Ç—É–¥–µ–Ω—Ç –Ω–µ —Å–æ–∑–¥–∞–Ω")
            return {}
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        attempts = TaskAttempt.objects.filter(student=self.student_profile)
        masteries = StudentSkillMastery.objects.filter(student=self.student_profile)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Å–≤–æ–µ–Ω–∏–µ –Ω–∞–≤—ã–∫–æ–≤
        fully_mastered = masteries.filter(current_mastery_prob__gte=0.8)
        partially_mastered = masteries.filter(
            current_mastery_prob__gte=0.5, 
            current_mastery_prob__lt=0.8
        )
        low_mastered = masteries.filter(current_mastery_prob__lt=0.5)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞–≤—ã–∫–∏
        available_skills = self.get_available_skills()
        mastered_skill_names = self.get_mastered_skills()
        truly_available = available_skills - mastered_skill_names
        
        results = {
            'total_attempts': attempts.count(),
            'correct_attempts': attempts.filter(is_correct=True).count(),
            'skills_with_data': masteries.count(),
            'fully_mastered': fully_mastered.count(),
            'partially_mastered': partially_mastered.count(),
            'low_mastered': low_mastered.count(),
            'available_skills': len(truly_available),
            'success_rate': attempts.filter(is_correct=True).count() / max(attempts.count(), 1)
        }
        
        print(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω:")
        print(f"   ‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ø—ã—Ç–æ–∫: {results['total_attempts']}")
        print(f"   ‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö: {results['correct_attempts']} ({results['success_rate']:.1%})")
        print(f"   ‚Ä¢ –ù–∞–≤—ã–∫–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏ BKT: {results['skills_with_data']}")
        print(f"   ‚Ä¢ –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å–≤–æ–µ–Ω–æ (‚â•0.8): {results['fully_mastered']}")
        print(f"   ‚Ä¢ –ß–∞—Å—Ç–∏—á–Ω–æ –æ—Å–≤–æ–µ–Ω–æ (0.5-0.8): {results['partially_mastered']}")
        print(f"   ‚Ä¢ –°–ª–∞–±–æ –æ—Å–≤–æ–µ–Ω–æ (<0.5): {results['low_mastered']}")
        print(f"   ‚Ä¢ –î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è: {results['available_skills']}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏
        if fully_mastered.exists():
            print(f"\n‚úÖ –ü–û–õ–ù–û–°–¢–¨–Æ –û–°–í–û–ï–ù–ù–´–ï –ù–ê–í–´–ö–ò ({fully_mastered.count()}):")
            for mastery in fully_mastered.order_by('-current_mastery_prob'):
                print(f"   ‚Ä¢ {mastery.skill.name}: {mastery.current_mastery_prob:.3f} "
                      f"({mastery.correct_attempts}/{mastery.attempts_count})")
        
        if partially_mastered.exists():
            print(f"\nüü° –ß–ê–°–¢–ò–ß–ù–û –û–°–í–û–ï–ù–ù–´–ï –ù–ê–í–´–ö–ò ({partially_mastered.count()}):")
            for mastery in partially_mastered.order_by('-current_mastery_prob'):
                print(f"   ‚Ä¢ {mastery.skill.name}: {mastery.current_mastery_prob:.3f} "
                      f"({mastery.correct_attempts}/{mastery.attempts_count})")
        
        if truly_available:
            print(f"\nüéØ –î–û–°–¢–£–ü–ù–´–ï –î–õ–Ø –ò–ó–£–ß–ï–ù–ò–Ø –ù–ê–í–´–ö–ò ({len(truly_available)}):")
            for skill_name in sorted(truly_available):
                prerequisites = self.skills_graph.get(skill_name, {}).get('prerequisites', [])
                print(f"   ‚Ä¢ {skill_name}" + (f" (—Ç—Ä–µ–±—É–µ—Ç: {', '.join(prerequisites)})" if prerequisites else ""))
        
        return results
    def create_student_with_learning_simulation(self, recreate=False, max_skills=8):
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞ —Å —Å–∏–º—É–ª—è—Ü–∏–µ–π –æ–±—É—á–µ–Ω–∏—è"""
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
            self.initialize_skills_graph()
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞
            student = self.create_student(recreate=recreate)
            
            # –°–∏–º—É–ª—è—Ü–∏—è –æ–±—É—á–µ–Ω–∏—è
            self.simulate_learning_progression(max_skills_to_learn=max_skills)
            
            # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            results = self.analyze_student_progress()
            
            print("\n" + "="*80)
            print("‚ú® –°–¢–£–î–ï–ù–¢ –£–°–ü–ï–®–ù–û –°–û–ó–î–ê–ù –° –°–ò–ú–£–õ–Ø–¶–ò–ï–ô –û–ë–£–ß–ï–ù–ò–Ø!")
            print("="*80)
            
            return results
           
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            import traceback
            traceback.print_exc()
            return None


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
    creator = StudentCreatorWithAttempts()
    
    # –ú–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    import sys
    recreate = '--recreate' in sys.argv
    with transaction.atomic():
        results = creator.create_student_with_learning_simulation(
            recreate=recreate, 
            max_skills=8
        )


if __name__ == "__main__":
    main()
