"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏ –∞–Ω–∞–ª–∏–∑–∞ –≥—Ä–∞—Ñ–∞ –Ω–∞–≤—ã–∫–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.

–ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ Django ORM –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç:
- –°—Ç—Ä—É–∫—Ç—É—Ä—É –≥—Ä–∞—Ñ–∞ –Ω–∞–≤—ã–∫–æ–≤ 
- –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –º–µ–∂–¥—É –Ω–∞–≤—ã–∫–∞–º–∏ (prerequisites)
- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –Ω–∞–≤—ã–∫–∞–º –∏ –∏—Ö —Å–≤—è–∑—è–º
- –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –≥—Ä–∞—Ñ–∞ –Ω–∞–≤—ã–∫–æ–≤

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python manage.py shell
    exec(open('mlmodels/tests/parse_skills_graph.py').read())
    
–ò–ª–∏ –∑–∞–ø—É—Å–∫ –∫–∞–∫ Django –∫–æ–º–∞–Ω–¥–∞:
    python parse_skills_graph.py
"""

import os
import sys
import django
from typing import Dict, Set, List, Tuple, Optional
from collections import defaultdict, deque
import json
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
def setup_django():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
    project_root = Path(__file__).parent.parent.parent
    sys.path.insert(0, str(project_root))
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django settings
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'adaptive_learning.settings')
    django.setup()

# –ò–º–ø–æ—Ä—Ç—ã Django –º–æ–¥–µ–ª–µ–π (–ø–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏)
setup_django()

from skills.models import Skill, Course
from methodist.models import Task
from mlmodels.models import StudentSkillMastery
from django.db.models import Count, Avg, Q


class SkillsGraphParser:
    """–ü–∞—Ä—Å–µ—Ä –≥—Ä–∞—Ñ–∞ –Ω–∞–≤—ã–∫–æ–≤ —Å –∞–Ω–∞–ª–∏–∑–æ–º –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π"""
    
    def __init__(self):
        self.skills_graph = {}  # {skill_id: {prerequisite_ids}}
        self.reverse_graph = {}  # {skill_id: {dependent_skill_ids}}
        self.skill_info = {}  # {skill_id: skill_model}
        self.task_skills_mapping = {}  # {task_id: {skill_ids}}
        self.skill_tasks_mapping = {}  # {skill_id: {task_ids}}
        
    def parse_skills_graph(self) -> Dict[int, Set[int]]:
        """
        –ü–∞—Ä—Å–∏—Ç –≥—Ä–∞—Ñ –Ω–∞–≤—ã–∫–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        
        Returns:
            Dict[int, Set[int]]: –ì—Ä–∞—Ñ –Ω–∞–≤—ã–∫–æ–≤ {skill_id: {prerequisite_ids}}
        """
        print("üîç –ü–∞—Ä—Å–∏–Ω–≥ –≥—Ä–∞—Ñ–∞ –Ω–∞–≤—ã–∫–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        
        skills_graph = {}
        reverse_graph = defaultdict(set)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–∞–≤—ã–∫–∏
        skills = Skill.objects.all().prefetch_related('prerequisites', 'courses')
        
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ –Ω–∞–≤—ã–∫–æ–≤: {skills.count()}")
        
        for skill in skills:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–≤—ã–∫–µ
            self.skill_info[skill.id] = skill
            
            # –ü–æ–ª—É—á–∞–µ–º prerequisite –Ω–∞–≤—ã–∫–∏
            prerequisites = set()
            for prereq in skill.prerequisites.all():
                prerequisites.add(prereq.id)
                reverse_graph[prereq.id].add(skill.id)  # –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
            
            skills_graph[skill.id] = prerequisites
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            if skill.id not in reverse_graph:
                reverse_graph[skill.id] = set()
        
        self.skills_graph = skills_graph
        self.reverse_graph = dict(reverse_graph)
        
        print(f"‚úÖ –ì—Ä–∞—Ñ –Ω–∞–≤—ã–∫–æ–≤ –ø–æ—Å—Ç—Ä–æ–µ–Ω. –í—Å–µ–≥–æ —Å–≤—è–∑–µ–π: {sum(len(prereqs) for prereqs in skills_graph.values())}")
        
        return skills_graph
    
    def parse_task_skills_mapping(self) -> Dict[int, Set[int]]:
        """
        –ü–∞—Ä—Å–∏—Ç —Å–≤—è–∑–∏ –º–µ–∂–¥—É –∑–∞–¥–∞–Ω–∏—è–º–∏ –∏ –Ω–∞–≤—ã–∫–∞–º–∏
        
        Returns:
            Dict[int, Set[int]]: –ú–∞–ø–ø–∏–Ω–≥ {task_id: {skill_ids}}
        """
        print("üîç –ü–∞—Ä—Å–∏–Ω–≥ —Å–≤—è–∑–µ–π –∑–∞–¥–∞–Ω–∏–π –∏ –Ω–∞–≤—ã–∫–æ–≤...")
        
        task_skills = {}
        skill_tasks = defaultdict(set)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è —Å –Ω–∞–≤—ã–∫–∞–º–∏
        tasks = Task.objects.all().prefetch_related('skills')
        
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: {tasks.count()}")
        
        for task in tasks:
            skills = set()
            for skill in task.skills.all():
                skills.add(skill.id)
                skill_tasks[skill.id].add(task.id)
            
            task_skills[task.id] = skills
        
        self.task_skills_mapping = task_skills
        self.skill_tasks_mapping = dict(skill_tasks)
        
        print(f"‚úÖ –°–≤—è–∑–∏ –∑–∞–¥–∞–Ω–∏–π –∏ –Ω–∞–≤—ã–∫–æ–≤ –ø–æ—Å—Ç—Ä–æ–µ–Ω—ã.")
        
        return task_skills
    
    def analyze_graph_structure(self) -> Dict:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≥—Ä–∞—Ñ–∞ –Ω–∞–≤—ã–∫–æ–≤"""
        print("\nüìà –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≥—Ä–∞—Ñ–∞ –Ω–∞–≤—ã–∫–æ–≤...")
        
        if not self.skills_graph:
            self.parse_skills_graph()
        
        analysis = {
            'total_skills': len(self.skills_graph),
            'total_prerequisites': sum(len(prereqs) for prereqs in self.skills_graph.values()),
            'skills_with_prerequisites': sum(1 for prereqs in self.skills_graph.values() if prereqs),
            'root_skills': [],  # –ù–∞–≤—ã–∫–∏ –±–µ–∑ prerequisites
            'leaf_skills': [],  # –ù–∞–≤—ã–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —è–≤–ª—è—é—Ç—Å—è prerequisites –¥–ª—è –¥—Ä—É–≥–∏—Ö
            'max_depth': 0,
            'cycles': [],
            'skill_depths': {},
            'prerequisite_count_distribution': defaultdict(int),
            'dependent_count_distribution': defaultdict(int)
        }
        
        # –ù–∞—Ö–æ–¥–∏–º –∫–æ—Ä–Ω–µ–≤—ã–µ –Ω–∞–≤—ã–∫–∏ (–±–µ–∑ prerequisites)
        for skill_id, prereqs in self.skills_graph.items():
            if not prereqs:
                analysis['root_skills'].append(skill_id)
        
        # –ù–∞—Ö–æ–¥–∏–º –ª–∏—Å—Ç–æ–≤—ã–µ –Ω–∞–≤—ã–∫–∏ (–Ω–µ —è–≤–ª—è—é—Ç—Å—è prerequisites –¥–ª—è –¥—Ä—É–≥–∏—Ö)
        for skill_id in self.skills_graph.keys():
            if not self.reverse_graph.get(skill_id, set()):
                analysis['leaf_skills'].append(skill_id)
        
        # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É prerequisites
        for prereqs in self.skills_graph.values():
            analysis['prerequisite_count_distribution'][len(prereqs)] += 1
        
        # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–∞–≤–∏—Å–∏–º—ã—Ö –Ω–∞–≤—ã–∫–æ–≤
        for dependents in self.reverse_graph.values():
            analysis['dependent_count_distribution'][len(dependents)] += 1
        
        # –í—ã—á–∏—Å–ª—è–µ–º –≥–ª—É–±–∏–Ω—É –Ω–∞–≤—ã–∫–æ–≤
        analysis['skill_depths'] = self._calculate_skill_depths()
        analysis['max_depth'] = max(analysis['skill_depths'].values()) if analysis['skill_depths'] else 0
        
        # –ü–æ–∏—Å–∫ —Ü–∏–∫–ª–æ–≤
        analysis['cycles'] = self._find_cycles()
        
        return analysis
    
    def _calculate_skill_depths(self) -> Dict[int, int]:
        """–í—ã—á–∏—Å–ª—è–µ—Ç –≥–ª—É–±–∏–Ω—É –∫–∞–∂–¥–æ–≥–æ –Ω–∞–≤—ã–∫–∞ –≤ –≥—Ä–∞—Ñ–µ"""
        depths = {}
        visited = set()
        
        def dfs_depth(skill_id: int, current_path: Set[int]) -> int:
            if skill_id in current_path:
                return 0  # –¶–∏–∫–ª –Ω–∞–π–¥–µ–Ω
            
            if skill_id in depths:
                return depths[skill_id]
            
            current_path.add(skill_id)
            prereqs = self.skills_graph.get(skill_id, set())
            
            if not prereqs:
                depth = 0  # –ö–æ—Ä–Ω–µ–≤–æ–π –Ω–∞–≤—ã–∫
            else:
                max_prereq_depth = 0
                for prereq_id in prereqs:
                    prereq_depth = dfs_depth(prereq_id, current_path)
                    max_prereq_depth = max(max_prereq_depth, prereq_depth)
                depth = max_prereq_depth + 1
            
            current_path.remove(skill_id)
            depths[skill_id] = depth
            return depth
        
        for skill_id in self.skills_graph.keys():
            if skill_id not in depths:
                dfs_depth(skill_id, set())
        
        return depths
    
    def _find_cycles(self) -> List[List[int]]:
        """–ù–∞—Ö–æ–¥–∏—Ç —Ü–∏–∫–ª—ã –≤ –≥—Ä–∞—Ñ–µ –Ω–∞–≤—ã–∫–æ–≤"""
        cycles = []
        visited = set()
        rec_stack = set()
        
        def dfs_cycle(skill_id: int, path: List[int]) -> bool:
            if skill_id in rec_stack:
                # –¶–∏–∫–ª –Ω–∞–π–¥–µ–Ω
                cycle_start = path.index(skill_id)
                cycle = path[cycle_start:] + [skill_id]
                cycles.append(cycle)
                return True
            
            if skill_id in visited:
                return False
            
            visited.add(skill_id)
            rec_stack.add(skill_id)
            path.append(skill_id)
            
            for prereq_id in self.skills_graph.get(skill_id, set()):
                if dfs_cycle(prereq_id, path):
                    return True
            
            rec_stack.remove(skill_id)
            path.pop()
            return False
        
        for skill_id in self.skills_graph.keys():
            if skill_id not in visited:
                dfs_cycle(skill_id, [])
        
        return cycles
    
    def get_skill_learning_path(self, target_skill_id: int) -> List[int]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø—É—Ç—å –∏–∑—É—á–µ–Ω–∏—è –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–µ–≤–æ–≥–æ –Ω–∞–≤—ã–∫–∞
        
        Args:
            target_skill_id: ID —Ü–µ–ª–µ–≤–æ–≥–æ –Ω–∞–≤—ã–∫–∞
            
        Returns:
            List[int]: –£–ø–æ—Ä—è–¥–æ—á–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –Ω–∞–≤—ã–∫–æ–≤ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è
        """
        if not self.skills_graph:
            self.parse_skills_graph()
        
        learning_path = []
        visited = set()
        
        def dfs_path(skill_id: int):
            if skill_id in visited:
                return
            
            # –°–Ω–∞—á–∞–ª–∞ –∏–∑—É—á–∞–µ–º –≤—Å–µ prerequisites
            for prereq_id in self.skills_graph.get(skill_id, set()):
                dfs_path(prereq_id)
            
            # –ó–∞—Ç–µ–º –¥–æ–±–∞–≤–ª—è–µ–º —Å–∞–º –Ω–∞–≤—ã–∫
            if skill_id not in visited:
                learning_path.append(skill_id)
                visited.add(skill_id)
        
        dfs_path(target_skill_id)
        return learning_path
    
    def analyze_student_progress(self) -> Dict:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ø–æ –Ω–∞–≤—ã–∫–∞–º"""
        print("\nüë®‚Äçüéì –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤...")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ—Å–≤–æ–µ–Ω–∏—é –Ω–∞–≤—ã–∫–æ–≤
        skill_mastery_stats = {}
        
        for skill_id in self.skills_graph.keys():
            masteries = StudentSkillMastery.objects.filter(skill_id=skill_id)
            
            if masteries.exists():
                avg_mastery = masteries.aggregate(avg=Avg('current_mastery_prob'))['avg']
                count_students = masteries.count()
                mastered_count = masteries.filter(current_mastery_prob__gte=0.8).count()
            else:
                avg_mastery = 0.0
                count_students = 0
                mastered_count = 0
            
            skill_mastery_stats[skill_id] = {
                'average_mastery': avg_mastery or 0.0,
                'students_count': count_students,
                'mastered_count': mastered_count,
                'mastery_rate': mastered_count / count_students if count_students > 0 else 0.0
            }
        
        return skill_mastery_stats
    
    def generate_graph_visualization_data(self) -> Dict:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∞"""
        print("\nüé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏...")
        
        if not self.skills_graph:
            self.parse_skills_graph()
        
        # –°–æ–∑–¥–∞–µ–º —É–∑–ª—ã
        nodes = []
        for skill_id, skill in self.skill_info.items():
            depth = self._calculate_skill_depths().get(skill_id, 0)
            
            nodes.append({
                'id': skill_id,
                'name': skill.name,
                'description': skill.description or '',
                'course': skill.courses.first().name if skill.courses.exists() else '–ë–µ–∑ –∫—É—Ä—Å–∞',
                'depth': depth,
                'prerequisites_count': len(self.skills_graph.get(skill_id, set())),
                'dependents_count': len(self.reverse_graph.get(skill_id, set())),
                'tasks_count': len(self.skill_tasks_mapping.get(skill_id, set()))
            })
        
        # –°–æ–∑–¥–∞–µ–º —Å–≤—è–∑–∏
        edges = []
        for skill_id, prereqs in self.skills_graph.items():
            for prereq_id in prereqs:
                edges.append({
                    'source': prereq_id,
                    'target': skill_id,
                    'type': 'prerequisite'
                })
        
        return {
            'nodes': nodes,
            'edges': edges,            'metadata': {
                'total_nodes': len(nodes),
                'total_edges': len(edges),
                'max_depth': max(node['depth'] for node in nodes) if nodes else 0
            }
        }
    
    def export_graph_data(self, output_dir: Optional[str] = None):
        """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –≥—Ä–∞—Ñ–∞ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö"""
        if output_dir is None:
            output_dir = str(Path(__file__).parent.parent.parent / 'temp_dir')
        
        output_path = Path(output_dir)
        output_path.mkdir(exist_ok=True)
        
        print(f"\nüíæ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ {output_path}...")
        
        # –≠–∫—Å–ø–æ—Ä—Ç –≤ JSON
        graph_data = {
            'skills_graph': {str(k): list(v) for k, v in self.skills_graph.items()},
            'reverse_graph': {str(k): list(v) for k, v in self.reverse_graph.items()},
            'task_skills_mapping': {str(k): list(v) for k, v in self.task_skills_mapping.items()},
            'skill_info': {
                str(k): {
                    'name': v.name,
                    'description': v.description or '',
                    'course_ids': list(v.courses.values_list('id', flat=True))
                } for k, v in self.skill_info.items()
            }
        }
        
        with open(output_path / 'skills_graph.json', 'w', encoding='utf-8') as f:
            json.dump(graph_data, f, ensure_ascii=False, indent=2)
        
        # –≠–∫—Å–ø–æ—Ä—Ç –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
        viz_data = self.generate_graph_visualization_data()
        with open(output_path / 'skills_graph_viz.json', 'w', encoding='utf-8') as f:
            json.dump(viz_data, f, ensure_ascii=False, indent=2)
        
        # –≠–∫—Å–ø–æ—Ä—Ç –≤ DOT —Ñ–æ—Ä–º–∞—Ç –¥–ª—è Graphviz
        self._export_to_dot(output_path / 'skills_graph.dot')
        
        print(f"‚úÖ –î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ {output_path}")
    
    def _export_to_dot(self, output_path: Path):
        """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –≥—Ä–∞—Ñ –≤ DOT —Ñ–æ—Ä–º–∞—Ç –¥–ª—è Graphviz"""
        with open(output_path, 'w', encoding='utf-8') as f:
            f.write('digraph SkillsGraph {\n')
            f.write('    rankdir=TB;\n')
            f.write('    node [shape=box, style=rounded];\n\n')
            
            # –£–∑–ª—ã
            for skill_id, skill in self.skill_info.items():
                label = f"{skill.name}\\n({skill_id})"
                f.write(f'    {skill_id} [label="{label}"];\n')
            
            f.write('\n')
            
            # –°–≤—è–∑–∏
            for skill_id, prereqs in self.skills_graph.items():
                for prereq_id in prereqs:
                    f.write(f'    {prereq_id} -> {skill_id};\n')
            
            f.write('}\n')
    
    def print_analysis_report(self):
        """–í—ã–≤–æ–¥–∏—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –≥—Ä–∞—Ñ–∞"""
        print("\n" + "="*80)
        print("üìä –û–¢–ß–ï–¢ –ü–û –ê–ù–ê–õ–ò–ó–£ –ì–†–ê–§–ê –ù–ê–í–´–ö–û–í")
        print("="*80)
        
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ
        self.parse_skills_graph()
        self.parse_task_skills_mapping()
        
        # –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        structure = self.analyze_graph_structure()
        
        print(f"\nüî¢ –û–°–ù–û–í–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"   ‚Ä¢ –í—Å–µ–≥–æ –Ω–∞–≤—ã–∫–æ–≤: {structure['total_skills']}")
        print(f"   ‚Ä¢ –í—Å–µ–≥–æ prerequisite —Å–≤—è–∑–µ–π: {structure['total_prerequisites']}")
        print(f"   ‚Ä¢ –ù–∞–≤—ã–∫–æ–≤ —Å prerequisites: {structure['skills_with_prerequisites']}")
        print(f"   ‚Ä¢ –ö–æ—Ä–Ω–µ–≤—ã—Ö –Ω–∞–≤—ã–∫–æ–≤: {len(structure['root_skills'])}")
        print(f"   ‚Ä¢ –õ–∏—Å—Ç–æ–≤—ã—Ö –Ω–∞–≤—ã–∫–æ–≤: {len(structure['leaf_skills'])}")
        print(f"   ‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥–ª—É–±–∏–Ω–∞: {structure['max_depth']}")
        
        # –¶–∏–∫–ª—ã
        if structure['cycles']:
            print(f"\n‚ö†Ô∏è  –ù–ê–ô–î–ï–ù–´ –¶–ò–ö–õ–´ ({len(structure['cycles'])}):")
            for i, cycle in enumerate(structure['cycles'], 1):
                cycle_names = [self.skill_info[sid].name for sid in cycle]
                print(f"   {i}. {' -> '.join(cycle_names)}")
        else:
            print(f"\n‚úÖ –¶–∏–∫–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
        # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ prerequisites
        print(f"\nüìà –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ü–û –ö–û–õ–ò–ß–ï–°–¢–í–£ PREREQUISITES:")
        for count, skills_num in sorted(structure['prerequisite_count_distribution'].items()):
            print(f"   ‚Ä¢ {count} prerequisites: {skills_num} –Ω–∞–≤—ã–∫–æ–≤")
        
        # –¢–æ–ø –Ω–∞–≤—ã–∫–æ–≤ –ø–æ –≥–ª—É–±–∏–Ω–µ
        print(f"\nüèîÔ∏è  –¢–û–ü –ù–ê–í–´–ö–û–í –ü–û –ì–õ–£–ë–ò–ù–ï:")
        sorted_by_depth = sorted(structure['skill_depths'].items(), key=lambda x: x[1], reverse=True)
        for skill_id, depth in sorted_by_depth[:5]:
            skill_name = self.skill_info[skill_id].name
            print(f"   ‚Ä¢ {skill_name} (–≥–ª—É–±–∏–Ω–∞: {depth})")
        
        # –ö–æ—Ä–Ω–µ–≤—ã–µ –Ω–∞–≤—ã–∫–∏
        if structure['root_skills']:
            print(f"\nüå± –ö–û–†–ù–ï–í–´–ï –ù–ê–í–´–ö–ò:")
            for skill_id in structure['root_skills'][:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                skill_name = self.skill_info[skill_id].name
                tasks_count = len(self.skill_tasks_mapping.get(skill_id, set()))
                print(f"   ‚Ä¢ {skill_name} (–∑–∞–¥–∞–Ω–∏–π: {tasks_count})")
        
        # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
        student_progress = self.analyze_student_progress()
        
        print(f"\nüë®‚Äçüéì –ü–†–û–ì–†–ï–°–° –°–¢–£–î–ï–ù–¢–û–í:")
        skills_with_students = [(sid, data) for sid, data in student_progress.items() 
                               if data['students_count'] > 0]
        
        if skills_with_students:
            # –¢–æ–ø –ø–æ –æ—Å–≤–æ–µ–Ω–Ω–æ—Å—Ç–∏
            top_mastered = sorted(skills_with_students, 
                                key=lambda x: x[1]['mastery_rate'], reverse=True)[:5]
            
            print(f"   üèÜ –¢–û–ü –û–°–í–û–ï–ù–ù–´–• –ù–ê–í–´–ö–û–í:")
            for skill_id, data in top_mastered:
                skill_name = self.skill_info[skill_id].name
                print(f"     ‚Ä¢ {skill_name}: {data['mastery_rate']:.1%} "
                      f"({data['mastered_count']}/{data['students_count']} —Å—Ç—É–¥–µ–Ω—Ç–æ–≤)")
            
            # –ù–∞–≤—ã–∫–∏ —Ç—Ä–µ–±—É—é—â–∏–µ –≤–Ω–∏–º–∞–Ω–∏—è
            low_mastery = sorted(skills_with_students, 
                               key=lambda x: x[1]['mastery_rate'])[:5]
            
            print(f"\n   ‚ö†Ô∏è  –ù–ê–í–´–ö–ò, –¢–†–ï–ë–£–Æ–©–ò–ï –í–ù–ò–ú–ê–ù–ò–Ø:")
            for skill_id, data in low_mastery:
                skill_name = self.skill_info[skill_id].name
                print(f"     ‚Ä¢ {skill_name}: {data['mastery_rate']:.1%} "
                      f"({data['mastered_count']}/{data['students_count']} —Å—Ç—É–¥–µ–Ω—Ç–æ–≤)")
        else:
            print("   üìù –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤")
        
        print("\n" + "="*80)


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–∞"""
    try:
        print("üöÄ –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –≥—Ä–∞—Ñ–∞ –Ω–∞–≤—ã–∫–æ–≤...")
        
        parser = SkillsGraphParser()
        
        # –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏ –æ—Ç—á–µ—Ç
        parser.print_analysis_report()
        
        # –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
        parser.export_graph_data()
        
        print("\n‚ú® –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        
        return parser
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {e}")
        import traceback
        traceback.print_exc()
        return None


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –∫–∞–∫ standalone —Å–∫—Ä–∏–ø—Ç
    parser = main()
