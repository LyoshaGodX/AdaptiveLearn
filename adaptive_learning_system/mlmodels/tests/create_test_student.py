#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏

–°–æ–∑–¥–∞–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞ alex_klementev –∏ —Å–∏–º—É–ª–∏—Ä—É–µ—Ç –µ–≥–æ –æ–±—É—á–µ–Ω–∏–µ:
- –°–æ–∑–¥–∞–µ—Ç –ø–æ–ø—ã—Ç–∫–∏ —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π  
- BKT –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ TaskAttempt.save()
- –°–ª–µ–¥—É–µ—Ç –ª–æ–≥–∏–∫–µ –æ–±—É—á–µ–Ω–∏—è: –æ—Ç –ø—Ä–æ—Å—Ç—ã—Ö –Ω–∞–≤—ã–∫–æ–≤ –∫ —Å–ª–æ–∂–Ω—ã–º
- –£—á–∏—Ç—ã–≤–∞–µ—Ç prerequisite –Ω–∞–≤—ã–∫–æ–≤

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python mlmodels/tests/create_test_student.py
    –∏–ª–∏
    python mlmodels/tests/create_test_student.py --recreate
"""

import os
import sys
import django
from pathlib import Path
import random
from datetime import datetime, timedelta
from django.utils import timezone

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
def setup_django():
    project_root = Path(__file__).parent.parent.parent
    sys.path.insert(0, str(project_root))
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'adaptive_learning.settings')
    django.setup()

setup_django()

from django.contrib.auth.models import User
from django.db import transaction
from student.models import StudentProfile, StudentCourseEnrollment
from skills.models import Skill, Course
from methodist.models import Task
from mlmodels.models import TaskAttempt, StudentSkillMastery


class TestStudentCreator:
    """–°–æ–∑–¥–∞—Ç–µ–ª—å —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞ —Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–π —Å–∏–º—É–ª—è—Ü–∏–µ–π –æ–±—É—á–µ–Ω–∏—è"""
    
    def __init__(self):
        self.username = "alex_klementev"
        self.student_profile = None
        self.created_attempts = []
        
        # –ë–∞–∑–æ–≤—ã–µ –Ω–∞–≤—ã–∫–∏ (–±–µ–∑ prerequisite)
        self.basic_skills = [
            "–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö",
            "–í–≤–µ–¥–µ–Ω–∏–µ –≤ –û–û–ü", 
            "–û—Å–Ω–æ–≤—ã –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤",
            "–†–∞–±–æ—Ç–∞ —Å –≤–≤–æ–¥–æ–º/–≤—ã–≤–æ–¥–æ–º –¥–∞–Ω–Ω—ã—Ö"
        ]
        
        # –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –Ω–∞–≤—ã–∫–∏ (—Ç—Ä–µ–±—É—é—Ç –±–∞–∑–æ–≤—ã–µ)
        self.advanced_skills = [
            "–û–ø–µ—Ä–∞—Ç–æ—Ä—ã –∏ –≤—ã—Ä–∞–∂–µ–Ω–∏—è",
            "–õ–æ–≥–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã", 
            "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö (tuple, set)",
            "–°–ª–æ–∂–Ω–æ—Å—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤",
            "–û–±—ä–µ–∫—Ç–Ω–æ-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ"
        ]
    
    def create_or_recreate_student(self, recreate=False):
        """–°–æ–∑–¥–∞–µ—Ç –∏–ª–∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞"""
        if recreate:
            print("üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–∞...")
            try:
                user = User.objects.get(username=self.username)
                # –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –∏ BKT –¥–∞–Ω–Ω—ã–µ
                TaskAttempt.objects.filter(student__user=user).delete()
                StudentSkillMastery.objects.filter(student__user=user).delete()
                user.delete()
                print("‚úÖ –°—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã")
            except User.DoesNotExist:
                pass
        
        print(f"üë®‚Äçüéì –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞ {self.username}...")
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user, created = User.objects.get_or_create(
            username=self.username,
            defaults={
                'first_name': "–ê–ª–µ–∫—Å–µ–π",
                'last_name': "–ö–ª–µ–º–µ–Ω—Ç—å–µ–≤", 
                'email': "alex.klementev@example.com",
                'is_active': True
            }
        )
        
        if not created and not recreate:
            print(f"‚ö†Ô∏è –°—Ç—É–¥–µ–Ω—Ç {self.username} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            self.student_profile = user.student_profile
            return self.student_profile
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å —Å—Ç—É–¥–µ–Ω—Ç–∞
        student_profile, _ = StudentProfile.objects.get_or_create(
            user=user,
            defaults={
                'full_name': "–ö–ª–µ–º–µ–Ω—Ç—å–µ–≤ –ê–ª–µ–∫—Å–µ–π –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á",
                'email': "alex.klementev@example.com",
                'organization': "–†–ì–ü–£ –∏–º. –ì–µ—Ä—Ü–µ–Ω–∞",
                'is_active': True
            }
        )
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–∞ –≤—Å–µ –∫—É—Ä—Å—ã
        for course in Course.objects.all():
            StudentCourseEnrollment.objects.get_or_create(
                student=student_profile,
                course=course,
                defaults={
                    'enrolled_at': timezone.now(),
                    'status': 'enrolled'
                }
            )
        
        self.student_profile = student_profile
        print(f"‚úÖ –°—Ç—É–¥–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω (ID: {user.id})")
        return student_profile
    
    def simulate_skill_learning(self, skill_name: str, success_rate: float, num_attempts: int):
        """–°–∏–º—É–ª–∏—Ä—É–µ—Ç –∏–∑—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –Ω–∞–≤—ã–∫–∞"""
        print(f"  üìö –ò–∑—É—á–µ–Ω–∏–µ –Ω–∞–≤—ã–∫–∞: {skill_name}")
        
        try:
            skill = Skill.objects.get(name=skill_name)
        except Skill.DoesNotExist:
            print(f"    ‚ùå –ù–∞–≤—ã–∫ '{skill_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return []
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –Ω–∞–≤—ã–∫–∞
        tasks = list(Task.objects.filter(skills=skill))
        if not tasks:
            print(f"    ‚ùå –ù–µ—Ç –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –Ω–∞–≤—ã–∫–∞ '{skill_name}'")
            return []
        
        print(f"    üìã –ù–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: {len(tasks)}")
        
        attempts = []
        current_time = timezone.now() - timedelta(days=30)  # –ù–∞—á–∏–Ω–∞–µ–º –º–µ—Å—è—Ü –Ω–∞–∑–∞–¥
        
        for i in range(num_attempts):
            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ
            task = random.choice(tasks)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
            is_correct = random.random() < success_rate
            
            # –í—Ä–µ–º—è —Ä–µ—à–µ–Ω–∏—è (30 —Å–µ–∫ - 10 –º–∏–Ω—É—Ç)
            time_spent = random.randint(30, 600)
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ–ø—ã—Ç–∫—É
            attempt = TaskAttempt.objects.create(
                student=self.student_profile,
                task=task,
                is_correct=is_correct,
                given_answer=f"–û—Ç–≤–µ—Ç –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ {task.id}" if is_correct else "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç",
                correct_answer=f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ {task.title}",
                started_at=current_time,
                completed_at=current_time + timedelta(seconds=time_spent),
                time_spent=time_spent,
                metadata={
                    'skill': skill_name,
                    'attempt_number': i + 1,
                    'total_attempts': num_attempts,
                    'simulated': True,
                    'success_rate_target': success_rate
                }
            )
            
            attempts.append(attempt)
            self.created_attempts.append(attempt)
            
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–∏
            current_time += timedelta(minutes=random.randint(15, 120))
        
        success_count = sum(1 for a in attempts if a.is_correct)
        actual_rate = success_count / len(attempts) if attempts else 0
        print(f"    ‚úÖ –°–æ–∑–¥–∞–Ω–æ –ø–æ–ø—ã—Ç–æ–∫: {len(attempts)} (—É—Å–ø–µ—à–Ω—ã—Ö: {success_count}, {actual_rate:.1%})")
        
        return attempts
    
    def simulate_learning_progression(self):
        """–°–∏–º—É–ª–∏—Ä—É–µ—Ç —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—É—é –ø—Ä–æ–≥—Ä–µ—Å—Å–∏—é –æ–±—É—á–µ–Ω–∏—è"""
        print("\nüéØ –°–∏–º—É–ª—è—Ü–∏—è –æ–±—É—á–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞...")
        
        # –≠—Ç–∞–ø 1: –ò–∑—É—á–µ–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –Ω–∞–≤—ã–∫–æ–≤ (–≤—ã—Å–æ–∫–∏–π —É—Å–ø–µ—Ö)
        print("\nüìò –≠–¢–ê–ü 1: –ë–∞–∑–æ–≤—ã–µ –Ω–∞–≤—ã–∫–∏")
        for skill_name in self.basic_skills:
            success_rate = random.uniform(0.8, 0.95)  # 80-95% —É—Å–ø–µ—Ö
            num_attempts = random.randint(8, 15)
            self.simulate_skill_learning(skill_name, success_rate, num_attempts)
        
        # –≠—Ç–∞–ø 2: –ò–∑—É—á–µ–Ω–∏–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö –Ω–∞–≤—ã–∫–æ–≤ (—Å—Ä–µ–¥–Ω–∏–π —É—Å–ø–µ—Ö)
        print("\nüìô –≠–¢–ê–ü 2: –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –Ω–∞–≤—ã–∫–∏")
        for skill_name in self.advanced_skills:
            success_rate = random.uniform(0.4, 0.8)  # 40-80% —É—Å–ø–µ—Ö
            num_attempts = random.randint(5, 12)
            self.simulate_skill_learning(skill_name, success_rate, num_attempts)
    
    def analyze_results(self):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—É—á–µ–Ω–∏—è"""
        print("\nüìä –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í")
        print("="*60)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ø—ã—Ç–æ–∫
        total_attempts = len(self.created_attempts)
        correct_attempts = sum(1 for a in self.created_attempts if a.is_correct)
        success_rate = correct_attempts / total_attempts if total_attempts > 0 else 0
        
        print(f"üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"  ‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ø—ã—Ç–æ–∫: {total_attempts}")
        print(f"  ‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö: {correct_attempts}")
        print(f"  ‚Ä¢ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1%}")
        
        # BKT –¥–∞–Ω–Ω—ã–µ (–¥–æ–ª–∂–Ω—ã —Å–æ–∑–¥–∞—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
        bkt_records = StudentSkillMastery.objects.filter(student=self.student_profile)
        print(f"\nüß† BKT –∑–∞–ø–∏—Å–∏ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω—ã): {bkt_records.count()}")
        
        for bkt in bkt_records.order_by('-current_mastery_prob'):
            prob = bkt.current_mastery_prob
            status = "üî•" if prob >= 0.85 else "üî∂" if prob >= 0.5 else "üî¥"
            print(f"  {status} {bkt.skill.name}: P = {prob:.4f}")
        
        print("\n‚ú® –°–ò–ú–£–õ–Ø–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!")
        return {
            'total_attempts': total_attempts,
            'correct_attempts': correct_attempts,
            'success_rate': success_rate,
            'bkt_records': bkt_records.count(),
            'student_id': self.student_profile.user.id
        }


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    recreate = '--recreate' in sys.argv
    
    print("üöÄ –°–û–ó–î–ê–ù–ò–ï –¢–ï–°–¢–û–í–û–ì–û –°–¢–£–î–ï–ù–¢–ê –° –°–ò–ú–£–õ–Ø–¶–ò–ï–ô –û–ë–£–ß–ï–ù–ò–Ø")
    print("="*80)
    
    creator = TestStudentCreator()
    
    try:
        with transaction.atomic():
            # –°–æ–∑–¥–∞–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞
            creator.create_or_recreate_student(recreate=recreate)
            
            # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ–±—É—á–µ–Ω–∏–µ
            creator.simulate_learning_progression()
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            results = creator.analyze_results()
            
            print(f"\nüéâ –£–°–ü–ï–•! –°—Ç—É–¥–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω —Å ID: {results['student_id']}")
            
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main()
