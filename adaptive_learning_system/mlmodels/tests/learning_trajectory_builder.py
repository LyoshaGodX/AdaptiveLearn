"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ –æ–±—É—á–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≥—Ä–∞—Ñ–∞ –Ω–∞–≤—ã–∫–æ–≤.

–°–∏–º—É–ª–∏—Ä—É–µ—Ç –ª–æ–≥–∏—á–Ω–æ–µ –æ—Å–≤–æ–µ–Ω–∏–µ –Ω–∞–≤—ã–∫–æ–≤ —Å —É—á–µ—Ç–æ–º prerequisites:
- –°—Ç—É–¥–µ–Ω—Ç –Ω–µ –º–æ–∂–µ—Ç –æ—Å–≤–æ–∏—Ç—å –Ω–∞–≤—ã–∫ –±–µ–∑ –æ—Å–≤–æ–µ–Ω–∏—è –≤—Å–µ—Ö prerequisite –Ω–∞–≤—ã–∫–æ–≤
- –í—Å–µ –ø—Ä–µ–¥–∫–∏ –æ—Å–≤–æ–µ–Ω–Ω–æ–≥–æ –Ω–∞–≤—ã–∫–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Å–≤–æ–µ–Ω—ã (—É—Ä–æ–≤–µ–Ω—å >0.9)
- –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—É—é —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—é –æ–±—É—á–µ–Ω–∏—è

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python manage.py shell
    exec(open('mlmodels/tests/learning_trajectory_builder.py').read())
"""

import os
import sys
import django
from typing import Dict, Set, List, Tuple, Optional
from collections import defaultdict, deque
import json
import random
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
def setup_django():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    project_root = Path(__file__).parent.parent.parent
    sys.path.insert(0, str(project_root))
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'adaptive_learning.settings')
    django.setup()

setup_django()

from skills.models import Skill, Course
from methodist.models import Task
from mlmodels.tests.parse_skills_graph import SkillsGraphParser
from mlmodels.models import StudentSkillMastery, StudentProfile
from student.models import StudentProfile as StudentUser


class LearningTrajectoryBuilder:
    """–ü–æ—Å—Ç—Ä–æ–∏—Ç–µ–ª—å —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ –æ–±—É—á–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –≥—Ä–∞—Ñ–∞ –Ω–∞–≤—ã–∫–æ–≤"""
    
    def __init__(self):
        self.graph_parser = SkillsGraphParser()
        self.skills_graph = {}  # {skill_id: {prerequisite_ids}}
        self.reverse_graph = {}  # {skill_id: {dependent_skill_ids}}
        self.skill_depths = {}  # {skill_id: depth_level}
        self.skill_info = {}
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∏–º—É–ª—è—Ü–∏–∏
        self.default_mastery = 0.1  # –î–µ—Ñ–æ–ª—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –æ—Å–≤–æ–µ–Ω–∏—è
        self.mastery_threshold = 0.9  # –ü–æ—Ä–æ–≥ –ø–æ–ª–Ω–æ–≥–æ –æ—Å–≤–æ–µ–Ω–∏—è
        self.partial_mastery_level = 0.6  # –£—Ä–æ–≤–µ–Ω—å —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ –æ—Å–≤–æ–µ–Ω–∏—è
        
    def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥—Ä–∞—Ñ–∞ –Ω–∞–≤—ã–∫–æ–≤ –∏ –∞–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã"""
        print("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥—Ä–∞—Ñ–∞ –Ω–∞–≤—ã–∫–æ–≤...")
        
        # –ü–∞—Ä—Å–∏–º –≥—Ä–∞—Ñ –Ω–∞–≤—ã–∫–æ–≤
        self.skills_graph = self.graph_parser.parse_skills_graph()
        self.reverse_graph = self.graph_parser.reverse_graph
        self.skill_info = self.graph_parser.skill_info
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        analysis = self.graph_parser.analyze_graph_structure()
        self.skill_depths = analysis['skill_depths']
        
        print(f"‚úÖ –ì—Ä–∞—Ñ –Ω–∞–≤—ã–∫–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω:")
        print(f"   ‚Ä¢ –ù–∞–≤—ã–∫–æ–≤: {len(self.skills_graph)}")
        print(f"   ‚Ä¢ –°–≤—è–∑–µ–π: {sum(len(prereqs) for prereqs in self.skills_graph.values())}")
        print(f"   ‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥–ª—É–±–∏–Ω–∞: {max(self.skill_depths.values()) if self.skill_depths else 0}")
        
    def get_root_skills(self) -> List[int]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ—Ä–Ω–µ–≤—ã–µ –Ω–∞–≤—ã–∫–∏ (–±–µ–∑ prerequisites)"""
        return [skill_id for skill_id, prereqs in self.skills_graph.items() if not prereqs]
    
    def get_available_skills(self, current_mastery: Dict[int, float]) -> List[int]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–≤—ã–∫–∏, –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è (–≤—Å–µ prerequisites –æ—Å–≤–æ–µ–Ω—ã)
        
        Args:
            current_mastery: –¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –æ—Å–≤–æ–µ–Ω–∏—è –Ω–∞–≤—ã–∫–æ–≤ {skill_id: mastery_level}
            
        Returns:
            List[int]: –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –Ω–∞–≤—ã–∫–æ–≤
        """
        available = []
        
        for skill_id, prereqs in self.skills_graph.items():
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –æ—Å–≤–æ–µ–Ω–Ω—ã–µ –Ω–∞–≤—ã–∫–∏
            if current_mastery.get(skill_id, self.default_mastery) >= self.mastery_threshold:
                continue
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ prerequisites –æ—Å–≤–æ–µ–Ω—ã
            all_prereqs_mastered = True
            for prereq_id in prereqs:
                if current_mastery.get(prereq_id, self.default_mastery) < self.mastery_threshold:
                    all_prereqs_mastered = False
                    break
            
            if all_prereqs_mastered:
                available.append(skill_id)
        
        return available
    
    def validate_mastery_consistency(self, mastery: Dict[int, float]) -> Tuple[bool, List[str]]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ª–æ–≥–∏—á–µ—Å–∫—É—é —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –æ—Å–≤–æ–µ–Ω–∏—è –Ω–∞–≤—ã–∫–æ–≤
        
        Args:
            mastery: –£—Ä–æ–≤–µ–Ω—å –æ—Å–≤–æ–µ–Ω–∏—è –Ω–∞–≤—ã–∫–æ–≤ {skill_id: mastery_level}
            
        Returns:
            Tuple[bool, List[str]]: (—è–≤–ª—è–µ—Ç—Å—è_–ª–∏_—Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω—ã–º, —Å–ø–∏—Å–æ–∫_–æ—à–∏–±–æ–∫)
        """
        errors = []
        
        for skill_id, skill_mastery in mastery.items():
            if skill_mastery >= self.mastery_threshold:
                # –î–ª—è –æ—Å–≤–æ–µ–Ω–Ω–æ–≥–æ –Ω–∞–≤—ã–∫–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ prerequisites —Ç–æ–∂–µ –æ—Å–≤–æ–µ–Ω—ã
                prereqs = self.skills_graph.get(skill_id, set())
                for prereq_id in prereqs:
                    prereq_mastery = mastery.get(prereq_id, self.default_mastery)
                    if prereq_mastery < self.mastery_threshold:
                        skill_name = self.skill_info[skill_id].name
                        prereq_name = self.skill_info[prereq_id].name
                        errors.append(
                            f"–ù–∞–≤—ã–∫ '{skill_name}' –æ—Å–≤–æ–µ–Ω ({skill_mastery:.2f}), "
                            f"–Ω–æ prerequisite '{prereq_name}' –Ω–µ –æ—Å–≤–æ–µ–Ω ({prereq_mastery:.2f})"                        )
        
        return len(errors) == 0, errors
    
    def simulate_student_learning(self, target_mastered_count: int = 10, 
                                 target_partial_count: int = 5) -> Tuple[Dict[int, float], List[Dict]]:
        """
        –°–∏–º—É–ª–∏—Ä—É–µ—Ç –ª–æ–≥–∏—á–Ω–æ–µ –æ—Å–≤–æ–µ–Ω–∏–µ –Ω–∞–≤—ã–∫–æ–≤ —Å—Ç—É–¥–µ–Ω—Ç–æ–º
        
        Args:
            target_mastered_count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å–≤–æ–µ–Ω–Ω—ã—Ö –Ω–∞–≤—ã–∫–æ–≤
            target_partial_count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å—Ç–∏—á–Ω–æ –æ—Å–≤–æ–µ–Ω–Ω—ã—Ö –Ω–∞–≤—ã–∫–æ–≤
            
        Returns:
            Dict[int, float]: –£—Ä–æ–≤–µ–Ω—å –æ—Å–≤–æ–µ–Ω–∏—è –Ω–∞–≤—ã–∫–æ–≤ {skill_id: mastery_level}
        """
        print(f"\nüéØ –°–∏–º—É–ª—è—Ü–∏—è –æ–±—É—á–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞:")
        print(f"   ‚Ä¢ –¶–µ–ª—å: {target_mastered_count} –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å–≤–æ–µ–Ω–Ω—ã—Ö –Ω–∞–≤—ã–∫–æ–≤")
        print(f"   ‚Ä¢ –¶–µ–ª—å: {target_partial_count} —á–∞—Å—Ç–∏—á–Ω–æ –æ—Å–≤–æ–µ–Ω–Ω—ã—Ö –Ω–∞–≤—ã–∫–æ–≤")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –Ω–∞–≤—ã–∫–∏ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º —É—Ä–æ–≤–Ω–µ–º
        mastery = {skill_id: self.default_mastery for skill_id in self.skills_graph.keys()}
        
        mastered_count = 0
        partial_count = 0
        learning_steps = []
        
        # –°–Ω–∞—á–∞–ª–∞ –æ—Å–≤–∞–∏–≤–∞–µ–º –∫–æ—Ä–Ω–µ–≤—ã–µ –Ω–∞–≤—ã–∫–∏
        root_skills = self.get_root_skills()
        print(f"   ‚Ä¢ –ö–æ—Ä–Ω–µ–≤—ã—Ö –Ω–∞–≤—ã–∫–æ–≤: {len(root_skills)}")
        
        # –°—Ç—Ä–∞—Ç–µ–≥–∏—è –æ—Å–≤–æ–µ–Ω–∏—è: –∏–¥–µ–º –ø–æ –≥–ª—É–±–∏–Ω–∞–º –æ—Ç –∫–æ—Ä–Ω–µ–π
        skills_by_depth = defaultdict(list)
        for skill_id, depth in self.skill_depths.items():
            skills_by_depth[depth].append(skill_id)
        
        max_depth = max(skills_by_depth.keys()) if skills_by_depth else 0
        
        for depth in range(max_depth + 1):
            if mastered_count >= target_mastered_count and partial_count >= target_partial_count:
                break
                
            available_at_depth = []
            for skill_id in skills_by_depth[depth]:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
                prereqs = self.skills_graph.get(skill_id, set())
                if all(mastery.get(p, self.default_mastery) >= self.mastery_threshold for p in prereqs):
                    available_at_depth.append(skill_id)
            
            if not available_at_depth:
                continue
                
            # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ—Å—Ç–∏
            random.shuffle(available_at_depth)
            
            for skill_id in available_at_depth:
                if mastered_count >= target_mastered_count and partial_count >= target_partial_count:
                    break
                
                # –†–µ—à–∞–µ–º, –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–ª–∏ —á–∞—Å—Ç–∏—á–Ω–æ –æ—Å–≤–∞–∏–≤–∞—Ç—å
                if mastered_count < target_mastered_count:
                    # –ü–æ–ª–Ω–æ–µ –æ—Å–≤–æ–µ–Ω–∏–µ —Å –Ω–µ–∫–æ—Ç–æ—Ä–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é
                    if random.random() < 0.7:  # 70% —à–∞–Ω—Å –ø–æ–ª–Ω–æ–≥–æ –æ—Å–≤–æ–µ–Ω–∏—è
                        new_mastery = random.uniform(self.mastery_threshold, 1.0)
                        mastery[skill_id] = new_mastery
                        mastered_count += 1
                        learning_steps.append({
                            'step': len(learning_steps) + 1,
                            'skill_id': skill_id,
                            'skill_name': self.skill_info[skill_id].name,
                            'mastery_level': new_mastery,
                            'type': 'full_mastery',
                            'depth': depth
                        })
                        continue
                
                if partial_count < target_partial_count:
                    # –ß–∞—Å—Ç–∏—á–Ω–æ–µ –æ—Å–≤–æ–µ–Ω–∏–µ
                    new_mastery = random.uniform(0.4, 0.8)
                    mastery[skill_id] = new_mastery
                    partial_count += 1
                    learning_steps.append({
                        'step': len(learning_steps) + 1,
                        'skill_id': skill_id,
                        'skill_name': self.skill_info[skill_id].name,
                        'mastery_level': new_mastery,
                        'type': 'partial_mastery',
                        'depth': depth
                    })
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å
        is_consistent, errors = self.validate_mastery_consistency(mastery)
        
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∏–º—É–ª—è—Ü–∏–∏:")
        print(f"   ‚Ä¢ –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å–≤–æ–µ–Ω–æ: {mastered_count} –Ω–∞–≤—ã–∫–æ–≤")
        print(f"   ‚Ä¢ –ß–∞—Å—Ç–∏—á–Ω–æ –æ—Å–≤–æ–µ–Ω–æ: {partial_count} –Ω–∞–≤—ã–∫–æ–≤")
        print(f"   ‚Ä¢ –®–∞–≥–æ–≤ –æ–±—É—á–µ–Ω–∏—è: {len(learning_steps)}")
        print(f"   ‚Ä¢ –°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å: {'‚úÖ OK' if is_consistent else '‚ùå –û—à–∏–±–∫–∏'}")
        
        if not is_consistent:
            print("   üö® –û—à–∏–±–∫–∏ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏:")
            for error in errors[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –æ—à–∏–±–∫–∏
                print(f"     - {error}")
        
        return mastery, learning_steps
    
    def get_learning_recommendations(self, current_mastery: Dict[int, float], 
                                   limit: int = 10) -> List[Dict]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏–∑—É—á–µ–Ω–∏—é –Ω–∞–≤—ã–∫–æ–≤
        
        Args:
            current_mastery: –¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –æ—Å–≤–æ–µ–Ω–∏—è
            limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
            
        Returns:
            List[Dict]: –°–ø–∏—Å–æ–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞–≤—ã–∫–æ–≤ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
        """
        available_skills = self.get_available_skills(current_mastery)
        
        recommendations = []
        for skill_id in available_skills[:limit]:
            skill = self.skill_info[skill_id]
            
            # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≤–∏—Å–∏–º—ã—Ö –Ω–∞–≤—ã–∫–æ–≤
            dependents = self.reverse_graph.get(skill_id, set())
            unlocked_dependents = 0
            for dep_id in dependents:
                dep_prereqs = self.skills_graph.get(dep_id, set())
                other_prereqs_ready = all(
                    current_mastery.get(p, self.default_mastery) >= self.mastery_threshold 
                    for p in dep_prereqs if p != skill_id
                )
                if other_prereqs_ready:
                    unlocked_dependents += 1
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞–Ω–∏–π –ø–æ –Ω–∞–≤—ã–∫—É
            tasks_count = len(self.graph_parser.skill_tasks_mapping.get(skill_id, set()))
            
            recommendations.append({
                'skill_id': skill_id,
                'skill_name': skill.name,
                'skill_description': skill.description or '',
                'current_mastery': current_mastery.get(skill_id, self.default_mastery),
                'depth': self.skill_depths.get(skill_id, 0),
                'prerequisites_count': len(self.skills_graph.get(skill_id, set())),
                'unlocks_count': unlocked_dependents,
                'tasks_count': tasks_count,
                'priority_score': self._calculate_priority_score(
                    skill_id, current_mastery, unlocked_dependents, tasks_count
                )
            })
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
        recommendations.sort(key=lambda x: x['priority_score'], reverse=True)
        
        return recommendations
    
    def _calculate_priority_score(self, skill_id: int, current_mastery: Dict[int, float],
                                 unlocks_count: int, tasks_count: int) -> float:
        """–í—ã—á–∏—Å–ª—è–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏–∑—É—á–µ–Ω–∏—è –Ω–∞–≤—ã–∫–∞"""
        score = 0.0
        
        # –ë–∞–∑–æ–≤—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø–æ –≥–ª—É–±–∏–Ω–µ (–º–µ–Ω—å—à–µ –≥–ª—É–±–∏–Ω–∞ = –≤—ã—à–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
        depth = self.skill_depths.get(skill_id, 0)
        score += max(0, 10 - depth) * 0.3
        
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º—ã—Ö –Ω–∞–≤—ã–∫–æ–≤
        score += unlocks_count * 0.4
        
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–∞–¥–∞–Ω–∏–π (–±–æ–ª—å—à–µ –∑–∞–¥–∞–Ω–∏–π = –±–æ–ª—å—à–µ –ø—Ä–∞–∫—Ç–∏–∫–∏)
        score += min(tasks_count, 10) * 0.2
        
        # –ë–æ–Ω—É—Å –∑–∞ —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å (–±–ª–∏–∂–µ –∫ –ø–æ—Ä–æ–≥—É = –≤—ã—à–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
        current_level = current_mastery.get(skill_id, self.default_mastery)
        if current_level > 0.3:
            score += (current_level - 0.1) * 0.1
        
        return score
    
    def generate_student_profile_report(self, mastery: Dict[int, float], 
                                      learning_steps: List[Dict]) -> Dict:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç –æ –ø—Ä–æ—Ñ–∏–ª–µ —Å—Ç—É–¥–µ–Ω—Ç–∞"""
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–∞–≤—ã–∫–æ–≤
        mastered_skills = []
        partial_skills = []
        unlearned_skills = []
        
        for skill_id, level in mastery.items():
            skill_data = {
                'skill_id': skill_id,
                'skill_name': self.skill_info[skill_id].name,
                'mastery_level': level,
                'depth': self.skill_depths.get(skill_id, 0)
            }
            
            if level >= self.mastery_threshold:
                mastered_skills.append(skill_data)
            elif level >= 0.3:
                partial_skills.append(skill_data)
            else:
                unlearned_skills.append(skill_data)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≥–ª—É–±–∏–Ω–∞–º
        depth_stats = defaultdict(lambda: {'mastered': 0, 'partial': 0, 'unlearned': 0})
        for skill_id, level in mastery.items():
            depth = self.skill_depths.get(skill_id, 0)
            if level >= self.mastery_threshold:
                depth_stats[depth]['mastered'] += 1
            elif level >= 0.3:
                depth_stats[depth]['partial'] += 1
            else:
                depth_stats[depth]['unlearned'] += 1
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recommendations = self.get_learning_recommendations(mastery)
        
        return {
            'summary': {
                'total_skills': len(mastery),
                'mastered_count': len(mastered_skills),
                'partial_count': len(partial_skills),
                'unlearned_count': len(unlearned_skills),
                'learning_steps': len(learning_steps)
            },
            'skills_by_level': {
                'mastered': sorted(mastered_skills, key=lambda x: x['depth']),
                'partial': sorted(partial_skills, key=lambda x: x['depth']),
                'unlearned': sorted(unlearned_skills, key=lambda x: x['depth'])
            },
            'depth_statistics': dict(depth_stats),
            'learning_trajectory': learning_steps,
            'recommendations': recommendations,
            'next_available_skills': self.get_available_skills(mastery)
        }
    
    def print_student_report(self, mastery: Dict[int, float], learning_steps: List[Dict]):
        """–í—ã–≤–æ–¥–∏—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç –æ —Å—Ç—É–¥–µ–Ω—Ç–µ"""
        
        report = self.generate_student_profile_report(mastery, learning_steps)
        
        print("\n" + "="*80)
        print("üë®‚Äçüéì –ü–†–û–§–ò–õ–¨ –°–¢–£–î–ï–ù–¢–ê - –¢–†–ê–ï–ö–¢–û–†–ò–Ø –û–ë–£–ß–ï–ù–ò–Ø")
        print("="*80)
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        summary = report['summary']
        print(f"\nüìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"   ‚Ä¢ –í—Å–µ–≥–æ –Ω–∞–≤—ã–∫–æ–≤: {summary['total_skills']}")
        print(f"   ‚Ä¢ –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å–≤–æ–µ–Ω–æ: {summary['mastered_count']} ({summary['mastered_count']/summary['total_skills']*100:.1f}%)")
        print(f"   ‚Ä¢ –ß–∞—Å—Ç–∏—á–Ω–æ –æ—Å–≤–æ–µ–Ω–æ: {summary['partial_count']} ({summary['partial_count']/summary['total_skills']*100:.1f}%)")
        print(f"   ‚Ä¢ –ù–µ –∏–∑—É—á–µ–Ω–æ: {summary['unlearned_count']} ({summary['unlearned_count']/summary['total_skills']*100:.1f}%)")
        print(f"   ‚Ä¢ –®–∞–≥–æ–≤ –æ–±—É—á–µ–Ω–∏—è: {summary['learning_steps']}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≥–ª—É–±–∏–Ω–∞–º
        print(f"\nüìà –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ü–û –ì–õ–£–ë–ò–ù–ê–ú:")
        for depth in sorted(report['depth_statistics'].keys()):
            stats = report['depth_statistics'][depth]
            total = stats['mastered'] + stats['partial'] + stats['unlearned']
            print(f"   –ì–ª—É–±–∏–Ω–∞ {depth}: {stats['mastered']}‚úÖ {stats['partial']}üü° {stats['unlearned']}‚ö™ (–≤—Å–µ–≥–æ: {total})")
        
        # –û—Å–≤–æ–µ–Ω–Ω—ã–µ –Ω–∞–≤—ã–∫–∏
        mastered = report['skills_by_level']['mastered']
        if mastered:
            print(f"\n‚úÖ –ü–û–õ–ù–û–°–¢–¨–Æ –û–°–í–û–ï–ù–ù–´–ï –ù–ê–í–´–ö–ò ({len(mastered)}):")
            for skill in mastered[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                print(f"   ‚Ä¢ {skill['skill_name']} (—É—Ä–æ–≤–µ–Ω—å: {skill['mastery_level']:.2f}, –≥–ª—É–±–∏–Ω–∞: {skill['depth']})")
        
        # –ß–∞—Å—Ç–∏—á–Ω–æ –æ—Å–≤–æ–µ–Ω–Ω—ã–µ –Ω–∞–≤—ã–∫–∏
        partial = report['skills_by_level']['partial']
        if partial:
            print(f"\nüü° –ß–ê–°–¢–ò–ß–ù–û –û–°–í–û–ï–ù–ù–´–ï –ù–ê–í–´–ö–ò ({len(partial)}):")
            for skill in partial[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                print(f"   ‚Ä¢ {skill['skill_name']} (—É—Ä–æ–≤–µ–Ω—å: {skill['mastery_level']:.2f}, –≥–ª—É–±–∏–Ω–∞: {skill['depth']})")
        
        # –¢—Ä–∞–µ–∫—Ç–æ—Ä–∏—è –æ–±—É—á–µ–Ω–∏—è
        print(f"\nüõ§Ô∏è  –¢–†–ê–ï–ö–¢–û–†–ò–Ø –û–ë–£–ß–ï–ù–ò–Ø:")
        for step in learning_steps[-10:]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —à–∞–≥–æ–≤
            icon = "‚úÖ" if step['type'] == 'full_mastery' else "üü°"
            print(f"   {step['step']:2d}. {icon} {step['skill_name']} "
                  f"(—É—Ä–æ–≤–µ–Ω—å: {step['mastery_level']:.2f}, –≥–ª—É–±–∏–Ω–∞: {step['depth']})")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recommendations = report['recommendations']
        if recommendations:
            print(f"\nüéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –î–õ–Ø –ò–ó–£–ß–ï–ù–ò–Ø (—Ç–æ–ø-10):")
            for i, rec in enumerate(recommendations[:10], 1):
                priority = rec['priority_score']
                unlocks = rec['unlocks_count']
                tasks = rec['tasks_count']
                print(f"   {i:2d}. {rec['skill_name']} "
                      f"(–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority:.1f}, —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç: {unlocks}, –∑–∞–¥–∞–Ω–∏–π: {tasks})")
        
        # –î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞–≤—ã–∫–∏
        available = report['next_available_skills']
        print(f"\nüîì –î–û–°–¢–£–ü–ù–´–• –î–õ–Ø –ò–ó–£–ß–ï–ù–ò–Ø: {len(available)} –Ω–∞–≤—ã–∫–æ–≤")
        if len(available) != len(recommendations):
            print(f"   (–ø–æ–∫–∞–∑–∞–Ω–æ {min(len(recommendations), 10)} –≤ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è—Ö)")
        
        print("\n" + "="*80)
    
    def export_trajectory_data(self, mastery: Dict[int, float], 
                              learning_steps: List[Dict], output_dir: Optional[str] = None):
        """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ –≤ JSON"""
        
        if output_dir is None:
            output_dir = str(Path(__file__).parent.parent.parent / 'temp_dir')
        
        output_path = Path(output_dir)
        output_path.mkdir(exist_ok=True)
        
        report = self.generate_student_profile_report(mastery, learning_steps)
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
        export_data = {
            'student_profile': {
                'mastery_levels': {str(k): v for k, v in mastery.items()},
                'summary': report['summary'],
                'depth_statistics': report['depth_statistics']
            },
            'learning_trajectory': learning_steps,
            'recommendations': report['recommendations'],
            'skills_info': {
                str(k): {
                    'name': v.name,
                    'description': v.description or '',
                    'depth': self.skill_depths.get(k, 0)
                } for k, v in self.skill_info.items()
            },
            'graph_structure': {
                'skills_graph': {str(k): list(v) for k, v in self.skills_graph.items()},
                'skill_depths': {str(k): v for k, v in self.skill_depths.items()}
            }
        }
        
        # –≠–∫—Å–ø–æ—Ä—Ç –≤ JSON
        with open(output_path / 'student_learning_trajectory.json', 'w', encoding='utf-8') as f:
            json.dump(export_data, f, ensure_ascii=False, indent=2)
        
        print(f"\nüíæ –î–∞–Ω–Ω—ã–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ {output_path / 'student_learning_trajectory.json'}")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    try:
        print("üöÄ –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ –æ–±—É—á–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞...")
        
        builder = LearningTrajectoryBuilder()
        builder.initialize()
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞
        print(f"\nüé≠ –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏–º—É–ª—è—Ü–∏–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞...")
        mastery, learning_steps = builder.simulate_student_learning(
            target_mastered_count=12,  # 12 –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å–≤–æ–µ–Ω–Ω—ã—Ö –Ω–∞–≤—ã–∫–æ–≤
            target_partial_count=8     # 8 —á–∞—Å—Ç–∏—á–Ω–æ –æ—Å–≤–æ–µ–Ω–Ω—ã—Ö –Ω–∞–≤—ã–∫–æ–≤
        )
        
        # –í—ã–≤–æ–¥–∏–º –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç
        builder.print_student_report(mastery, learning_steps)
        
        # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        builder.export_trajectory_data(mastery, learning_steps)
        
        print("\n‚ú® –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        
        return builder, mastery, learning_steps
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        return None, None, None


if __name__ == "__main__":
    builder, mastery, learning_steps = main()
