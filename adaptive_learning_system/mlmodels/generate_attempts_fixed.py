#!/usr/bin/env python
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞ ID: 2 (–ê–Ω–Ω–∞ –ö–æ–∑–ª–æ–≤–∞)
–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º timezone

–ê–ª–≥–æ—Ä–∏—Ç–º:
1. –ù–∞—Ö–æ–¥–∏—Ç –∫—É—Ä—Å—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–ø–∏—Å–∞–Ω —Å—Ç—É–¥–µ–Ω—Ç
2. –°–æ–±–∏—Ä–∞–µ—Ç –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è –∏–∑ —ç—Ç–∏—Ö –∫—É—Ä—Å–æ–≤  
3. –í—ã–±–∏—Ä–∞–µ—Ç –¥–æ 30 —Å–ª—É—á–∞–π–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º: –Ω–µ –±–æ–ª–µ–µ 2 –∑–∞–¥–∞–Ω–∏–π –Ω–∞ —Ä–∞–∑–≤–∏—Ç–∏–µ –æ–¥–Ω–æ–≥–æ –Ω–∞–≤—ã–∫–∞
4. –°–æ–∑–¥–∞–µ—Ç –ø–æ 2 –ø–æ–ø—ã—Ç–∫–∏ –Ω–∞ –∫–∞–∂–¥–æ–µ –∑–∞–¥–∞–Ω–∏–µ
5. –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –ø–æ–ø—ã—Ç–∫–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º timezone
"""

import os
import sys
import django
import random
from datetime import timedelta

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'adaptive_learning.settings')
django.setup()

from django.utils import timezone
from django.contrib.auth.models import User
from student.models import StudentProfile, StudentCourseEnrollment
from methodist.models import Task
from mlmodels.models import TaskAttempt
from skills.models import Course, Skill


def main():
    print("=" * 60)
    print("üéØ –ì–ï–ù–ï–†–ê–¢–û–† –¢–ï–°–¢–û–í–´–• –ü–û–ü–´–¢–û–ö (–ë–ï–ó TIMEZONE –û–®–ò–ë–û–ö)")
    print("=" * 60)
    
    # –ù–∞—Ö–æ–¥–∏–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞
    try:
        student_profile = StudentProfile.objects.get(id=2)
        print(f"üë®‚Äçüéì –°—Ç—É–¥–µ–Ω—Ç: {student_profile.full_name}")
        print(f"üìß Email: {student_profile.user.email}")
    except StudentProfile.DoesNotExist:
        print("‚ùå –°—Ç—É–¥–µ–Ω—Ç —Å ID=2 –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    print("\n" + "‚îÄ" * 60)
    print("üìö –ê–ù–ê–õ–ò–ó –ü–û–î–ü–ò–°–û–ö –ù–ê –ö–£–†–°–´")
    print("‚îÄ" * 60)
    
    # –ù–∞—Ö–æ–¥–∏–º –∫—É—Ä—Å—ã —Å—Ç—É–¥–µ–Ω—Ç–∞
    enrollments = StudentCourseEnrollment.objects.filter(
        student=student_profile,
        status__in=['enrolled', 'in_progress', 'completed']
    ).select_related('course')
    
    if not enrollments.exists():
        print("‚ùå –°—Ç—É–¥–µ–Ω—Ç –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∏ –Ω–∞ –æ–¥–∏–Ω –∫—É—Ä—Å!")
        return
    
    courses = [enrollment.course for enrollment in enrollments]
    print(f"üìñ –ù–∞–π–¥–µ–Ω–æ –∫—É—Ä—Å–æ–≤: {len(courses)}")
    for i, course in enumerate(courses, 1):
        print(f"  {i}. {course.name} (ID: {course.id})")
    
    print("\n" + "‚îÄ" * 60)
    print("üìù –°–ë–û–† –ó–ê–î–ê–ù–ò–ô –ò–ó –ö–£–†–°–û–í")
    print("‚îÄ" * 60)
    
    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è –∏–∑ –∫—É—Ä—Å–æ–≤ —Å—Ç—É–¥–µ–Ω—Ç–∞
    all_tasks = Task.objects.filter(
        courses__in=courses,
        is_active=True
    ).prefetch_related('skills').distinct()
    
    print(f"üìã –ù–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π: {all_tasks.count()}")
    
    if all_tasks.count() == 0:
        print("‚ùå –í –∫—É—Ä—Å–∞—Ö —Å—Ç—É–¥–µ–Ω—Ç–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π!")
        return
    
    print("\n" + "‚îÄ" * 60)
    print("üé≤ –í–´–ë–û–† –°–õ–£–ß–ê–ô–ù–´–• –ó–ê–î–ê–ù–ò–ô (–¥–æ 30 —à—Ç)")
    print("‚îÄ" * 60)
    
    # –í—ã–±–∏—Ä–∞–µ–º –¥–æ 30 –∑–∞–¥–∞–Ω–∏–π —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º: –Ω–µ –±–æ–ª–µ–µ 2 –∑–∞–¥–∞–Ω–∏–π –Ω–∞ –Ω–∞–≤—ã–∫
    selected_tasks = []
    skill_task_count = {}
    
    # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –∑–∞–¥–∞–Ω–∏—è –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
    tasks_list = list(all_tasks)
    random.shuffle(tasks_list)
    
    print("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–¥–∞–Ω–∏—è –ø–æ –Ω–∞–≤—ã–∫–∞–º...")
    
    for task in tasks_list:
        if len(selected_tasks) >= 30:
            break
            
        task_skills = list(task.skills.all())
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –¥–æ–±–∞–≤–∏—Ç—å —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ
        can_add = True
        for skill in task_skills:
            if skill_task_count.get(skill.id, 0) >= 2:
                can_add = False
                break
        
        if can_add:
            selected_tasks.append(task)
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –Ω–∞–≤—ã–∫–æ–≤ —ç—Ç–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
            for skill in task_skills:
                skill_task_count[skill.id] = skill_task_count.get(skill.id, 0) + 1
    
    print(f"üéØ –í—ã–±—Ä–∞–Ω–æ –∑–∞–¥–∞–Ω–∏–π: {len(selected_tasks)}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –Ω–∞–≤—ã–∫–∞–º
    all_selected_skills = set()
    for i, task in enumerate(selected_tasks, 1):
        skills_names = [skill.name for skill in task.skills.all()]
        all_selected_skills.update(task.skills.all())
        print(f"  {i}. {task.title}")
        print(f"     –ù–∞–≤—ã–∫–∏: {', '.join(skills_names)}")
        print(f"     –°–ª–æ–∂–Ω–æ—Å—Ç—å: {task.get_difficulty_display()}")
    
    print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ –Ω–∞–≤—ã–∫–∞–º:")
    for skill_id, count in skill_task_count.items():
        skill_name = next((skill.name for skill in all_selected_skills if skill.id == skill_id), f"ID:{skill_id}")
        print(f"  ‚Ä¢ {skill_name}: {count} –∑–∞–¥–∞–Ω–∏–π")
    
    print("\n" + "‚îÄ" * 60)
    print("üíæ –°–û–ó–î–ê–ù–ò–ï –ü–û–ü–´–¢–û–ö")
    print("‚îÄ" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–ø—ã—Ç–∫–∏ –¥–ª—è —ç—Ç–∏—Ö –∑–∞–¥–∞–Ω–∏–π
    existing_attempts = TaskAttempt.objects.filter(
        student=student_profile,
        task__in=selected_tasks
    ).count()
    
    if existing_attempts > 0:
        print(f"‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ {existing_attempts} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π")
        choice = input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø–æ–ø—ã—Ç–æ–∫? (y/n): ").lower()
        if choice != 'y':
            print("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            return
    
    attempts_created = 0
    base_time = timezone.now() - timedelta(days=7)  # –ù–∞—á–∏–Ω–∞–µ–º —Å –Ω–µ–¥–µ–ª–∏ –Ω–∞–∑–∞–¥
    
    for i, task in enumerate(selected_tasks):
        print(f"\nüìù –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è: {task.title}")
        
        # –°–æ–∑–¥–∞–µ–º 2 –ø–æ–ø—ã—Ç–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
        for attempt_num in range(2):
            # –°–ª—É—á–∞–π–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞ (70% –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö)
            is_correct = random.random() < 0.7
            
            # –°–ª—É—á–∞–π–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (timezone-aware)
            start_time = base_time + timedelta(
                days=i,
                hours=random.randint(9, 18),
                minutes=random.randint(0, 59)
            )
            
            # –í—Ä–µ–º—è —Ä–µ—à–µ–Ω–∏—è –æ—Ç 30 —Å–µ–∫—É–Ω–¥ –¥–æ 10 –º–∏–Ω—É—Ç
            solve_duration = random.randint(30, 600)
            end_time = start_time + timedelta(seconds=solve_duration)
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ–ø—ã—Ç–∫—É —Å timezone-aware datetime
            attempt = TaskAttempt.objects.create(
                student=student_profile,
                task=task,
                is_correct=is_correct,
                metadata={'generated': True, 'attempt': attempt_num + 1, 'timezone_fixed': True},
                started_at=start_time,
                time_spent=solve_duration
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º completed_at
            attempt.completed_at = end_time
            attempt.save()
            
            attempts_created += 1
            result = "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ" if is_correct else "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ"
            print(f"  –ü–æ–ø—ã—Ç–∫–∞ {attempt_num + 1}: {result} ({solve_duration}s) - ‚ú® –ë–µ–∑ timezone –æ—à–∏–±–æ–∫!")
    
    print("\n" + "‚îÄ" * 60)
    print("üìä –ò–¢–û–ì–ò")
    print("‚îÄ" * 60)
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ –ø–æ–ø—ã—Ç–æ–∫: {attempts_created}")
    print(f"üìù –ó–∞–¥–∞–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(selected_tasks)}")
    print(f"üß† –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –Ω–∞–≤—ã–∫–æ–≤: {len(all_selected_skills)}")
    print(f"üïê –í—Å–µ timestamp —Å–æ–∑–¥–∞–Ω—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º timezone!")
    
    # –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ BKT –æ–±–Ω–æ–≤–∏–ª—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    print(f"\nüîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ BKT...")
    from mlmodels.models import StudentSkillMastery
    
    skill_masteries = StudentSkillMastery.objects.filter(
        student=student_profile,
        skill__in=all_selected_skills
    )
    
    print(f"üìà –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –æ –Ω–∞–≤—ã–∫–∞—Ö: {skill_masteries.count()}")
    
    if skill_masteries.exists():
        print("\nüéØ –¢–æ–ø-5 –Ω–∞–≤—ã–∫–æ–≤ –ø–æ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –æ—Å–≤–æ–µ–Ω–∏—è:")
        top_skills = skill_masteries.order_by('-current_mastery_prob')[:5]
        for skill_mastery in top_skills:
            print(f"  ‚Ä¢ {skill_mastery.skill.name}: "
                  f"{skill_mastery.current_mastery_prob:.2%}")
    
    print("\n" + "=" * 60)
    print("üéâ –ì–ï–ù–ï–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û! –ë–ï–ó –û–®–ò–ë–û–ö!")
    print("=" * 60)


if __name__ == '__main__':
    main()
