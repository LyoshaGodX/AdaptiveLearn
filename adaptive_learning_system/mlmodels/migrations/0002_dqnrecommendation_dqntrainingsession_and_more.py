# Generated by Django 5.2.1 on 2025-06-15 13:03

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('methodist', '0007_remove_unused_fields'),
        ('mlmodels', '0001_initial'),
        ('student', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='DQNRecommendation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('q_value', models.FloatField(help_text='Значение Q-функции для данной рекомендации', verbose_name='Q-value')),
                ('confidence', models.FloatField(help_text='Уверенность модели в рекомендации (0-1)', verbose_name='Уверенность')),
                ('reason', models.CharField(help_text='Объяснение почему было рекомендовано это задание', max_length=500, verbose_name='Причина рекомендации')),
                ('student_state_snapshot', models.JSONField(help_text='Состояние студента на момент генерации рекомендации', verbose_name='Снимок состояния студента')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Время создания')),
                ('is_active', models.BooleanField(default=True, help_text='Является ли рекомендация текущей для студента', verbose_name='Активная рекомендация')),
                ('attempt', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='dqn_recommendation', to='mlmodels.taskattempt', verbose_name='Связанная попытка')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='dqn_recommendations', to='student.studentprofile', verbose_name='Студент')),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='dqn_recommendations', to='methodist.task', verbose_name='Рекомендованное задание')),
            ],
            options={
                'verbose_name': 'DQN рекомендация',
                'verbose_name_plural': 'DQN рекомендации',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='DQNTrainingSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Название сессии')),
                ('description', models.TextField(blank=True, verbose_name='Описание')),
                ('learning_rate', models.FloatField(default=0.001, verbose_name='Скорость обучения')),
                ('batch_size', models.PositiveIntegerField(default=32, verbose_name='Размер батча')),
                ('num_epochs', models.PositiveIntegerField(default=100, verbose_name='Количество эпох')),
                ('feedback_count', models.PositiveIntegerField(default=0, verbose_name='Количество размеченных данных')),
                ('status', models.CharField(choices=[('pending', 'Ожидание'), ('running', 'Выполняется'), ('completed', 'Завершено'), ('failed', 'Ошибка')], default='pending', max_length=20, verbose_name='Статус')),
                ('started_at', models.DateTimeField(blank=True, null=True, verbose_name='Время начала')),
                ('completed_at', models.DateTimeField(blank=True, null=True, verbose_name='Время завершения')),
                ('initial_loss', models.FloatField(blank=True, null=True, verbose_name='Начальная потеря')),
                ('final_loss', models.FloatField(blank=True, null=True, verbose_name='Финальная потеря')),
                ('training_history', models.JSONField(blank=True, help_text='Метрики по эпохам', null=True, verbose_name='История обучения')),
                ('model_path', models.CharField(blank=True, max_length=500, verbose_name='Путь к сохраненной модели')),
                ('error_message', models.TextField(blank=True, verbose_name='Сообщение об ошибке')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Время создания')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='dqn_training_sessions', to=settings.AUTH_USER_MODEL, verbose_name='Создал')),
            ],
            options={
                'verbose_name': 'Сессия обучения DQN',
                'verbose_name_plural': 'Сессии обучения DQN',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='StudentCurrentRecommendation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('set_at', models.DateTimeField(auto_now=True, verbose_name='Время установки')),
                ('times_viewed', models.PositiveIntegerField(default=0, help_text='Сколько раз студент видел эту рекомендацию', verbose_name='Количество просмотров')),
                ('recommendation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='current_for_students', to='mlmodels.dqnrecommendation', verbose_name='Текущая рекомендация')),
                ('student', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='current_recommendation', to='student.studentprofile', verbose_name='Студент')),
            ],
            options={
                'verbose_name': 'Текущая рекомендация студента',
                'verbose_name_plural': 'Текущие рекомендации студентов',
            },
        ),
        migrations.CreateModel(
            name='ExpertFeedback',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('feedback_type', models.CharField(choices=[('positive', 'Положительное'), ('negative', 'Отрицательное')], max_length=20, verbose_name='Тип подкрепления')),
                ('strength', models.CharField(choices=[('low', 'Низкая'), ('medium', 'Средняя'), ('high', 'Высокая')], max_length=20, verbose_name='Сила подкрепления')),
                ('reward_value', models.FloatField(help_text='Вычисляется автоматически на основе типа и силы', verbose_name='Численное значение награды')),
                ('comment', models.TextField(blank=True, help_text='Объяснение решения о подкреплении', verbose_name='Комментарий эксперта')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Время создания')),
                ('is_used_for_training', models.BooleanField(default=False, help_text='Была ли эта разметка использована для дообучения модели', verbose_name='Использовано для обучения')),
                ('expert', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='expert_feedbacks', to=settings.AUTH_USER_MODEL, verbose_name='Эксперт')),
                ('recommendation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='expert_feedback', to='mlmodels.dqnrecommendation', verbose_name='Рекомендация')),
            ],
            options={
                'verbose_name': 'Экспертная разметка',
                'verbose_name_plural': 'Экспертные разметки',
                'ordering': ['-created_at'],
                'unique_together': {('recommendation', 'expert')},
            },
        ),
    ]
