# Generated by Django 5.2.3 on 2025-06-13 11:48

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('methodist', '0007_remove_unused_fields'),
        ('skills', '0004_course_duration_hours'),
        ('student', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='StudentLearningProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('learning_speed', models.FloatField(default=0.5, help_text='Средняя скорость освоения новых навыков (0-1)', verbose_name='Скорость обучения')),
                ('persistence_level', models.FloatField(default=0.5, help_text='Склонность к продолжению работы при трудностях (0-1)', verbose_name='Уровень настойчивости')),
                ('difficulty_preference', models.CharField(choices=[('easy', 'Легкие задания'), ('medium', 'Средние задания'), ('hard', 'Сложные задания'), ('adaptive', 'Адаптивная сложность')], default='adaptive', max_length=20, verbose_name='Предпочитаемая сложность')),
                ('total_attempts', models.PositiveIntegerField(default=0, verbose_name='Общее количество попыток')),
                ('total_correct', models.PositiveIntegerField(default=0, verbose_name='Общее количество правильных ответов')),
                ('average_time_per_task', models.FloatField(default=0.0, verbose_name='Среднее время на задание (мин)')),
                ('first_activity', models.DateTimeField(blank=True, null=True, verbose_name='Первая активность')),
                ('last_activity', models.DateTimeField(blank=True, null=True, verbose_name='Последняя активность')),
                ('last_updated', models.DateTimeField(auto_now=True, verbose_name='Последнее обновление')),
                ('student', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='learning_profile', to='student.studentprofile', verbose_name='Студент')),
            ],
            options={
                'verbose_name': 'Профиль обучения студента',
                'verbose_name_plural': 'Профили обучения студентов',
            },
        ),
        migrations.CreateModel(
            name='TaskAttempt',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_correct', models.BooleanField(help_text='True если ответ правильный', verbose_name='Правильный ответ')),
                ('given_answer', models.TextField(blank=True, help_text='Ответ, который дал студент', null=True, verbose_name='Данный ответ')),
                ('correct_answer', models.TextField(blank=True, help_text='Правильный ответ на задание', null=True, verbose_name='Правильный ответ')),
                ('started_at', models.DateTimeField(verbose_name='Время начала')),
                ('completed_at', models.DateTimeField(auto_now_add=True, verbose_name='Время завершения')),
                ('time_spent', models.PositiveIntegerField(blank=True, help_text='Время, затраченное на решение задания в секундах', null=True, verbose_name='Время решения (сек)')),
                ('metadata', models.JSONField(blank=True, default=dict, help_text='Дополнительная информация о попытке в формате JSON', verbose_name='Дополнительные данные')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='task_attempts', to='student.studentprofile', verbose_name='Студент')),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='student_attempts', to='methodist.task', verbose_name='Задание')),
            ],
            options={
                'verbose_name': 'Попытка решения задания',
                'verbose_name_plural': 'Попытки решения заданий',
                'ordering': ['-completed_at'],
            },
        ),
        migrations.CreateModel(
            name='StudentSkillMastery',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('initial_mastery_prob', models.FloatField(default=0.0, help_text='Вероятность того, что студент уже знает навык', verbose_name='Начальная вероятность освоения P(L0)')),
                ('current_mastery_prob', models.FloatField(default=0.0, help_text='Текущая вероятность освоения навыка', verbose_name='Текущая вероятность освоения P(Lt)')),
                ('transition_prob', models.FloatField(default=0.3, help_text='Вероятность изучения навыка за одну попытку', verbose_name='Вероятность перехода P(T)')),
                ('guess_prob', models.FloatField(default=0.2, help_text='Вероятность правильного ответа при неосвоенном навыке', verbose_name='Вероятность угадывания P(G)')),
                ('slip_prob', models.FloatField(default=0.1, help_text='Вероятность неправильного ответа при освоенном навыке', verbose_name='Вероятность ошибки P(S)')),
                ('last_updated', models.DateTimeField(auto_now=True, verbose_name='Последнее обновление')),
                ('attempts_count', models.PositiveIntegerField(default=0, help_text='Общее количество попыток решения заданий по этому навыку', verbose_name='Количество попыток')),
                ('correct_attempts', models.PositiveIntegerField(default=0, help_text='Количество правильных ответов', verbose_name='Правильные попытки')),
                ('skill', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='student_masteries', to='skills.skill', verbose_name='Навык')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='skill_masteries', to='student.studentprofile', verbose_name='Студент')),
            ],
            options={
                'verbose_name': 'Освоение навыка студентом',
                'verbose_name_plural': 'Освоение навыков студентами',
                'ordering': ['-current_mastery_prob'],
                'unique_together': {('student', 'skill')},
            },
        ),
    ]
