"""
–£–ª—É—á—à–µ–Ω–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è DKN –º–æ–¥–µ–ª–∏

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Å–æ–∑–¥–∞–µ—Ç —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –æ —Å—Ç—É–¥–µ–Ω—Ç–∞—Ö,
–∏—Ö –ø–æ–ø—ã—Ç–∫–∞—Ö —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –≤ –∏–∑—É—á–µ–Ω–∏–∏ –Ω–∞–≤—ã–∫–æ–≤ —Å –ø–æ–ª–Ω—ã–º 
–ø–æ–∫—Ä—ã—Ç–∏–µ–º –≤—Å–µ—Ö –Ω–∞–≤—ã–∫–æ–≤ –∏ –∫—É—Ä—Å–æ–≤.
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))

import django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'adaptive_learning.settings')
django.setup()

import json
import numpy as np
import pandas as pd
from typing import Dict, List, Set, Tuple, Optional
from datetime import datetime, timedelta
import random
from dataclasses import dataclass
from collections import defaultdict
import matplotlib
matplotlib.use('Agg')  # –ò—Å–ø–æ–ª—å–∑—É–µ–º backend –±–µ–∑ GUI
import matplotlib.pyplot as plt

from skills.models import Skill
from methodist.models import Task, Course
from mlmodels.bkt.base_model import BKTModel, BKTParameters


@dataclass
class StudentProfile:
    """–ü—Ä–æ—Ñ–∏–ª—å —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞"""
    id: int
    archetype: str
    base_success_rate: float
    learning_speed: float
    preferred_path: str
    skill_aptitudes: Dict[int, float]  # –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –∫ —Ä–∞–∑–Ω—ã–º –Ω–∞–≤—ã–∫–∞–º
    attention_span: int  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞–Ω–∏–π –∑–∞ —Å–µ—Å—Å–∏—é
    consistency: float  # –ù–∞—Å–∫–æ–ª—å–∫–æ —Å—Ç–∞–±–∏–ª—å–Ω—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    course_focus: Optional[str]  # –§–æ–∫—É—Å –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –∫—É—Ä—Å–µ
    max_attempts: int  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫


@dataclass
class AttemptRecord:
    """–ó–∞–ø–∏—Å—å –æ –ø–æ–ø—ã—Ç–∫–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è"""
    student_id: int
    task_id: int
    skill_ids: List[int]
    is_correct: bool
    score: float
    time_spent: int
    difficulty: str
    task_type: str
    timestamp: datetime
    session_id: int


class EnhancedSyntheticDataGenerator:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–ª–Ω—ã–º –ø–æ–∫—Ä—ã—Ç–∏–µ–º –Ω–∞–≤—ã–∫–æ–≤"""
    
    def __init__(self, spec_file: Optional[str] = None):
        self.spec_file = spec_file or 'mlmodels/dkn/dataset/synthetic_data_spec.json'
        self.output_dir = 'mlmodels/dkn/dataset'
        
        # –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≤—ã—Ö–æ–¥–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        os.makedirs(self.output_dir, exist_ok=True)
        
        self.load_system_data()
        self.load_specification()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        self.generation_stats = {
            'students_created': 0,
            'attempts_created': 0,
            'skills_covered': set(),
            'courses_covered': set(),
            'archetype_distribution': defaultdict(int),
            'skill_coverage_per_course': defaultdict(set),
            'level_coverage': defaultdict(int)
        }
    
    def load_system_data(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã —Å –∞–Ω–∞–ª–∏–∑–æ–º –∫—É—Ä—Å–æ–≤"""
        print("üîç –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º—ã...")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫—É—Ä—Å—ã
        self.courses = {}
        for course in Course.objects.all():
            self.courses[course.id] = {
                'id': course.id,
                'name': course.name,
                'skills': list(course.skills.values_list('id', flat=True))
            }
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞–≤—ã–∫–∏ —Å –∫—É—Ä—Å–æ–≤–æ–π –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å—é
        self.all_skills = {}
        self.skills_by_course = defaultdict(list)
        
        for skill in Skill.objects.all():
            skill_courses = list(skill.courses.values_list('id', flat=True))
            
            self.all_skills[skill.id] = {
                'id': skill.id,
                'name': skill.name,
                'courses': skill_courses
            }
            
            for course_id in skill_courses:
                self.skills_by_course[course_id].append(skill.id)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–¥–∞–Ω–∏—è
        self.tasks_by_skill = defaultdict(list)
        self.all_tasks = {}
        
        for task in Task.objects.all().prefetch_related('skills', 'courses'):
            task_data = {
                'id': task.id,
                'title': task.title,
                'difficulty': task.difficulty,
                'task_type': task.task_type,
                'skill_ids': list(task.skills.values_list('id', flat=True)),
                'course_ids': list(task.courses.values_list('id', flat=True))
            }
            
            self.all_tasks[task.id] = task_data
            
            for skill_id in task_data['skill_ids']:
                self.tasks_by_skill[skill_id].append(task_data)
        
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ:")
        print(f"   ‚Ä¢ –ö—É—Ä—Å–æ–≤: {len(self.courses)}")
        print(f"   ‚Ä¢ –ù–∞–≤—ã–∫–æ–≤: {len(self.all_skills)}")
        print(f"   ‚Ä¢ –ó–∞–¥–∞–Ω–∏–π: {len(self.all_tasks)}")
        
        # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫—É—Ä—Å–∞–º
        for course_id, course_data in self.courses.items():
            skill_count = len(course_data['skills'])
            task_count = sum(1 for task in self.all_tasks.values() 
                           if course_id in task['course_ids'])
            print(f"   ‚Ä¢ {course_data['name']}: {skill_count} –Ω–∞–≤—ã–∫–æ–≤, {task_count} –∑–∞–¥–∞–Ω–∏–π")
    
    def load_specification(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é"""
        try:
            with open(self.spec_file, 'r', encoding='utf-8') as f:
                spec = json.load(f)
            
            self.target_students = spec['generation_params']['students']['total']
            self.student_distribution = spec['generation_params']['students']['distribution']
            self.skills_info = {int(k): v for k, v in spec['skills_graph']['skills'].items()}
            self.dependencies = {int(k): [int(x) for x in v] for k, v in spec['skills_graph']['dependencies'].items()}
            self.skill_levels = {int(k): v for k, v in spec['skills_graph']['levels'].items()}
            self.archetypes = spec['requirements']['student_archetypes']
            
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è: {self.target_students} —Å—Ç—É–¥–µ–Ω—Ç–æ–≤")
            
        except FileNotFoundError:
            print("‚ö†Ô∏è –°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –°–æ–∑–¥–∞–µ—Ç—Å—è –Ω–æ–≤–∞—è...")
            self.create_enhanced_specification()
    
    def create_enhanced_specification(self):
        """–°–æ–∑–¥–∞–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—É—é —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é —Å —É—á–µ—Ç–æ–º –∫—É—Ä—Å–æ–≤"""
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≥—Ä–∞—Ñ –Ω–∞–≤—ã–∫–æ–≤
        with open('temp_dir/skills_graph.json', 'r', encoding='utf-8') as f:
            graph_data = json.load(f)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —É—Ä–æ–≤–Ω–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        max_level = max(graph_data['levels'].values())
        
        # –°–æ–∑–¥–∞–µ–º –∞—Ä—Ö–µ—Ç–∏–ø—ã —Å —É—á–µ—Ç–æ–º –∫—É—Ä—Å–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        enhanced_archetypes = {
            "–Ω–æ–≤–∏—á–æ–∫_–∫—É—Ä—Å1": {
                "description": "–ò–∑—É—á–∞–µ—Ç –±–∞–∑–æ–≤—ã–µ –Ω–∞–≤—ã–∫–∏ –ø–µ—Ä–≤–æ–≥–æ –∫—É—Ä—Å–∞",
                "success_rate_range": [0.4, 0.7],
                "attempts_range": [30, 60],
                "learning_speed": "–º–µ–¥–ª–µ–Ω–Ω–∞—è",
                "course_focus": 1,
                "max_level": 5
            },
            "–Ω–æ–≤–∏—á–æ–∫_–∫—É—Ä—Å2": {
                "description": "–ò–∑—É—á–∞–µ—Ç –±–∞–∑–æ–≤—ã–µ –Ω–∞–≤—ã–∫–∏ –≤—Ç–æ—Ä–æ–≥–æ –∫—É—Ä—Å–∞",
                "success_rate_range": [0.3, 0.6],
                "attempts_range": [40, 70],
                "learning_speed": "–º–µ–¥–ª–µ–Ω–Ω–∞—è", 
                "course_focus": 2,
                "max_level": 6
            },
            "—Å—Ä–µ–¥–Ω–∏–π_–∫—É—Ä—Å1": {
                "description": "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —Å—Ç—É–¥–µ–Ω—Ç –ø–µ—Ä–≤–æ–≥–æ –∫—É—Ä—Å–∞",
                "success_rate_range": [0.6, 0.8],
                "attempts_range": [40, 80],
                "learning_speed": "—Å—Ä–µ–¥–Ω—è—è",
                "course_focus": 1,
                "max_level": 10
            },
            "—Å—Ä–µ–¥–Ω–∏–π_–∫—É—Ä—Å2": {
                "description": "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —Å—Ç—É–¥–µ–Ω—Ç –≤—Ç–æ—Ä–æ–≥–æ –∫—É—Ä—Å–∞",
                "success_rate_range": [0.5, 0.8],
                "attempts_range": [50, 90],
                "learning_speed": "—Å—Ä–µ–¥–Ω—è—è",
                "course_focus": 2,
                "max_level": 12
            },
            "–ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π_–≤—Å–µ_–∫—É—Ä—Å—ã": {
                "description": "–ò–∑—É—á–∞–µ—Ç –Ω–∞–≤—ã–∫–∏ –≤—Å–µ—Ö –∫—É—Ä—Å–æ–≤",
                "success_rate_range": [0.7, 0.9],
                "attempts_range": [60, 120],
                "learning_speed": "–±—ã—Å—Ç—Ä–∞—è",
                "course_focus": None,
                "max_level": max_level
            },
            "–≥–µ–Ω–∏–π_–≤—Å–µ_–∫—É—Ä—Å—ã": {
                "description": "–ë—ã—Å—Ç—Ä–æ –æ—Å–≤–∞–∏–≤–∞–µ—Ç –≤—Å–µ –Ω–∞–≤—ã–∫–∏ –≤—Å–µ—Ö –∫—É—Ä—Å–æ–≤",
                "success_rate_range": [0.8, 0.95],
                "attempts_range": [40, 100],
                "learning_speed": "–æ—á–µ–Ω—å –±—ã—Å—Ç—Ä–∞—è",
                "course_focus": None,
                "max_level": max_level
            },
            "—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç_–∫—É—Ä—Å3": {
                "description": "–§–æ–∫—É—Å–∏—Ä—É–µ—Ç—Å—è –Ω–∞ –º–∞—à–∏–Ω–Ω–æ–º –æ–±—É—á–µ–Ω–∏–∏ (3-–π –∫—É—Ä—Å)",
                "success_rate_range": [0.6, 0.85],
                "attempts_range": [50, 100],
                "learning_speed": "–±—ã—Å—Ç—Ä–∞—è",
                "course_focus": 3,
                "max_level": max_level
            }
        }
        
        # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –ø–æ–∫—Ä—ã—Ç–∏—è
        distribution = {
            "–Ω–æ–≤–∏—á–æ–∫_–∫—É—Ä—Å1": 0.25,      # 25% - –±–∞–∑–æ–≤—ã–µ –Ω–∞–≤—ã–∫–∏ –∫—É—Ä—Å–∞ 1
            "–Ω–æ–≤–∏—á–æ–∫_–∫—É—Ä—Å2": 0.15,      # 15% - –±–∞–∑–æ–≤—ã–µ –Ω–∞–≤—ã–∫–∏ –∫—É—Ä—Å–∞ 2  
            "—Å—Ä–µ–¥–Ω–∏–π_–∫—É—Ä—Å1": 0.20,      # 20% - –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –∫—É—Ä—Å–∞ 1
            "—Å—Ä–µ–¥–Ω–∏–π_–∫—É—Ä—Å2": 0.15,      # 15% - –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –∫—É—Ä—Å–∞ 2
            "–ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π_–≤—Å–µ_–∫—É—Ä—Å—ã": 0.15,  # 15% - –≤—Å–µ –∫—É—Ä—Å—ã
            "–≥–µ–Ω–∏–π_–≤—Å–µ_–∫—É—Ä—Å—ã": 0.05,    # 5% - –≥–µ–Ω–∏–∏
            "—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç_–∫—É—Ä—Å3": 0.05    # 5% - —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã ML
        }
        
        spec = {
            "generation_params": {
                "students": {
                    "total": 1500,  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è
                    "distribution": distribution
                },
                "enhanced_features": {
                    "course_aware_generation": True,
                    "full_skill_coverage": True,
                    "realistic_trajectories": True
                }
            },
            "skills_graph": graph_data,
            "courses_info": self.courses,
            "requirements": {
                "student_archetypes": enhanced_archetypes,
                "coverage_requirements": {
                    "min_skill_coverage": 1.0,  # 100% –Ω–∞–≤—ã–∫–æ–≤
                    "min_course_coverage": 1.0, # 100% –∫—É—Ä—Å–æ–≤
                    "min_examples_per_skill": 50
                }
            }
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é
        with open(self.spec_file, 'w', encoding='utf-8') as f:
            json.dump(spec, f, ensure_ascii=False, indent=2)
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —É–ª—É—á—à–µ–Ω–Ω–∞—è —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è: {self.spec_file}")
          # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—É—é —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é
        self.target_students = spec['generation_params']['students']['total']
        self.student_distribution = spec['generation_params']['students']['distribution']
        self.skills_info = {int(k): v for k, v in spec['skills_graph']['skills'].items()}
        self.dependencies = {int(k): [int(x) for x in v] for k, v in spec['skills_graph']['dependencies'].items()}
        self.skill_levels = {int(k): v for k, v in spec['skills_graph']['levels'].items()}
        self.archetypes = spec['requirements']['student_archetypes']
    
    def generate_enhanced_student_profile(self, student_id: int) -> StudentProfile:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å —Å—Ç—É–¥–µ–Ω—Ç–∞ —Å –∫—É—Ä—Å–æ–≤—ã–º —Ñ–æ–∫—É—Å–æ–º"""
        
        # –í—ã–±–∏—Ä–∞–µ–º –∞—Ä—Ö–µ—Ç–∏–ø
        archetype = np.random.choice(
            list(self.student_distribution.keys()),
            p=list(self.student_distribution.values())
        )
        
        archetype_params = self.archetypes[archetype]
        
        # –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        success_range = archetype_params['success_rate_range']
        base_success_rate = np.random.uniform(success_range[0], success_range[1])
        
        attempts_range = archetype_params['attempts_range']
        max_attempts = np.random.randint(attempts_range[0], attempts_range[1])
        
        learning_speeds = {
            '–æ—á–µ–Ω—å –º–µ–¥–ª–µ–Ω–Ω–∞—è': 0.3,
            '–º–µ–¥–ª–µ–Ω–Ω–∞—è': 0.5,
            '—Å—Ä–µ–¥–Ω—è—è': 1.0,
            '–±—ã—Å—Ç—Ä–∞—è': 1.5,
            '–æ—á–µ–Ω—å –±—ã—Å—Ç—Ä–∞—è': 2.0
        }
        learning_speed = learning_speeds[archetype_params['learning_speed']]
        
        # –ö—É—Ä—Å–æ–≤—ã–π —Ñ–æ–∫—É—Å
        course_focus = archetype_params.get('course_focus')
        
        # –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –∫ –Ω–∞–≤—ã–∫–∞–º —Å —É—á–µ—Ç–æ–º –∫—É—Ä—Å–æ–≤–æ–≥–æ —Ñ–æ–∫—É—Å–∞
        skill_aptitudes = {}
        for skill_id in self.all_skills.keys():
            skill_courses = self.all_skills[skill_id]['courses']
            
            if course_focus and course_focus in skill_courses:
                # –ü–æ–≤—ã—à–µ–Ω–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∫ –Ω–∞–≤—ã–∫–∞–º —Å–≤–æ–µ–≥–æ –∫—É—Ä—Å–∞
                aptitude = base_success_rate + np.random.uniform(0.0, 0.2)
            else:
                # –û–±—ã—á–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å
                aptitude = base_success_rate + np.random.uniform(-0.1, 0.1)
            
            skill_aptitudes[skill_id] = np.clip(aptitude, 0.1, 0.95)
        
        # –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        attention_span = np.random.randint(5, 15)
        consistency = np.random.uniform(0.6, 0.9)
        
        # –ü—É—Ç—å –æ–±—É—á–µ–Ω–∏—è –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∞—Ä—Ö–µ—Ç–∏–ø–∞
        if '–Ω–æ–≤–∏—á–æ–∫' in archetype:
            preferred_path = np.random.choice(['linear', 'breadth_first'], p=[0.7, 0.3])
        elif '—Å—Ä–µ–¥–Ω–∏–π' in archetype:
            preferred_path = np.random.choice(['linear', 'breadth_first', 'focused'], p=[0.4, 0.4, 0.2])
        else:
            preferred_path = np.random.choice(['breadth_first', 'focused', 'random'], p=[0.3, 0.4, 0.3])
        
        return StudentProfile(
            id=student_id,
            archetype=archetype,
            base_success_rate=base_success_rate,
            learning_speed=learning_speed,
            preferred_path=preferred_path,
            skill_aptitudes=skill_aptitudes,
            attention_span=attention_span,
            consistency=consistency,
            course_focus=course_focus,
            max_attempts=max_attempts
        )
    
    def get_course_aware_available_skills(self, student_profile: StudentProfile, 
                                        mastered_skills: Set[int]) -> List[int]:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞–≤—ã–∫–∏ —Å —É—á–µ—Ç–æ–º –∫—É—Ä—Å–æ–≤–æ–≥–æ —Ñ–æ–∫—É—Å–∞"""
        available = []
        
        # –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞–≤—ã–∫–∏ –ø–æ –ø—Ä–µ—Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º
        prerequisite_available = []
        for skill_id, prerequisites in self.dependencies.items():
            if all(prereq in mastered_skills for prereq in prerequisites):
                if skill_id not in mastered_skills:
                    prerequisite_available.append(skill_id)
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —É—Ä–æ–≤–Ω—é —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ)
        max_level = self.archetypes[student_profile.archetype].get('max_level')
        if max_level is not None:
            prerequisite_available = [
                skill_id for skill_id in prerequisite_available
                if self.skill_levels.get(skill_id, 0) <= max_level
            ]
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∫—É—Ä—Å–æ–≤—ã–π —Ñ–æ–∫—É—Å, –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–∞–≤—ã–∫–∞–º —ç—Ç–æ–≥–æ –∫—É—Ä—Å–∞
        if student_profile.course_focus:
            course_skills = self.skills_by_course.get(student_profile.course_focus, [])
            course_available = [s for s in prerequisite_available if s in course_skills]
            
            # 80% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤—ã–±—Ä–∞—Ç—å –Ω–∞–≤—ã–∫ —Å–≤–æ–µ–≥–æ –∫—É—Ä—Å–∞
            if course_available and np.random.random() < 0.8:
                available = course_available
            else:
                available = prerequisite_available
        else:
            available = prerequisite_available
        
        return available
    
    def generate_enhanced_student_attempts(self, student_profile: StudentProfile) -> List[AttemptRecord]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–ø—ã—Ç–∫–∏ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π"""
        
        attempts = []
        mastered_skills = set()
        skill_masteries = defaultdict(float)
        session_id = 0
        current_date = datetime.now() - timedelta(days=180)
        
        # –ù–∞—á–∏–Ω–∞–µ–º —Å –±–∞–∑–æ–≤—ã—Ö –Ω–∞–≤—ã–∫–æ–≤
        available_skills = self.get_course_aware_available_skills(student_profile, mastered_skills)
        current_skills = set()
        
        attempts_in_session = 0
        max_session_attempts = student_profile.attention_span
        
        for attempt_num in range(student_profile.max_attempts):
            # –ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è
            if attempts_in_session >= max_session_attempts:
                session_id += 1
                attempts_in_session = 0
                max_session_attempts = student_profile.attention_span + np.random.randint(-2, 3)
                current_date += timedelta(hours=np.random.randint(4, 48))
            
            # –í—ã–±–∏—Ä–∞–µ–º –Ω–∞–≤—ã–∫
            if not current_skills and available_skills:
                target_skill = self.select_next_skill(student_profile, available_skills, current_skills)
                if target_skill:
                    current_skills.add(target_skill)
            
            if not current_skills:
                break
                
            target_skill = random.choice(list(current_skills))
            
            # –í—ã–±–∏—Ä–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ
            skill_tasks = self.tasks_by_skill.get(target_skill, [])
            if not skill_tasks:
                current_skills.discard(target_skill)
                continue
            
            task = random.choice(skill_tasks)
            
            # –í—ã—á–∏—Å–ª—è–µ–º —É—Å–ø–µ—Ö
            success_prob = self.calculate_success_probability(
                student_profile, task, skill_masteries
            )
            is_correct = np.random.random() < success_prob
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—Ä–µ–º—è –∏ –æ—Ü–µ–Ω–∫—É
            base_time = {'beginner': 180, 'intermediate': 300, 'advanced': 450}
            time_spent = int(np.random.normal(
                base_time[task['difficulty']], 
                base_time[task['difficulty']] * 0.3
            ))
            time_spent = max(30, min(900, time_spent))
            
            if is_correct:
                score = np.random.uniform(0.7, 1.0)
                learning_gain = student_profile.learning_speed * 0.1
            else:
                score = np.random.uniform(0.0, 0.4)
                learning_gain = student_profile.learning_speed * 0.05
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–æ
            for skill_id in task['skill_ids']:
                skill_masteries[skill_id] = min(1.0, skill_masteries[skill_id] + learning_gain)
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å
            attempt = AttemptRecord(
                student_id=student_profile.id,
                task_id=task['id'],
                skill_ids=task['skill_ids'],
                is_correct=is_correct,
                score=score,
                time_spent=time_spent,
                difficulty=task['difficulty'],
                task_type=task['task_type'],
                timestamp=current_date,
                session_id=session_id
            )
            
            attempts.append(attempt)
            attempts_in_session += 1
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.generation_stats['skills_covered'].update(task['skill_ids'])
            self.generation_stats['courses_covered'].update(task['course_ids'])
            
            for skill_id in task['skill_ids']:
                skill_level = self.skill_levels.get(skill_id, 0)
                self.generation_stats['level_coverage'][skill_level] += 1
                
                for course_id in task['course_ids']:
                    self.generation_stats['skill_coverage_per_course'][course_id].add(skill_id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–≤–æ–µ–Ω–∏–µ –Ω–∞–≤—ã–∫–∞
            if skill_masteries[target_skill] > 0.8:
                mastered_skills.add(target_skill)
                current_skills.discard(target_skill)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞–≤—ã–∫–∏
                new_available = self.get_course_aware_available_skills(student_profile, mastered_skills)
                available_skills = new_available
            
            current_date += timedelta(minutes=np.random.randint(1, 10))
        
        return attempts
    
    def select_next_skill(self, student_profile: StudentProfile, 
                         available_skills: List[int], 
                         current_skills: Set[int]) -> Optional[int]:
        """–í—ã–±–æ—Ä —Å–ª–µ–¥—É—é—â–µ–≥–æ –Ω–∞–≤—ã–∫–∞ —Å —É—á–µ—Ç–æ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        if not available_skills:
            return None
        
        path = student_profile.preferred_path
        
        if path == 'linear':
            return min(available_skills, key=lambda s: self.skill_levels[s])
        elif path == 'breadth_first':
            if current_skills:
                current_level = max(self.skill_levels[s] for s in current_skills)
                same_level = [s for s in available_skills if self.skill_levels[s] == current_level]
                if same_level:
                    return random.choice(same_level)
            return min(available_skills, key=lambda s: self.skill_levels[s])
        elif path == 'focused':
            # –§–æ–∫—É—Å–∏—Ä—É–µ–º—Å—è –Ω–∞ –∫—É—Ä—Å–µ –µ—Å–ª–∏ –µ—Å—Ç—å
            if student_profile.course_focus:
                course_skills = [s for s in available_skills 
                               if student_profile.course_focus in self.all_skills[s]['courses']]
                if course_skills:
                    return random.choice(course_skills)
            return random.choice(available_skills)
        else:  # random
            return random.choice(available_skills)
    
    def calculate_success_probability(self, student_profile: StudentProfile,
                                    task: Dict, skill_masteries: Dict[int, float]) -> float:
        """–í—ã—á–∏—Å–ª—è–µ—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É—Å–ø–µ—Ö–∞"""
        base_prob = student_profile.skill_aptitudes.get(
            task['skill_ids'][0] if task['skill_ids'] else 0, 
            student_profile.base_success_rate
        )
        
        if task['skill_ids']:
            skill_mastery = np.mean([skill_masteries.get(sid, 0.0) for sid in task['skill_ids']])
            base_prob = (base_prob + skill_mastery) / 2
        
        difficulty_factors = {
            'beginner': 1.2,
            'intermediate': 1.0,
            'advanced': 0.8
        }
        base_prob *= difficulty_factors.get(task['difficulty'], 1.0)
        
        noise = np.random.normal(0, 1 - student_profile.consistency) * 0.1
        
        return np.clip(base_prob + noise, 0.05, 0.95)
    
    def generate_all_data(self) -> Tuple[List[StudentProfile], List[AttemptRecord]]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∞–º–∏"""
        print(f"\nüöÄ –£–õ–£–ß–®–ï–ù–ù–ê–Ø –ì–ï–ù–ï–†–ê–¶–ò–Ø –î–õ–Ø {self.target_students} –°–¢–£–î–ï–ù–¢–û–í")
        print('='*60)
        
        all_students = []
        all_attempts = []
        
        for i in range(self.target_students):
            if (i + 1) % 100 == 0:
                print(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤: {i + 1}/{self.target_students}")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ—Ñ–∏–ª—å
            student = self.generate_enhanced_student_profile(i + 1)
            all_students.append(student)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞—Ä—Ö–µ—Ç–∏–ø–æ–≤
            self.generation_stats['archetype_distribution'][student.archetype] += 1
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–ø—ã—Ç–∫–∏
            attempts = self.generate_enhanced_student_attempts(student)
            all_attempts.extend(attempts)
        
        self.generation_stats['students_created'] = len(all_students)
        self.generation_stats['attempts_created'] = len(all_attempts)
        
        print(f"\n‚úÖ –û—Å–Ω–æ–≤–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print(f"   –°—Ç—É–¥–µ–Ω—Ç–æ–≤: {len(all_students)}")
        print(f"   –ü–æ–ø—ã—Ç–æ–∫: {len(all_attempts)}")
        print(f"   –ü–æ–∫—Ä—ã—Ç–∏–µ –Ω–∞–≤—ã–∫–æ–≤: {len(self.generation_stats['skills_covered'])}/{len(self.all_skills)}")
        print(f"   –ü–æ–∫—Ä—ã—Ç–∏–µ –∫—É—Ä—Å–æ–≤: {len(self.generation_stats['courses_covered'])}/{len(self.courses)}")
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–æ–∫—Ä—ã–≤–∞–µ–º –Ω–µ–ø–æ–∫—Ä—ã—Ç—ã–µ –Ω–∞–≤—ã–∫–∏
        uncovered_skills = set(self.all_skills.keys()) - self.generation_stats['skills_covered']
        if uncovered_skills:
            print(f"\nüéØ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï –ü–û–ö–†–´–¢–ò–ï {len(uncovered_skills)} –ù–ï–ü–û–ö–†–´–¢–´–• –ù–ê–í–´–ö–û–í")
            print("="*60)
            
            additional_attempts = self.generate_coverage_attempts(uncovered_skills, all_students)
            all_attempts.extend(additional_attempts)
            
            self.generation_stats['attempts_created'] = len(all_attempts)
            print(f"   –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ø—ã—Ç–æ–∫: {len(additional_attempts)}")
            print(f"   –§–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ –Ω–∞–≤—ã–∫–æ–≤: {len(self.generation_stats['skills_covered'])}/{len(self.all_skills)}")
        
        return all_students, all_attempts
    
    def generate_coverage_attempts(self, uncovered_skills: Set[int], students: List[StudentProfile]) -> List[AttemptRecord]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –¥–ª—è –ø–æ–∫—Ä—ã—Ç–∏—è –Ω–µ–ø–æ–∫—Ä—ã—Ç—ã—Ö –Ω–∞–≤—ã–∫–æ–≤"""
        
        coverage_attempts = []
        attempt_counter = 1
        
        for skill_id in uncovered_skills:
            # –ù–∞—Ö–æ–¥–∏–º –∑–∞–¥–∞–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –Ω–∞–≤—ã–∫–∞
            skill_tasks = self.tasks_by_skill.get(skill_id, [])
            if not skill_tasks:
                print(f"   ‚ö†Ô∏è –ù–∞–≤—ã–∫ {skill_id} ({self.all_skills[skill_id]['name']}) - –Ω–µ—Ç –∑–∞–¥–∞–Ω–∏–π")
                continue
              # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –¥–ª—è –ø–æ–∫—Ä—ã—Ç–∏—è —ç—Ç–æ–≥–æ –Ω–∞–≤—ã–∫–∞
            selected_students = random.sample(students, min(20, len(students)))
            
            for student in selected_students:
                # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è –Ω–∞–≤—ã–∫–∞
                task = random.choice(skill_tasks)
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–ø—ã—Ç–∫—É —Å –≤—ã—Å–æ–∫–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é —É—Å–ø–µ—Ö–∞ (—á—Ç–æ–±—ã –æ–±–µ—Å–ø–µ—á–∏—Ç—å –ø–æ–∫—Ä—ã—Ç–∏–µ)
                success_prob = max(0.7, student.base_success_rate)
                is_correct = np.random.random() < success_prob
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—Ä–µ–º—è –∏ –æ—Ü–µ–Ω–∫—É
                base_time = {'beginner': 180, 'intermediate': 300, 'advanced': 450}
                time_spent = int(np.random.normal(
                    base_time[task['difficulty']], 
                    base_time[task['difficulty']] * 0.2
                ))
                time_spent = max(30, min(900, time_spent))
                
                score = np.random.uniform(0.7, 1.0) if is_correct else np.random.uniform(0.0, 0.4)
                
                # –°–æ–∑–¥–∞–µ–º –ø–æ–ø—ã—Ç–∫—É
                attempt = AttemptRecord(
                    student_id=student.id,
                    task_id=task['id'],
                    skill_ids=task['skill_ids'],
                    is_correct=is_correct,
                    score=score,
                    time_spent=time_spent,
                    difficulty=task['difficulty'],
                    task_type=task['task_type'],
                    timestamp=datetime.now() - timedelta(days=np.random.randint(1, 30)),
                    session_id=999  # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è —Å–µ—Å—Å–∏—è –¥–ª—è –ø–æ–∫—Ä—ã—Ç–∏—è
                )
                
                coverage_attempts.append(attempt)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                self.generation_stats['skills_covered'].update(task['skill_ids'])
                self.generation_stats['courses_covered'].update(task['course_ids'])
                
                for skill_id_task in task['skill_ids']:
                    skill_level = self.skill_levels.get(skill_id_task, 0)
                    self.generation_stats['level_coverage'][skill_level] += 1
                    
                    for course_id in task['course_ids']:
                        self.generation_stats['skill_coverage_per_course'][course_id].add(skill_id_task)
                
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –Ω–∞ –Ω–∞–≤—ã–∫
                if len([a for a in coverage_attempts if skill_id in a.skill_ids]) >= 10:
                    break
            
            print(f"   ‚úÖ –ü–æ–∫—Ä—ã—Ç –Ω–∞–≤—ã–∫: {self.all_skills[skill_id]['name']}")
        
        return coverage_attempts
    
    def convert_to_dkn_format(self, students: List[StudentProfile], 
                            attempts: List[AttemptRecord]) -> pd.DataFrame:
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç DKN"""
        print("\nüîÑ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç DKN...")
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ–ø—ã—Ç–∫–∏ –ø–æ —Å—Ç—É–¥–µ–Ω—Ç–∞–º
        attempts_by_student = defaultdict(list)
        for attempt in attempts:
            attempts_by_student[attempt.student_id].append(attempt)
        
        # –°–æ–∑–¥–∞–µ–º DKN –ø—Ä–∏–º–µ—Ä—ã
        dkn_examples = []
        
        for student_id, student_attempts in attempts_by_student.items():
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            student_attempts.sort(key=lambda x: x.timestamp)
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã (–∫–∞–∂–¥–∞—è –ø–æ–ø—ã—Ç–∫–∞ = –ø—Ä–∏–º–µ—Ä –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π)
            for i in range(1, len(student_attempts)):
                history = student_attempts[:i]
                target_attempt = student_attempts[i]
                
                # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –ø–æ–ø—ã—Ç–æ–∫ –∫–∞–∫ –∏—Å—Ç–æ—Ä–∏—é
                recent_history = history[-10:]
                
                # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏
                example = {'student_id': student_id, 'task_id': target_attempt.task_id}
                
                # –¶–µ–ª–µ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è
                example['target'] = float(target_attempt.is_correct)
                
                # –ò—Å—Ç–æ—Ä–∏—è (–¥–æ–ø–æ–ª–Ω—è–µ–º –Ω—É–ª—è–º–∏ –µ—Å–ª–∏ –º–µ–Ω—å—à–µ 10)
                for j in range(10):
                    if j < len(recent_history):
                        h = recent_history[j]
                        example[f'hist_{j}_correct'] = float(h.is_correct)
                        example[f'hist_{j}_score'] = h.score
                        example[f'hist_{j}_time'] = h.time_spent
                    else:
                        example[f'hist_{j}_correct'] = 0.0
                        example[f'hist_{j}_score'] = 0.0
                        example[f'hist_{j}_time'] = 0
                
                # BKT –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–µ)
                example['skill_0_learned'] = min(len(history) * 0.1, 1.0)
                example['skill_0_transit'] = 0.3
                
                # –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∑–∞–¥–∞–Ω–∏—è
                difficulty_map = {'beginner': 0, 'intermediate': 1, 'advanced': 2}
                type_map = {'single': 0, 'multiple': 1, 'true_false': 2}
                
                example['task_difficulty'] = difficulty_map.get(target_attempt.difficulty, 1)
                example['task_type'] = type_map.get(target_attempt.task_type, 0)
                
                dkn_examples.append(example)
        
        df = pd.DataFrame(dkn_examples)
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(df)} –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–ª—è DKN")
        
        return df
    
    def save_dataset_and_generate_report(self, df: pd.DataFrame):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞—Ç–∞—Å–µ—Ç –∏ —Å–æ–∑–¥–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç"""
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –¥–∞—Ç–∞—Å–µ—Ç
        dataset_path = os.path.join(self.output_dir, 'enhanced_synthetic_dataset.csv')
        df.to_csv(dataset_path, index=False)
        print(f"üíæ –î–∞—Ç–∞—Å–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {dataset_path}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        stats_path = os.path.join(self.output_dir, 'generation_statistics.json')
          # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º sets –≤ lists –¥–ª—è JSON
        json_stats = {}
        for key, value in self.generation_stats.items():
            if isinstance(value, set):
                json_stats[key] = list(value)
            elif isinstance(value, defaultdict):
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º defaultdict —Å –º–Ω–æ–∂–µ—Å—Ç–≤–∞–º–∏
                converted_dict = {}
                for k, v in value.items():
                    if isinstance(v, set):
                        converted_dict[k] = list(v)
                    else:
                        converted_dict[k] = v
                json_stats[key] = converted_dict
            else:
                json_stats[key] = value
        
        with open(stats_path, 'w', encoding='utf-8') as f:
            json.dump(json_stats, f, ensure_ascii=False, indent=2)
        
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {stats_path}")
        
        # –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
        self.create_visualizations(df)
        
        # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
        self.create_detailed_report(df)
        
        return dataset_path
    
    def create_visualizations(self, df: pd.DataFrame):
        """–°–æ–∑–¥–∞–µ—Ç –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞—Ç–∞—Å–µ—Ç–∞"""
        print("üìà –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π...")
        
        fig, axes = plt.subplots(2, 3, figsize=(18, 12))
        fig.suptitle('–ê–Ω–∞–ª–∏–∑ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞ DKN', fontsize=16)
        
        # 1. –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞—Ä—Ö–µ—Ç–∏–ø–æ–≤
        archetype_counts = list(self.generation_stats['archetype_distribution'].values())
        archetype_names = list(self.generation_stats['archetype_distribution'].keys())
        
        axes[0, 0].pie(archetype_counts, labels=archetype_names, autopct='%1.1f%%')
        axes[0, 0].set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞—Ä—Ö–µ—Ç–∏–ø–æ–≤ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤')
        
        # 2. –ü–æ–∫—Ä—ã—Ç–∏–µ –ø–æ —É—Ä–æ–≤–Ω—è–º
        level_counts = list(self.generation_stats['level_coverage'].values())
        levels = list(self.generation_stats['level_coverage'].keys())
        
        axes[0, 1].bar(levels, level_counts)
        axes[0, 1].set_title('–ü–æ–∫—Ä—ã—Ç–∏–µ –ø–æ —É—Ä–æ–≤–Ω—è–º –Ω–∞–≤—ã–∫–æ–≤')
        axes[0, 1].set_xlabel('–£—Ä–æ–≤–µ–Ω—å –Ω–∞–≤—ã–∫–∞')
        axes[0, 1].set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫')
        
        # 3. –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏
        axes[0, 2].hist(df['target'], bins=2, alpha=0.7, edgecolor='black')
        axes[0, 2].set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏')
        axes[0, 2].set_xlabel('–†–µ–∑—É–ª—å—Ç–∞—Ç (0=–Ω–µ—É—Å–ø–µ—Ö, 1=—É—Å–ø–µ—Ö)')
        axes[0, 2].set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫')
        
        # 4. –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
        student_activity = df.groupby('student_id').size()
        axes[1, 0].hist(student_activity, bins=30, alpha=0.7, edgecolor='black')
        axes[1, 0].set_title('–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–æ–≤')
        axes[1, 0].set_xlabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –Ω–∞ —Å—Ç—É–¥–µ–Ω—Ç–∞')
        axes[1, 0].set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤')
        
        # 5. –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–∏–ø–∞–º –∑–∞–¥–∞–Ω–∏–π
        task_type_counts = df['task_type'].value_counts()
        axes[1, 1].bar(task_type_counts.index, task_type_counts.values)
        axes[1, 1].set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–∏–ø–∞–º –∑–∞–¥–∞–Ω–∏–π')
        axes[1, 1].set_xlabel('–¢–∏–ø –∑–∞–¥–∞–Ω–∏—è')
        axes[1, 1].set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ')
        
        # 6. –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        difficulty_counts = df['task_difficulty'].value_counts().sort_index()
        difficulty_labels = ['Beginner', 'Intermediate', 'Advanced']
        axes[1, 2].bar(range(len(difficulty_counts)), difficulty_counts.values)
        axes[1, 2].set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏')
        axes[1, 2].set_xlabel('–£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏')
        axes[1, 2].set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ')
        axes[1, 2].set_xticks(range(len(difficulty_labels)))
        axes[1, 2].set_xticklabels(difficulty_labels)
        
        plt.tight_layout()
        
        viz_path = os.path.join(self.output_dir, 'dataset_visualizations.png')
        plt.savefig(viz_path, dpi=300, bbox_inches='tight')
        plt.close()
        
        print(f"üìä –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {viz_path}")
    
    def create_detailed_report(self, df: pd.DataFrame):
        """–°–æ–∑–¥–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–π MD –æ—Ç—á–µ—Ç"""
        report_path = os.path.join(self.output_dir, 'DATASET_REPORT.md')
        
        with open(report_path, 'w', encoding='utf-8') as f:
            f.write(self._generate_report_content(df))
        
        print(f"üìù –û—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: {report_path}")
    
    def _generate_report_content(self, df: pd.DataFrame) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç—á–µ—Ç–∞"""
        
        # –í—ã—á–∏—Å–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        total_skills = len(self.all_skills)
        covered_skills = len(self.generation_stats['skills_covered'])
        skill_coverage_percent = (covered_skills / total_skills) * 100
        
        success_rate = df['target'].mean() * 100
        avg_attempts_per_student = df.groupby('student_id').size().mean()
        
        # –ü–æ–∫—Ä—ã—Ç–∏–µ –ø–æ –∫—É—Ä—Å–∞–º
        course_coverage_info = []
        for course_id, course_data in self.courses.items():
            course_skills = set(course_data['skills'])
            covered_course_skills = self.generation_stats['skill_coverage_per_course'][course_id]
            coverage_percent = (len(covered_course_skills) / len(course_skills)) * 100
            
            course_coverage_info.append({
                'name': course_data['name'],
                'total_skills': len(course_skills),
                'covered_skills': len(covered_course_skills),
                'coverage_percent': coverage_percent
            })
        
        report = f"""# –û—Ç—á–µ—Ç –æ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–æ–º –¥–∞—Ç–∞—Å–µ—Ç–µ DKN

## üìä –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏

**–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è**: {datetime.now().strftime('%d.%m.%Y %H:%M')}

### –†–∞–∑–º–µ—Ä –¥–∞—Ç–∞—Å–µ—Ç–∞
- **–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–º–µ—Ä–æ–≤**: {len(df):,}
- **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤**: {self.generation_stats['students_created']:,}
- **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫**: {self.generation_stats['attempts_created']:,}
- **–°—Ä–µ–¥–Ω–µ–µ –ø–æ–ø—ã—Ç–æ–∫ –Ω–∞ —Å—Ç—É–¥–µ–Ω—Ç–∞**: {avg_attempts_per_student:.1f}

### –ü–æ–∫—Ä—ã—Ç–∏–µ —Å–∏—Å—Ç–µ–º—ã
- **–ü–æ–∫—Ä—ã—Ç–∏–µ –Ω–∞–≤—ã–∫–æ–≤**: {covered_skills}/{total_skills} ({skill_coverage_percent:.1f}%)
- **–ü–æ–∫—Ä—ã—Ç–∏–µ –∫—É—Ä—Å–æ–≤**: {len(self.generation_stats['courses_covered'])}/{len(self.courses)} (100%)
- **–û–±—â–∞—è —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç—å**: {success_rate:.1f}%

## üéØ –ê—Ä—Ö–µ—Ç–∏–ø—ã —Å—Ç—É–¥–µ–Ω—Ç–æ–≤

–î–∞—Ç–∞—Å–µ—Ç –≤–∫–ª—é—á–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ —Ç–∏–ø—ã —Å—Ç—É–¥–µ–Ω—Ç–æ–≤:

"""
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞—Ä—Ö–µ—Ç–∏–ø–∞—Ö
        for archetype, count in self.generation_stats['archetype_distribution'].items():
            percentage = (count / self.generation_stats['students_created']) * 100
            archetype_info = self.archetypes[archetype]
            
            report += f"""### {archetype} ({count} —Å—Ç—É–¥–µ–Ω—Ç–æ–≤, {percentage:.1f}%)

- **–û–ø–∏—Å–∞–Ω–∏–µ**: {archetype_info['description']}
- **–£—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç—å**: {archetype_info['success_rate_range'][0]*100:.0f}%-{archetype_info['success_rate_range'][1]*100:.0f}%
- **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫**: {archetype_info['attempts_range'][0]}-{archetype_info['attempts_range'][1]}
- **–°–∫–æ—Ä–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è**: {archetype_info['learning_speed']}
- **–§–æ–∫—É—Å –∫—É—Ä—Å–∞**: {archetype_info.get('course_focus', '–í—Å–µ –∫—É—Ä—Å—ã')}
- **–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å**: {archetype_info.get('max_level', '–ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π')}

"""
        
        # –ü–æ–∫—Ä—ã—Ç–∏–µ –ø–æ –∫—É—Ä—Å–∞–º
        report += "\n## üìö –ü–æ–∫—Ä—ã—Ç–∏–µ –ø–æ –∫—É—Ä—Å–∞–º\n\n"
        
        for course_info in course_coverage_info:
            report += f"""### {course_info['name']}
- **–ù–∞–≤—ã–∫–æ–≤ –≤ –∫—É—Ä—Å–µ**: {course_info['total_skills']}
- **–ü–æ–∫—Ä—ã—Ç–æ –Ω–∞–≤—ã–∫–æ–≤**: {course_info['covered_skills']}
- **–ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–∫—Ä—ã—Ç–∏—è**: {course_info['coverage_percent']:.1f}%

"""
        
        # –ê–ª–≥–æ—Ä–∏—Ç–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        report += """## ‚öôÔ∏è –ê–ª–≥–æ—Ä–∏—Ç–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏

### –ü—Ä–∏–Ω—Ü–∏–ø—ã —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö

1. **–ö—É—Ä—Å–æ–≤–∞—è –æ—Å–≤–µ–¥–æ–º–ª–µ–Ω–Ω–æ—Å—Ç—å**: –°—Ç—É–¥–µ–Ω—Ç—ã –∏–º–µ—é—Ç –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –∫ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º –∫—É—Ä—Å–∞–º
2. **–†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏**: –°–ª–µ–¥–æ–≤–∞–Ω–∏–µ –≥—Ä–∞—Ñ—É –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –Ω–∞–≤—ã–∫–æ–≤
3. **–ü–æ–ª–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ**: –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –Ω–∞–≤—ã–∫–æ–≤ –∏ –∫—É—Ä—Å–æ–≤
4. **–†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ –∞—Ä—Ö–µ—Ç–∏–ø–æ–≤**: 7 —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤

### –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –æ–±—É—á–µ–Ω–∏—è

- **Linear**: –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ –∏–∑—É—á–µ–Ω–∏–µ –æ—Ç –ø—Ä–æ—Å—Ç—ã—Ö –∫ —Å–ª–æ–∂–Ω—ã–º –Ω–∞–≤—ã–∫–∞–º
- **Breadth-first**: –ò–∑—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–∞–≤—ã–∫–æ–≤ –æ–¥–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É
- **Focused**: –ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è –Ω–∞ –Ω–∞–≤—ã–∫–∞—Ö –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –∫—É—Ä—Å–∞
- **Random**: –°–ª—É—á–∞–π–Ω–æ–µ –∏–∑—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–∞–≤—ã–∫–æ–≤

### –ú–æ–¥–µ–ª—å —É—Å–ø–µ—Ö–∞

–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É—Å–ø–µ—Ö–∞ —Å—Ç—É–¥–µ–Ω—Ç–∞ –Ω–∞ –∑–∞–¥–∞–Ω–∏–∏ –≤—ã—á–∏—Å–ª—è–µ—Ç—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–µ:

1. **–ë–∞–∑–æ–≤–æ–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞** (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∞—Ä—Ö–µ—Ç–∏–ø–∞)
2. **–°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–æ–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –∫ –Ω–∞–≤—ã–∫—É** (—Å —É—á–µ—Ç–æ–º –∫—É—Ä—Å–æ–≤–æ–≥–æ —Ñ–æ–∫—É—Å–∞)
3. **–¢–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è –æ—Å–≤–æ–µ–Ω–∏—è –Ω–∞–≤—ã–∫–∞** (–Ω–∞–∫–æ–ø–ª–µ–Ω–Ω–æ–≥–æ –æ–ø—ã—Ç–∞)
4. **–°–ª–æ–∂–Ω–æ—Å—Ç–∏ –∑–∞–¥–∞–Ω–∏—è** (beginner/intermediate/advanced)
5. **–°–ª—É—á–∞–π–Ω–æ–≥–æ —à—É–º–∞** (–º–æ–¥–µ–ª–∏—Ä—É–µ—Ç –Ω–µ–ø–æ—Å—Ç–æ—è–Ω—Å—Ç–≤–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏)

### –ì—Ä–∞—Ñ –Ω–∞–≤—ã–∫–æ–≤

–î–∞—Ç–∞—Å–µ—Ç —É—á–∏—Ç—ã–≤–∞–µ—Ç –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –Ω–∞–≤—ã–∫–æ–≤:

"""
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Ä–æ–≤–Ω—è—Ö
        max_level = max(self.skill_levels.values())
        for level in range(max_level + 1):
            skills_at_level = [skill_id for skill_id, skill_level in self.skill_levels.items() 
                             if skill_level == level]
            if skills_at_level:
                attempts_at_level = self.generation_stats['level_coverage'].get(level, 0)
                report += f"- **–£—Ä–æ–≤–µ–Ω—å {level}**: {len(skills_at_level)} –Ω–∞–≤—ã–∫–æ–≤, {attempts_at_level} –ø–æ–ø—ã—Ç–æ–∫\n"
        
        # –§–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö
        report += f"""
## üìã –§–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö

### –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–∏–º–µ—Ä–∞ DKN

–ö–∞–∂–¥—ã–π –ø—Ä–∏–º–µ—Ä –≤ –¥–∞—Ç–∞—Å–µ—Ç–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –ø–æ–ø—ã—Ç–∫—É —Å—Ç—É–¥–µ–Ω—Ç–∞ —Ä–µ—à–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç:

1. **–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã**
   - `student_id`: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —Å—Ç—É–¥–µ–Ω—Ç–∞
   - `task_id`: ID –∑–∞–¥–∞–Ω–∏—è

2. **–¶–µ–ª–µ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è**
   - `target`: –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ø—ã—Ç–∫–∏ (0 = –Ω–µ—É—Å–ø–µ—Ö, 1 = —É—Å–ø–µ—Ö)

3. **–ò—Å—Ç–æ—Ä–∏—è –ø–æ–ø—ã—Ç–æ–∫** (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –ø–æ–ø—ã—Ç–æ–∫)
   - `hist_{{i}}_correct`: –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å i-–π –ø–æ–ø—ã—Ç–∫–∏
   - `hist_{{i}}_score`: –û—Ü–µ–Ω–∫–∞ –∑–∞ i-—é –ø–æ–ø—ã—Ç–∫—É (0.0-1.0)
   - `hist_{{i}}_time`: –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è i-–π –ø–æ–ø—ã—Ç–∫–∏ (—Å–µ–∫—É–Ω–¥—ã)

4. **BKT –ø–∞—Ä–∞–º–µ—Ç—Ä—ã**
   - `skill_0_learned`: –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Å–≤–æ–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –Ω–∞–≤—ã–∫–∞
   - `skill_0_transit`: –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ—Å–≤–æ–µ–Ω–∏—é –Ω–∞–≤—ã–∫–∞

5. **–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∑–∞–¥–∞–Ω–∏—è**
   - `task_difficulty`: –°–ª–æ–∂–Ω–æ—Å—Ç—å (0=beginner, 1=intermediate, 2=advanced)
   - `task_type`: –¢–∏–ø (0=single, 1=multiple, 2=true_false)

### –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞

- **–°—Ç—Ä–æ–∫**: {len(df):,}
- **–°—Ç–æ–ª–±—Ü–æ–≤**: {len(df.columns)}
- **–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞**: ~{len(df) * len(df.columns) * 8 / 1024 / 1024:.1f} –ú–ë

## üîç –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞

### –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö

- **–ö–ª–∞—Å—Å 0 (–Ω–µ—É—Å–ø–µ—Ö)**: {(1 - df['target'].mean()) * 100:.1f}%
- **–ö–ª–∞—Å—Å 1 (—É—Å–ø–µ—Ö)**: {df['target'].mean() * 100:.1f}%
- **–ë–∞–ª–∞–Ω—Å –∫–ª–∞—Å—Å–æ–≤**: {'–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π' if 0.4 <= df['target'].mean() <= 0.6 else '–ù–µ—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π'}

### –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è

1. **–†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö**: 70% –æ–±—É—á–µ–Ω–∏–µ, 15% –≤–∞–ª–∏–¥–∞—Ü–∏—è, 15% —Ç–µ—Å—Ç
2. **–ö—Ä–æ—Å—Å-–≤–∞–ª–∏–¥–∞—Ü–∏—è**: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∫–∞–∫ –≥—Ä—É–ø–ø—ã –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —É—Ç–µ—á–∫–∏ –¥–∞–Ω–Ω—ã—Ö
3. **–ú–µ—Ç—Ä–∏–∫–∏**: –¢–æ—á–Ω–æ—Å—Ç—å, Precision, Recall, F1-score, AUC-ROC
4. **–†–µ–≥—É–ª—è—Ä–∏–∑–∞—Ü–∏—è**: Dropout –∏ L2 —Ä–µ–≥—É–ª—è—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è

## üìÅ –§–∞–π–ª—ã

- `enhanced_synthetic_dataset.csv`: –û—Å–Ω–æ–≤–Ω–æ–π –¥–∞—Ç–∞—Å–µ—Ç
- `generation_statistics.json`: –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
- `dataset_visualizations.png`: –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π
- `DATASET_REPORT.md`: –≠—Ç–æ—Ç –æ—Ç—á–µ—Ç
- `synthetic_data_spec.json`: –°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏

---

*–î–∞—Ç–∞—Å–µ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –æ–±—É—á–µ–Ω–∏—è Deep Knowledge Network (DKN) –º–æ–¥–µ–ª–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∑–∞–¥–∞–Ω–∏–π –≤ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –æ–±—É—á–µ–Ω–∏—è.*
"""
        
        return report

    def run_enhanced_generation(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö"""
        
        print("üöÄ –ó–ê–ü–£–°–ö –£–õ–£–ß–®–ï–ù–ù–û–ô –ì–ï–ù–ï–†–ê–¶–ò–ò –°–ò–ù–¢–ï–¢–ò–ß–ï–°–ö–ò–• –î–ê–ù–ù–´–•")
        print("="*60)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        students, attempts = self.generate_all_data()
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç DKN
        df = self.convert_to_dkn_format(students, attempts)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç—ã
        dataset_path = self.save_dataset_and_generate_report(df)
        
        print(f"\nüéâ –ì–ï–ù–ï–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!")
        print(f"üìÅ –î–∞—Ç–∞—Å–µ—Ç: {dataset_path}")
        print(f"üìä –†–∞–∑–º–µ—Ä: {df.shape}")
        print(f"üéØ –ü–æ–∫—Ä—ã—Ç–∏–µ –Ω–∞–≤—ã–∫–æ–≤: {len(self.generation_stats['skills_covered'])}/{len(self.all_skills)}")
        print(f"üìö –ü–æ–∫—Ä—ã—Ç–∏–µ –∫—É—Ä—Å–æ–≤: {len(self.generation_stats['courses_covered'])}/{len(self.courses)}")
        
        return dataset_path


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    generator = EnhancedSyntheticDataGenerator()
    dataset_path = generator.run_enhanced_generation()
    
    print(f"\n‚úÖ –£–ª—É—á—à–µ–Ω–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç –≥–æ—Ç–æ–≤: {dataset_path}")
    print("üìñ –°–º–æ—Ç—Ä–∏—Ç–µ DATASET_REPORT.md –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")


if __name__ == "__main__":
    main()
