#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã DKN –º–æ–¥–µ–ª–∏ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω:
1. –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–∞ –∏–∑ –±–∞–∑—ã
2. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–æ–¥–µ–ª–∏
3. –ü—Ä–æ–≥–æ–Ω —á–µ—Ä–µ–∑ DKN –º–æ–¥–µ–ª—å
4. –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
"""

import os
import sys
import django
from pathlib import Path
import torch
import numpy as np

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
project_root = Path(__file__).parent.parent.parent
sys.path.append(str(project_root))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'adaptive_learning.settings')
django.setup()

from django.contrib.auth.models import User
from django.db import models
from skills.models import Skill
from methodist.models import Task
from mlmodels.models import TaskAttempt, StudentSkillMastery
from student.models import StudentProfile

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã DKN
from data_processor import DKNDataProcessor, DKNDataset
from model import DKNModel, DKNConfig


def test_dkn_for_student(student_id: int = 2):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É DKN –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞"""
    print(f"üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ DKN –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞ ID: {student_id}")
    print("=" * 60)
    
    # 1. –ü—Ä–æ–≤–µ—Ä–∏–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å—Ç—É–¥–µ–Ω—Ç
    print("1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—É–¥–µ–Ω—Ç–∞...")
    try:
        user = User.objects.get(id=student_id)
        student_profile, created = StudentProfile.objects.get_or_create(user=user)
        print(f"   ‚úÖ –°—Ç—É–¥–µ–Ω—Ç: {user.username} (ID: {user.id})")
        if created:
            print(f"   üìù –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å —Å—Ç—É–¥–µ–Ω—Ç–∞")
        
        # –ü—Ä–æ–≤–µ—Ä–∏–º –ø–æ–ø—ã—Ç–∫–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞
        attempts_count = TaskAttempt.objects.filter(student=student_profile).count()
        print(f"   üìä –ü–æ–ø—ã—Ç–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–∞: {attempts_count}")
        
    except User.DoesNotExist:
        print(f"   ‚ùå –°—Ç—É–¥–µ–Ω—Ç —Å ID {student_id} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞: {e}")
        return False
    
    # 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
    print("\n2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è DKNDataProcessor...")
    try:
        processor = DKNDataProcessor(max_history_length=10)
        print(f"   ‚úÖ –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        print(f"   üìà –ù–∞–≤—ã–∫–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ: {len(processor.skill_to_id)}")
        print(f"   üìã –ó–∞–¥–∞–Ω–∏–π –≤ —Å–∏—Å—Ç–µ–º–µ: {len(processor.task_to_id)}")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞: {e}")
        return False
    
    # 3. –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∑–∞–¥–∞–Ω–∏–π
    print("\n3. –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π...")
    
    # –í–æ–∑—å–º–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–¥–∞–Ω–∏–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    test_tasks = Task.objects.all()[:5]  # –ü–µ—Ä–≤—ã–µ 5 –∑–∞–¥–∞–Ω–∏–π
    student_data_list = []
    
    for task in test_tasks:
        try:
            student_data = processor.get_student_data(student_id, task.id)
            student_data_list.append(student_data)
            print(f"   ‚úÖ –î–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è '{task.title}' (ID: {task.id})")
            
            # –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö
            history_count = len([h for h in student_data['history'] if h['task_id'] != 0])
            bkt_skills = len(student_data['bkt_params'])
            task_skills = len(student_data['task_skills'])
            
            print(f"      - –ò—Å—Ç–æ—Ä–∏—è: {history_count} —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫")
            print(f"      - BKT –Ω–∞–≤—ã–∫–∏: {bkt_skills}")
            print(f"      - –ù–∞–≤—ã–∫–∏ –∑–∞–¥–∞–Ω–∏—è: {task_skills}")
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è {task.id}: {e}")
    
    if not student_data_list:
        print("   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∏ –¥–ª—è –æ–¥–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è!")
        return False
    
    print(f"   üìä –í—Å–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {len(student_data_list)} –∑–∞–¥–∞–Ω–∏–π")
    
    # 4. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –±–∞—Ç—á–∞ –¥–∞–Ω–Ω—ã—Ö
    print("\n4. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –±–∞—Ç—á–∞ –¥–∞–Ω–Ω—ã—Ö...")
    try:
        batch_tensors = processor.prepare_batch(student_data_list)
        print("   ‚úÖ –ë–∞—Ç—á –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        
        # –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–µ–π
        print("   üì¶ –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏ —Ç–µ–Ω–∑–æ—Ä–æ–≤:")
        for key, tensor in batch_tensors.items():
            if isinstance(tensor, torch.Tensor):
                print(f"      - {key}: {tensor.shape} ({tensor.dtype})")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π
        print("\n   üîç –ê–Ω–∞–ª–∏–∑ –∑–Ω–∞—á–µ–Ω–∏–π:")
        print(f"      - task_ids: {batch_tensors['task_ids']}")
        print(f"      - task_difficulty: {batch_tensors['task_difficulty']}")
        print(f"      - task_type: {batch_tensors['task_type']}")
        print(f"      - skill_mask –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–≤—ã–∫–æ–≤: {batch_tensors['skill_mask'].sum(dim=1)}")
        print(f"      - current_bkt_avg[0]: {batch_tensors['current_bkt_avg'][0]}")
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –±–∞—Ç—á–∞: {e}")
        import traceback
        traceback.print_exc()
        return False
    
    # 5. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è DKN –º–æ–¥–µ–ª–∏
    print("\n5. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è DKN –º–æ–¥–µ–ª–∏...")
    try:
        config = DKNConfig()
        config.hidden_dim = 128
        config.dropout_rate = 0.1
        
        num_skills = len(processor.skill_to_id)
        num_tasks = len(processor.task_to_id)
        
        model = DKNModel(num_skills, num_tasks, config)
        model.eval()  # –†–µ–∂–∏–º –æ—Ü–µ–Ω–∫–∏
        
        print(f"   ‚úÖ –ú–æ–¥–µ–ª—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        print(f"   üß† –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏:")
        print(f"      - –ù–∞–≤—ã–∫–æ–≤: {num_skills}")
        print(f"      - –ó–∞–¥–∞–Ω–∏–π: {num_tasks}")
        print(f"      - –°–∫—Ä—ã—Ç—ã–π —Å–ª–æ–π: {config.hidden_dim}")
        print(f"      - Dropout: {config.dropout_rate}")
        
        # –ü–æ–¥—Å—á–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –º–æ–¥–µ–ª–∏
        total_params = sum(p.numel() for p in model.parameters())
        trainable_params = sum(p.numel() for p in model.parameters() if p.requires_grad)
        print(f"      - –í—Å–µ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {total_params:,}")
        print(f"      - –û–±—É—á–∞–µ–º—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {trainable_params:,}")
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–¥–µ–ª–∏: {e}")
        import traceback
        traceback.print_exc()
        return False
    
    # 6. –ü—Ä–æ–≥–æ–Ω —á–µ—Ä–µ–∑ –º–æ–¥–µ–ª—å
    print("\n6. –ü—Ä–æ–≥–æ–Ω –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ DKN –º–æ–¥–µ–ª—å...")
    try:
        with torch.no_grad():  # –û—Ç–∫–ª—é—á–∞–µ–º –≥—Ä–∞–¥–∏–µ–Ω—Ç—ã –¥–ª—è –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞
            predictions = model(batch_tensors)
            
        print("   ‚úÖ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print(f"   üìä –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å –≤—ã—Ö–æ–¥–∞: {predictions.shape}")
        print(f"   üìà –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è (–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ —É—Å–ø–µ—Ö–∞):")
        
        for i, (pred, task_data) in enumerate(zip(predictions, student_data_list)):
            task_id = task_data['task_id']
            task = Task.objects.get(id=task_id)
            prob = pred.item()
            
            print(f"      - –ó–∞–¥–∞–Ω–∏–µ {i+1} (ID: {task_id}): {prob:.4f} ({prob*100:.1f}%)")
            print(f"        '{task.title}' (—Å–ª–æ–∂–Ω–æ—Å—Ç—å: {task.difficulty})")
        
        # –ê–Ω–∞–ª–∏–∑ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
        pred_array = predictions.numpy()
        print(f"\n   üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π:")
        print(f"      - –ú–∏–Ω–∏–º—É–º: {pred_array.min():.4f}")
        print(f"      - –ú–∞–∫—Å–∏–º—É–º: {pred_array.max():.4f}")
        print(f"      - –°—Ä–µ–¥–Ω–µ–µ: {pred_array.mean():.4f}")
        print(f"      - –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {pred_array.std():.4f}")
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≥–æ–Ω–µ —á–µ—Ä–µ–∑ –º–æ–¥–µ–ª—å: {e}")
        import traceback
        traceback.print_exc()
        return False
    
    # 7. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    print("\n7. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π...")
    try:
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–¥–∞–Ω–∏—è –ø–æ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ —É—Å–ø–µ—Ö–∞
        task_recommendations = []
        for i, (pred, task_data) in enumerate(zip(predictions, student_data_list)):
            task_id = task_data['task_id']
            task = Task.objects.get(id=task_id)
            prob = pred.item()
            
            task_recommendations.append({
                'task_id': task_id,
                'task_title': task.title,
                'probability': prob,
                'difficulty': task.difficulty,
                'skills': [s.name for s in task.skills.all()]
            })
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ (–º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é)
        task_recommendations.sort(key=lambda x: x['probability'], reverse=True)
        
        print("   ‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã!")
        print("   üéØ –¢–æ–ø —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π (–ø–æ —É–±—ã–≤–∞–Ω–∏—é –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ —É—Å–ø–µ—Ö–∞):")
        
        for i, rec in enumerate(task_recommendations, 1):
            print(f"      {i}. {rec['task_title']} ({rec['probability']:.1%})")
            print(f"         –°–ª–æ–∂–Ω–æ—Å—Ç—å: {rec['difficulty']}, –ù–∞–≤—ã–∫–∏: {', '.join(rec['skills'][:3])}")
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {e}")
        import traceback
        traceback.print_exc()
        return False
    
    # 8. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    print("\n8. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–º–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è–º–∏...")
    try:
        import pandas as pd
        synthetic_path = "dataset/enhanced_synthetic_dataset.csv"
        
        if os.path.exists(synthetic_path):
            synthetic_df = pd.read_csv(synthetic_path)
            
            # –ù–∞–π–¥–µ–º –∑–∞–ø–∏—Å–∏ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞ 2 (–µ—Å–ª–∏ –µ—Å—Ç—å)
            student_2_data = synthetic_df[synthetic_df['student_id'] == 2]
            
            if len(student_2_data) > 0:
                synthetic_targets = student_2_data['target'].values[:5]  # –ü–µ—Ä–≤—ã–µ 5
                print(f"   üìä –°–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ —Ü–µ–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: {synthetic_targets}")
                print(f"   üìä –†–µ–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –º–æ–¥–µ–ª–∏: {pred_array}")
                
                if len(synthetic_targets) == len(pred_array):
                    diff = np.abs(synthetic_targets - pred_array)
                    print(f"   üìà –†–∞–∑–Ω–æ—Å—Ç—å (|synthetic - predicted|): {diff}")
                    print(f"   üìà –°—Ä–µ–¥–Ω—è—è —Ä–∞–∑–Ω–æ—Å—Ç—å: {diff.mean():.4f}")
            else:
                print("   ‚ö†Ô∏è  –î–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞ 2 –≤ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–æ–º –¥–∞—Ç–∞—Å–µ—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        else:
            print("   ‚ö†Ô∏è  –°–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–π –¥–∞—Ç–∞—Å–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
    except Exception as e:
        print(f"   ‚ö†Ô∏è  –û—à–∏–±–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏: {e}")
    
    print("\n" + "=" * 60)
    print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ DKN –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
    
    print("\nüéØ –í—ã–≤–æ–¥—ã:")
    print("   - DKN –º–æ–¥–µ–ª—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å—Ç—É–¥–µ–Ω—Ç–∞")
    print("   - –î–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑—É—é—Ç—Å—è –≤ —Ñ–æ—Ä–º–∞—Ç –º–æ–¥–µ–ª–∏")
    print("   - –ú–æ–¥–µ–ª—å –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è (0-1)")
    print("   - –†–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π")
    print("   - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è data_processor -> model -> predictions —Ä–∞–±–æ—Ç–∞–µ—Ç")
    
    return True


def analyze_student_profile(student_id: int = 2):
    """–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ñ–∏–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞"""
    print(f"\nüîç –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ñ–∏–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞ {student_id}")
    print("-" * 40)
    
    try:
        user = User.objects.get(id=student_id)
        student_profile = StudentProfile.objects.get(user=user)
        
        # –ê–Ω–∞–ª–∏–∑ –æ—Å–≤–æ–µ–Ω–∏—è –Ω–∞–≤—ã–∫–æ–≤
        masteries = StudentSkillMastery.objects.filter(student=student_profile)
        print(f"üìä –û—Å–≤–æ–µ–Ω–∏–µ –Ω–∞–≤—ã–∫–æ–≤ ({masteries.count()} –∑–∞–ø–∏—Å–µ–π):")
        
        for mastery in masteries[:5]:  # –ü–µ—Ä–≤—ã–µ 5
            print(f"   - {mastery.skill.name}: {mastery.current_mastery_prob:.3f}")
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ–ø—ã—Ç–æ–∫
        attempts = TaskAttempt.objects.filter(student=student_profile)
        print(f"\nüìä –ü–æ–ø—ã—Ç–∫–∏ —Ä–µ—à–µ–Ω–∏—è ({attempts.count()} –∑–∞–ø–∏—Å–µ–π):")
        
        for attempt in attempts[:5]:  # –ü–µ—Ä–≤—ã–µ 5
            print(f"   - {attempt.task.title}: {'‚úÖ' if attempt.is_correct else '‚ùå'} "
                  f"(–≤—Ä–µ–º—è: {attempt.time_spent}c)")
        
        if attempts.count() > 0:
            success_rate = attempts.filter(is_correct=True).count() / attempts.count()
            avg_time = attempts.aggregate(avg_time=models.Avg('time_spent'))['avg_time'] or 0
            print(f"\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
            print(f"   - –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1%}")
            print(f"   - –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {avg_time:.1f}c")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ—Ñ–∏–ª—è: {e}")


def test_full_recommendation_cycle(student_id: int = 7):
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π —á–µ—Ä–µ–∑ DKNRecommender
    –û—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–æ –≥–æ—Ç–æ–≤—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –≤—ã—Å–æ–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è
    """
    print(f"\nüöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–õ–ù–û–ì–û –¶–ò–ö–õ–ê –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ô")
    print("=" * 60)
    print(f"üìã –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞ ID: {student_id}")
    
    # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è DKNRecommender
    print("\n1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è DKNRecommender...")
    try:
        from recommender import DKNRecommender
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—É—é –º–æ–¥–µ–ª—å (–µ—Å–ª–∏ –µ—Å—Ç—å)
        model_paths = [
            "training/models/best_model.pth",
            "../checkpoints/best_model.pth", 
            "../best_enhanced_model.pth",
            "../best_simple_model.pth"
        ]
        
        model_path = None
        for path in model_paths:
            if os.path.exists(path):
                model_path = path
                break
        
        if model_path:
            print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–∞ –º–æ–¥–µ–ª—å: {model_path}")
            recommender = DKNRecommender(model_path)
            print(f"   ‚úÖ DKNRecommender –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        else:
            print(f"   ‚ö†Ô∏è  –û–±—É—á–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–µ–æ–±—É—á–µ–Ω–Ω—É—é")
            recommender = DKNRecommender("dummy_path.pth")  # –°–æ–∑–¥–∞—Å—Ç –Ω–µ–æ–±—É—á–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å
            print(f"   ‚úÖ DKNRecommender –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (–Ω–µ–æ–±—É—á–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å)")
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ DKNRecommender: {e}")
        import traceback
        traceback.print_exc()
        return False

    # 2. –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    print("\n2. –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π...")
    try:
        basic_recommendations = recommender.get_recommendations(
            student_id=student_id,
            num_recommendations=5
        )
        
        if basic_recommendations:
            print(f"   ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(basic_recommendations)} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")
            print("   üìã –ë–∞–∑–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
            
            for i, rec in enumerate(basic_recommendations, 1):
                print(f"      {i}. {rec.task_title}")
                print(f"         –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É—Å–ø–µ—Ö–∞: {rec.predicted_success_prob:.1%}")
                print(f"         –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {rec.confidence:.2f}")
                print(f"         –°–ª–æ–∂–Ω–æ—Å—Ç—å: {rec.difficulty}")
                print(f"         –ù–∞–≤—ã–∫–∏: {', '.join(rec.required_skills[:2])}")
                print(f"         –í—Ä–µ–º—è: ~{rec.estimated_time} –º–∏–Ω")
                print(f"         –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: {rec.reasoning[:100]}...")
                print()
        else:
            print("   ‚ö†Ô∏è  –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã")
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–∑–æ–≤—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {e}")
        import traceback
        traceback.print_exc()

    # 3. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    print("\n3. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É—Ä–æ–≤–Ω—é —Å–ª–æ–∂–Ω–æ—Å—Ç–∏...")
    difficulties = ['beginner', 'intermediate', 'advanced']
    
    for difficulty in difficulties:
        try:
            difficulty_recs = recommender.get_recommendations(
                student_id=student_id,
                num_recommendations=3,
                difficulty_preference=difficulty
            )
            
            print(f"   üìö {difficulty.upper()}: {len(difficulty_recs)} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")
            for rec in difficulty_recs:
                print(f"      - {rec.task_title} ({rec.predicted_success_prob:.1%})")
                
        except Exception as e:
            print(f"   ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –¥–ª—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ {difficulty}: {e}")

    # 4. –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print("\n4. –î–µ—Ç–∞–ª—å–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏...")
    try:
        if basic_recommendations:
            best_rec = basic_recommendations[0]
            explanation = recommender.explain_recommendation(
                student_id=student_id,
                task_id=best_rec.task_id
            )
            
            print(f"   üîç –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è: {best_rec.task_title}")
            print(f"   üìä –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É—Å–ø–µ—Ö–∞: {explanation.get('predicted_probability', 'N/A')}")
            print(f"   üìà –¢–∏–ø —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: {explanation.get('recommendation_type', 'N/A')}")
            print(f"   üéØ –ü–æ–ª—å–∑–∞ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è: {explanation.get('learning_benefit', 'N/A')}")
            print(f"   üß† –ê–Ω–∞–ª–∏–∑ –Ω–∞–≤—ã–∫–æ–≤:")
            
            skill_analysis = explanation.get('skill_analysis', {})
            for skill_name, skill_info in skill_analysis.items():
                if isinstance(skill_info, dict):
                    mastery = skill_info.get('current_mastery', 'N/A')
                    print(f"      - {skill_name}: —É—Ä–æ–≤–µ–Ω—å {mastery}")
                    
    except Exception as e:
        print(f"   ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è: {e}")

    # 5. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ–¥—Ö–æ–¥–æ–≤
    print("\n5. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ–¥—Ö–æ–¥–æ–≤ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π...")
    print("   üìä –ù–∏–∑–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π –ø–æ–¥—Ö–æ–¥ (test_dkn_for_student):")
    print("      ‚úÖ –ü—Ä—è–º–∞—è —Ä–∞–±–æ—Ç–∞ —Å DKN –º–æ–¥–µ–ª—å—é")
    print("      ‚úÖ –ü–æ–ª–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ –¥–∞–Ω–Ω—ã–º–∏")
    print("      ‚úÖ –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞")
    print("      ‚ùå –¢—Ä–µ–±—É–µ—Ç –∑–Ω–∞–Ω–∏—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–æ—Å—Ç–µ–π")
    
    print("\n   üìä –í—ã—Å–æ–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π –ø–æ–¥—Ö–æ–¥ (DKNRecommender):")
    print("      ‚úÖ –ì–æ—Ç–æ–≤—ã–µ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
    print("      ‚úÖ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ")
    print("      ‚úÖ –û–±—ä—è—Å–Ω–µ–Ω–∏—è –∏ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏—è")
    print("      ‚úÖ –ü—Ä–æ—Å—Ç–æ–π API –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")
    print("      ‚ùå –ú–µ–Ω—å—à–µ –∫–æ–Ω—Ç—Ä–æ–ª—è –Ω–∞–¥ –ø—Ä–æ—Ü–µ—Å—Å–æ–º")

    # 6. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∞–µ–≤—ã—Ö —Å–ª—É—á–∞–µ–≤
    print("\n6. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∞–µ–≤—ã—Ö —Å–ª—É—á–∞–µ–≤...")
    
    # –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å—Ç—É–¥–µ–Ω—Ç
    try:
        fake_recs = recommender.get_recommendations(student_id=99999, num_recommendations=3)
        print(f"   üìä –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å—Ç—É–¥–µ–Ω—Ç: {len(fake_recs)} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")
    except Exception as e:
        print(f"   ‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞: {type(e).__name__}")

    # –ë–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    try:
        many_recs = recommender.get_recommendations(student_id=student_id, num_recommendations=50)
        print(f"   üìä –ë–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: –ø–æ–ª—É—á–µ–Ω—ã {len(many_recs)}/50")
    except Exception as e:
        print(f"   ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –±–æ–ª—å—à–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {e}")

    print("\n" + "=" * 60)
    print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    
    print("\nüéØ –ó–∞–∫–ª—é—á–µ–Ω–∏–µ:")
    print("   ‚úÖ DKNRecommender —É—Å–ø–µ—à–Ω–æ –æ–±–æ—Ä–∞—á–∏–≤–∞–µ—Ç DKN –º–æ–¥–µ–ª—å")
    print("   ‚úÖ –í—ã—Å–æ–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è")
    print("   ‚úÖ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º —Ä–∞–±–æ—Ç–∞–µ—Ç")
    print("   ‚úÖ –û–±—ä—è—Å–Ω–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã")
    print("   ‚úÖ –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª: –ë–∞–∑–∞ ‚Üí –î–∞–Ω–Ω—ã–µ ‚Üí –ú–æ–¥–µ–ª—å ‚Üí –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
    
    return True


if __name__ == "__main__":
    try:
        print("üß™ –ü–û–õ–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï DKN –°–ò–°–¢–ï–ú–´")
        print("=" * 70)
        
        # 1. –¢–µ—Å—Ç –Ω–∏–∑–∫–æ—É—Ä–æ–≤–Ω–µ–≤–æ–≥–æ API (–ø—Ä—è–º–∞—è —Ä–∞–±–æ—Ç–∞ —Å –º–æ–¥–µ–ª—å—é)
        print("\nüìä –≠–¢–ê–ü 1: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∏–∑–∫–æ—É—Ä–æ–≤–Ω–µ–≤–æ–≥–æ API")
        success1 = test_dkn_for_student(student_id=7)  # User ID=7 (–ê–Ω–Ω–∞ –ö–æ–∑–ª–æ–≤–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏)
        
        if success1:
            print("‚úÖ –ù–∏–∑–∫–æ—É—Ä–æ–≤–Ω–µ–≤–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ!")
        else:
            print("‚ùå –ù–∏–∑–∫–æ—É—Ä–æ–≤–Ω–µ–≤–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ!")
        
        # 2. –¢–µ—Å—Ç –≤—ã—Å–æ–∫–æ—É—Ä–æ–≤–Ω–µ–≤–æ–≥–æ API (DKNRecommender)
        print("\nüìä –≠–¢–ê–ü 2: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã—Å–æ–∫–æ—É—Ä–æ–≤–Ω–µ–≤–æ–≥–æ API")
        success2 = test_full_recommendation_cycle(student_id=7)
        
        if success2:
            print("‚úÖ –í—ã—Å–æ–∫–æ—É—Ä–æ–≤–Ω–µ–≤–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ!")
        else:
            print("‚ùå –í—ã—Å–æ–∫–æ—É—Ä–æ–≤–Ω–µ–≤–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ!")
        
        # 3. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ñ–∏–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞
        print("\nüìä –≠–¢–ê–ü 3: –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ñ–∏–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞")
        analyze_student_profile(student_id=7)
        
        # 4. –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        print("\n" + "=" * 70)
        if success1 and success2:
            print("üéâ –í–°–ï –¢–ï–°–¢–´ DKN –°–ò–°–¢–ï–ú–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
            print("\n‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ:")
            print("   - –ù–∏–∑–∫–æ—É—Ä–æ–≤–Ω–µ–≤–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è: –ë–∞–∑–∞ ‚Üí –î–∞–Ω–Ω—ã–µ ‚Üí –ú–æ–¥–µ–ª—å")
            print("   - –í—ã—Å–æ–∫–æ—É—Ä–æ–≤–Ω–µ–≤–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è: –ú–æ–¥–µ–ª—å ‚Üí –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ ‚Üí API")
            print("   - –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª: –ë–∞–∑–∞ ‚Üí –î–∞–Ω–Ω—ã–µ ‚Üí –ú–æ–¥–µ–ª—å ‚Üí –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
            print("   - –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ production –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
        else:
            print("üí• –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ DKN –ü–†–û–í–ê–õ–ï–ù–´!")
            if not success1:
                print("   ‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –Ω–∏–∑–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–º API")
            if not success2:
                print("   ‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –≤—ã—Å–æ–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–º API")
            sys.exit(1)
            
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)
