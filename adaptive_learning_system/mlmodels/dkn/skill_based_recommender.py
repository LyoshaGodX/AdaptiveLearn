#!/usr/bin/env python3
"""
–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:
DKN –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è + –∞–Ω–∞–ª–∏–∑ –≥—Ä–∞—Ñ–∞ –Ω–∞–≤—ã–∫–æ–≤ + BKT –¥–∞–Ω–Ω—ã–µ

–ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª:
1. data_processor - –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã
2. model - –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π DKN 
3. skill_based_recommender - —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å —É—á–µ—Ç–æ–º –Ω–∞–≤—ã–∫–æ–≤
"""

import os
import sys
import django
from pathlib import Path
from typing import List, Dict, Optional, Tuple
from dataclasses import dataclass
import logging
import torch
import numpy as np

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
project_root = Path(__file__).parent.parent.parent
sys.path.append(str(project_root))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'adaptive_learning.settings')
django.setup()

from django.contrib.auth.models import User
from skills.models import Skill
from methodist.models import Task
from mlmodels.models import TaskAttempt, StudentSkillMastery
from student.models import StudentProfile

# –ò–º–ø–æ—Ä—Ç—ã DKN –º–æ–¥—É–ª–µ–π
from data_processor import DKNDataProcessor
from model import DKNModel, DKNConfig

logger = logging.getLogger(__name__)


@dataclass
class IntegratedRecommendation:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
    task_id: int
    task_title: str
    skill_name: str
    skill_mastery: float
    task_difficulty: str
    dkn_prediction: float  # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ DKN –º–æ–¥–µ–ª–∏
    priority: int  # 1-5, –≥–¥–µ 1 - —Å–∞–º—ã–π –≤–∞–∂–Ω—ã–π
    reasoning: str
    confidence: float  # –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏


class IntegratedSkillRecommender:
    """–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: DKN + –∞–Ω–∞–ª–∏–∑ –Ω–∞–≤—ã–∫–æ–≤"""
    
    def __init__(self, model_path: Optional[str] = None):
        self.mastery_threshold = 0.8  # –ù–∞–≤—ã–∫ —Å—á–∏—Ç–∞–µ—Ç—Å—è –æ—Å–≤–æ–µ–Ω–Ω—ã–º –ø—Ä–∏ 80%
        self.near_mastery_threshold = 0.6  # –ë–ª–∏–∑–∫–æ –∫ –æ—Å–≤–æ–µ–Ω–∏—é –ø—Ä–∏ 60%
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è DKN –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.data_processor = DKNDataProcessor()
        self.dkn_model = None
        
        # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ–±—É—á–µ–Ω–Ω—É—é DKN –º–æ–¥–µ–ª—å
        self._load_dkn_model(model_path)
    
    def _load_dkn_model(self, model_path: Optional[str]):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç DKN –º–æ–¥–µ–ª—å"""
        try:
            config = DKNConfig()
            self.dkn_model = DKNModel(
                num_skills=len(self.data_processor.skill_to_id),
                num_tasks=len(self.data_processor.task_to_id),
                config=config
            )
            
            if model_path and os.path.exists(model_path):
                checkpoint = torch.load(model_path, map_location='cpu')
                self.dkn_model.load_state_dict(checkpoint['model_state_dict'])
                print(f"‚úÖ DKN –º–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ {model_path}")
            else:
                print("‚ö†Ô∏è  –ò—Å–ø–æ–ª—å–∑—É—é –Ω–µ–æ–±—É—á–µ–Ω–Ω—É—é DKN –º–æ–¥–µ–ª—å")
                
            self.dkn_model.eval()
            
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ DKN –º–æ–¥–µ–ª–∏: {e}")
            self.dkn_model = None
      def get_recommendations(self, student_id: int, num_recommendations: int = 5) -> List[IntegratedRecommendation]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: DKN + –∞–Ω–∞–ª–∏–∑ –Ω–∞–≤—ã–∫–æ–≤
        
        –ê–ª–≥–æ—Ä–∏—Ç–º:
        1. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–∞–≤—ã–∫–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞ (BKT –¥–∞–Ω–Ω—ã–µ)
        2. –ü–æ–ª—É—á–∞–µ—Ç DKN –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –¥–ª—è –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –∑–∞–¥–∞–Ω–∏–π
        3. –ö–æ–º–±–∏–Ω–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        4. –ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∏—Ä—É–µ—Ç –ø–æ –≤–∞–∂–Ω–æ—Å—Ç–∏ –Ω–∞–≤—ã–∫–æ–≤ –∏ —Ç–æ—á–Ω–æ—Å—Ç–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
        """
        print(f"\nüéØ –ò–ù–¢–ï–ì–†–ò–†–û–í–ê–ù–ù–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –î–õ–Ø –°–¢–£–î–ï–ù–¢–ê {student_id}")
        print("=" * 60)
        
        try:
            # 1. –ü–æ–ª—É—á–∞–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞
            user = User.objects.get(id=student_id)
            student_profile = StudentProfile.objects.get(user=user)
            print(f"üë§ –°—Ç—É–¥–µ–Ω—Ç: {user.username}")
            
            # 2. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Å–≤–æ–µ–Ω–∏–µ –Ω–∞–≤—ã–∫–æ–≤
            skill_analysis = self._analyze_student_skills(student_profile)
            
            # 3. –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –∑–∞–¥–∞–Ω–∏–π –∏ DKN –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
            recommendations = self._build_integrated_recommendations(skill_analysis, student_profile, student_id)
            
            # 4. –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
            recommendations.sort(key=lambda x: (x.priority, -x.confidence, -x.dkn_prediction))
            
            return recommendations[:num_recommendations]
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return []
    
    def _analyze_student_skills(self, student_profile: StudentProfile) -> Dict[str, Dict]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ—Å–≤–æ–µ–Ω–∏–µ –Ω–∞–≤—ã–∫–æ–≤ —Å—Ç—É–¥–µ–Ω—Ç–æ–º"""
        print("\nüìä –ê–ù–ê–õ–ò–ó –û–°–í–û–ï–ù–ò–Ø –ù–ê–í–´–ö–û–í:")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–∞–≤—ã–∫–∏ –∏ –∏—Ö –æ—Å–≤–æ–µ–Ω–∏–µ
        skill_masteries = StudentSkillMastery.objects.filter(student=student_profile)
        
        skill_analysis = {}
        
        for mastery in skill_masteries:
            skill_name = mastery.skill.name
            mastery_prob = mastery.current_mastery_prob
            
            status = self._get_skill_status(mastery_prob)
            
            skill_analysis[skill_name] = {
                'skill_id': mastery.skill.id,
                'mastery_prob': mastery_prob,
                'status': status,
                'skill': mastery.skill
            }
            
            print(f"   {status} {skill_name}: {mastery_prob:.1%}")
        
        print(f"\nüìà –í—Å–µ–≥–æ –Ω–∞–≤—ã–∫–æ–≤: {len(skill_analysis)}")
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        mastered = sum(1 for s in skill_analysis.values() if s['status'] == '‚úÖ')
        learning = sum(1 for s in skill_analysis.values() if s['status'] == 'üîÑ')
        not_started = sum(1 for s in skill_analysis.values() if s['status'] == '‚ùå')
        
        print(f"   ‚úÖ –û—Å–≤–æ–µ–Ω–Ω—ã–µ: {mastered}")
        print(f"   üîÑ –ò–∑—É—á–∞–µ–º—ã–µ: {learning}")
        print(f"   ‚ùå –ù–µ –Ω–∞—á–∞—Ç—ã–µ: {not_started}")
        
        return skill_analysis
    
    def _get_skill_status(self, mastery_prob: float) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –æ—Å–≤–æ–µ–Ω–∏—è –Ω–∞–≤—ã–∫–∞"""
        if mastery_prob >= self.mastery_threshold:
            return '‚úÖ'  # –û—Å–≤–æ–µ–Ω
        elif mastery_prob >= self.near_mastery_threshold:
            return 'üîÑ'  # –ë–ª–∏–∑–∫–æ –∫ –æ—Å–≤–æ–µ–Ω–∏—é
        else:
            return '‚ùå'  # –ù–µ –æ—Å–≤–æ–µ–Ω
    
    def _build_skill_recommendations(self, skill_analysis: Dict, student_profile: StudentProfile) -> List[SkillBasedRecommendation]:
        """–°—Ç—Ä–æ–∏—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞–≤—ã–∫–æ–≤"""
        print("\nüéØ –ü–û–°–¢–†–û–ï–ù–ò–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ô:")
        
        recommendations = []
        
        # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –Ω–∞–≤—ã–∫–∞–º –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã
        for skill_name, skill_data in skill_analysis.items():
            skill = skill_data['skill']
            mastery_prob = skill_data['mastery_prob']
            status = skill_data['status']
            
            # –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –Ω–∞–≤—ã–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∏–∑—É—á–∞—Ç—å
            if status in ['üîÑ', '‚ùå']:
                # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –Ω–∞–≤—ã–∫–∞
                tasks = Task.objects.filter(skills=skill)[:3]  # –ú–∞–∫—Å–∏–º—É–º 3 –∑–∞–¥–∞–Ω–∏—è –Ω–∞ –Ω–∞–≤—ã–∫
                
                for task in tasks:
                    priority = self._calculate_priority(skill_name, mastery_prob, task, skill_analysis)
                    
                    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∑–∞–¥–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Å–≤–æ–µ–Ω–∏—è –Ω–∞–≤—ã–∫–∞
                    preferred_difficulty = self._choose_task_difficulty(mastery_prob, task.difficulty)
                    
                    # –°–æ–∑–¥–∞–µ–º –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ
                    reasoning = self._generate_reasoning(skill_name, mastery_prob, task, skill_analysis)
                    
                    recommendation = SkillBasedRecommendation(
                        task_id=task.id,
                        task_title=task.title,
                        skill_name=skill_name,
                        skill_mastery=mastery_prob,
                        task_difficulty=task.difficulty,
                        reasoning=reasoning,
                        priority=priority
                    )
                    
                    recommendations.append(recommendation)
                    
                    print(f"   üìã {task.title}")
                    print(f"      –ù–∞–≤—ã–∫: {skill_name} ({mastery_prob:.1%})")
                    print(f"      –°–ª–æ–∂–Ω–æ—Å—Ç—å: {task.difficulty}")
                    print(f"      –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority}")
                    print(f"      –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: {reasoning[:100]}...")
                    print()
        
        return recommendations
    
    def _calculate_priority(self, skill_name: str, mastery_prob: float, task: Task, skill_analysis: Dict) -> int:
        """
        –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–¥–∞–Ω–∏—è
        
        –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1 (—Å–∞–º—ã–π –≤–∞–∂–Ω—ã–π) - –±–∞–∑–æ–≤—ã–µ –Ω–µ–æ—Å–≤–æ–µ–Ω–Ω—ã–µ –Ω–∞–≤—ã–∫–∏
        –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 5 (–º–µ–Ω–µ–µ –≤–∞–∂–Ω—ã–π) - –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –Ω–∞–≤—ã–∫–∏
        """
        # –ë–∞–∑–æ–≤–∞—è –ª–æ–≥–∏–∫–∞: —á–µ–º –º–µ–Ω—å—à–µ –æ—Å–≤–æ–µ–Ω –Ω–∞–≤—ã–∫, —Ç–µ–º –≤—ã—à–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        if mastery_prob < 0.3:
            base_priority = 1  # –ö—Ä–∏—Ç–∏—á–Ω–æ –≤–∞–∂–Ω–æ
        elif mastery_prob < 0.6:
            base_priority = 2  # –í–∞–∂–Ω–æ
        else:
            base_priority = 3  # –°—Ä–µ–¥–Ω—è—è –≤–∞–∂–Ω–æ—Å—Ç—å
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∑–∞–¥–∞–Ω–∏—è
        if task.difficulty == 'beginner':
            difficulty_modifier = 0  # –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º –ø—Ä–æ—Å—Ç—ã–µ –∑–∞–¥–∞–Ω–∏—è
        elif task.difficulty == 'intermediate':
            difficulty_modifier = 1
        else:  # advanced
            difficulty_modifier = 2
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –Ω–∞–≤—ã–∫ –±–∞–∑–æ–≤—ã–º (–ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π)
        skill_tasks_count = Task.objects.filter(skills__name=skill_name).count()
        if skill_tasks_count > 10:  # –ú–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏–π = –±–∞–∑–æ–≤—ã–π –Ω–∞–≤—ã–∫
            base_priority -= 1  # –ü–æ–≤—ã—à–∞–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        
        final_priority = max(1, min(5, base_priority + difficulty_modifier))
        return final_priority
    
    def _choose_task_difficulty(self, mastery_prob: float, current_difficulty: str) -> str:
        """–í—ã–±–∏—Ä–∞–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â—É—é —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∑–∞–¥–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Å–≤–æ–µ–Ω–∏—è –Ω–∞–≤—ã–∫–∞"""
        if mastery_prob < 0.3:
            return 'beginner'  # –ù–∞—á–∏–Ω–∞–µ–º —Å –±–∞–∑–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è
        elif mastery_prob < 0.7:
            return 'intermediate'  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å—Ä–µ–¥–Ω–µ–º—É —É—Ä–æ–≤–Ω—é
        else:
            return 'advanced'  # –ú–æ–∂–µ–º –ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–ª–æ–∂–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
    
    def _generate_reasoning(self, skill_name: str, mastery_prob: float, task: Task, skill_analysis: Dict) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞–≤—ã–∫–∞
        if mastery_prob < 0.3:
            skill_status = "–Ω–µ –æ—Å–≤–æ–µ–Ω"
            action = "–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—á–∞—Ç—å –∏–∑—É—á–µ–Ω–∏–µ"
        elif mastery_prob < 0.7:
            skill_status = "—á–∞—Å—Ç–∏—á–Ω–æ –æ—Å–≤–æ–µ–Ω"
            action = "—Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞"
        else:
            skill_status = "–±–ª–∏–∑–æ–∫ –∫ –æ—Å–≤–æ–µ–Ω–∏—é"
            action = "–º–æ–∂–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∫ –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–º –∑–∞–¥–∞–Ω–∏—è–º"
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –Ω–∞–≤—ã–∫–∏
        related_skills = []
        for other_skill, other_data in skill_analysis.items():
            if other_skill != skill_name and other_data['mastery_prob'] > 0.8:
                related_skills.append(other_skill)
        
        base_reasoning = f"–ù–∞–≤—ã–∫ '{skill_name}' {skill_status} ({mastery_prob:.1%}), {action}."
        
        if related_skills and len(related_skills) <= 2:
            base_reasoning += f" –£ –≤–∞—Å —Ö–æ—Ä–æ—à–æ –æ—Å–≤–æ–µ–Ω—ã —Å–≤—è–∑–∞–Ω–Ω—ã–µ –Ω–∞–≤—ã–∫–∏: {', '.join(related_skills[:2])}."
        
        difficulty_reasoning = f" –ó–∞–¥–∞–Ω–∏–µ —É—Ä–æ–≤–Ω—è '{task.difficulty}' –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –≤–∞—à–µ–≥–æ —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è."
        
        return base_reasoning + difficulty_reasoning
    
    def print_detailed_analysis(self, student_id: int):
        """–í—ã–≤–æ–¥–∏—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
        print(f"\nüîç –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ô")
        print("=" * 60)
        
        recommendations = self.get_recommendations(student_id, num_recommendations=5)
        
        print(f"\nüéØ –¢–û–ü-5 –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ô:")
        print("-" * 40)
        
        for i, rec in enumerate(recommendations, 1):
            print(f"{i}. {rec.task_title}")
            print(f"   üéØ –ù–∞–≤—ã–∫: {rec.skill_name}")
            print(f"   üìä –û—Å–≤–æ–µ–Ω–∏–µ: {rec.skill_mastery:.1%}")
            print(f"   üìà –°–ª–æ–∂–Ω–æ—Å—Ç—å: {rec.task_difficulty}")
            print(f"   ‚≠ê –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {rec.priority}/5")
            print(f"   üí≠ –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: {rec.reasoning}")
            print()


def test_skill_recommender(student_id: int = 7):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–≤—ã–∫–æ–≤"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ô –ù–ê –û–°–ù–û–í–ï –ù–ê–í–´–ö–û–í")
    print("=" * 70)
    
    recommender = SkillBasedRecommender()
    recommender.print_detailed_analysis(student_id)
    
    print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print("\nüéØ –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã:")
    print("   ‚úÖ –ê–Ω–∞–ª–∏–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö BKT –¥–∞–Ω–Ω—ã—Ö –æ—Å–≤–æ–µ–Ω–∏—è –Ω–∞–≤—ã–∫–æ–≤")
    print("   ‚úÖ –£—á–µ—Ç –∏–µ—Ä–∞—Ä—Ö–∏–∏ –Ω–∞–≤—ã–∫–æ–≤ (–±–∞–∑–æ–≤—ã–µ ‚Üí –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ)")
    print("   ‚úÖ –ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–µ–ø–µ–Ω–∏ –æ—Å–≤–æ–µ–Ω–∏—è")
    print("   ‚úÖ –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –≤—ã–±–æ—Ä —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∑–∞–¥–∞–Ω–∏–π")
    print("   ‚úÖ –ü–æ–Ω—è—Ç–Ω—ã–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")
    print("   ‚úÖ –ü—Ä–æ—Å—Ç–∞—è –∏ –ø—Ä–æ–∑—Ä–∞—á–Ω–∞—è –ª–æ–≥–∏–∫–∞")


if __name__ == "__main__":
    test_skill_recommender(student_id=7)
