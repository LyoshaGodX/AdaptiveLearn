#!/usr/bin/env python3
"""
–î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–∞ ID=2

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞:
- TaskAttempt (–ø–æ–ø—ã—Ç–∫–∏ —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á)
- StudentSkillMastery (–æ—Å–≤–æ–µ–Ω–∏–µ –Ω–∞–≤—ã–∫–æ–≤)
- StudentLearningProfile (–ø—Ä–æ—Ñ–∏–ª—å –æ–±—É—á–µ–Ω–∏—è)
- –õ—é–±—ã–µ –¥—Ä—É–≥–∏–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
"""

import os
import sys
import django
from pathlib import Path
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
project_root = Path(__file__).parent.parent.parent
sys.path.append(str(project_root))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'adaptive_learning.settings')
django.setup()

from django.contrib.auth.models import User
from django.db import models
from skills.models import Skill
from methodist.models import Task, Course
from mlmodels.models import TaskAttempt, StudentSkillMastery, StudentLearningProfile
from student.models import StudentProfile


def check_student_data(student_id: int = 2):
    """–î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–∞"""
    print(f"üîç –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–∞ ID: {student_id}")
    print("=" * 70)
    
    # 1. –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    print("1. –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:")
    try:
        user = User.objects.get(id=student_id)
        print(f"   ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.username}")
        print(f"   üìß Email: {user.email}")
        print(f"   üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user.date_joined}")
        print(f"   üë§ –ò–º—è: {user.first_name} {user.last_name}")
        print(f"   üèÉ –ê–∫—Ç–∏–≤–µ–Ω: {user.is_active}")
        print(f"   üë®‚Äçüíº –ü–µ—Ä—Å–æ–Ω–∞–ª: {user.is_staff}")
        print(f"   üîë –°—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.is_superuser}")
    except User.DoesNotExist:
        print(f"   ‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID={student_id} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
      # 2. –ü—Ä–æ—Ñ–∏–ª—å —Å—Ç—É–¥–µ–Ω—Ç–∞
    print("\n2. –ü—Ä–æ—Ñ–∏–ª—å —Å—Ç—É–¥–µ–Ω—Ç–∞:")
    try:
        student_profile = StudentProfile.objects.get(user=user)
        print(f"   ‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –Ω–∞–π–¥–µ–Ω")
        # –í—ã–≤–µ–¥–µ–º –≤—Å–µ –ø–æ–ª—è –ø—Ä–æ—Ñ–∏–ª—è
        for field in student_profile._meta.fields:
            if field.name not in ['id', 'user']:
                value = getattr(student_profile, field.name)
                if value:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                    print(f"   üìã {field.name}: {value}")
                else:
                    print(f"   üìã {field.name}: (–ø—É—Å—Ç–æ)")
    except StudentProfile.DoesNotExist:
        print(f"   ‚ö†Ô∏è  –ü—Ä–æ—Ñ–∏–ª—å —Å—Ç—É–¥–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
      # 3. –ü–æ–ø—ã—Ç–∫–∏ —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á (TaskAttempt)
    print("\n3. –ü–æ–ø—ã—Ç–∫–∏ —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á (TaskAttempt):")
    attempts = TaskAttempt.objects.filter(student_id=student_id)
    print(f"   üìä –í—Å–µ–≥–æ –ø–æ–ø—ã—Ç–æ–∫: {attempts.count()}")
    
    if attempts.exists():
        print("   üìã –î–µ—Ç–∞–ª–∏ –ø–æ–ø—ã—Ç–æ–∫:")
        for i, attempt in enumerate(attempts.order_by('-started_at')[:10], 1):
            print(f"   {i:2d}. –ó–∞–¥–∞—á–∞: {attempt.task.title if attempt.task else '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}")
            print(f"       üÜî Task ID: {attempt.task_id}")
            print(f"       ‚úÖ –£—Å–ø–µ—Ö: {attempt.is_correct}")
            print(f"       üìÖ –ù–∞—á–∞–ª–æ: {attempt.started_at}")
            print(f"       ‚è±Ô∏è  –í—Ä–µ–º—è: {attempt.time_spent}—Å")
            if hasattr(attempt, 'given_answer') and attempt.given_answer:
                print(f"       üí≠ –û—Ç–≤–µ—Ç: {str(attempt.given_answer)[:100]}...")
            print()
    else:
        print("   ‚ùå –ü–æ–ø—ã—Ç–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    
    # 4. –û—Å–≤–æ–µ–Ω–∏–µ –Ω–∞–≤—ã–∫–æ–≤ (StudentSkillMastery)
    print("4. –û—Å–≤–æ–µ–Ω–∏–µ –Ω–∞–≤—ã–∫–æ–≤ (StudentSkillMastery):")
    skill_masteries = StudentSkillMastery.objects.filter(student_id=student_id)
    print(f"   üìä –ù–∞–≤—ã–∫–æ–≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è: {skill_masteries.count()}")    
    if skill_masteries.exists():
        print("   üìã –î–µ—Ç–∞–ª–∏ –æ—Å–≤–æ–µ–Ω–∏—è –Ω–∞–≤—ã–∫–æ–≤:")
        for mastery in skill_masteries.order_by('-current_mastery_prob')[:15]:
            print(f"   ‚Ä¢ {mastery.skill.name}: {mastery.current_mastery_prob:.3f}")
            print(f"     BKT: L={mastery.transition_prob:.3f}, G={mastery.guess_prob:.3f}, "
                  f"S={mastery.slip_prob:.3f}, P={mastery.initial_mastery_prob:.3f}")
            print(f"     –û–±–Ω–æ–≤–ª–µ–Ω–æ: {mastery.last_updated}")
            print()
    else:
        print("   ‚ùå –î–∞–Ω–Ω—ã—Ö –æ–± –æ—Å–≤–æ–µ–Ω–∏–∏ –Ω–∞–≤—ã–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    
    # 5. –ü—Ä–æ—Ñ–∏–ª—å –æ–±—É—á–µ–Ω–∏—è (StudentLearningProfile)
    print("5. –ü—Ä–æ—Ñ–∏–ª—å –æ–±—É—á–µ–Ω–∏—è (StudentLearningProfile):")
    learning_profiles = StudentLearningProfile.objects.filter(student_id=student_id)
    print(f"   üìä –ü—Ä–æ—Ñ–∏–ª–µ–π –æ–±—É—á–µ–Ω–∏—è: {learning_profiles.count()}")
    
    if learning_profiles.exists():
        print("   üìã –î–µ—Ç–∞–ª–∏ –ø—Ä–æ—Ñ–∏–ª–µ–π:")
        for profile in learning_profiles:
            print(f"   ‚Ä¢ –¢–∏–ø: {profile.learning_style}")
            print(f"     –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è: {profile.preferences}")
            print(f"     –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: {profile.metadata}")
            print(f"     –°–æ–∑–¥–∞–Ω: {profile.created_at}")
            print()
    else:
        print("   ‚ùå –ü—Ä–æ—Ñ–∏–ª–µ–π –æ–±—É—á–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    
    # 6. –ü—Ä–æ–≤–µ—Ä–∏–º –≤—Å–µ –º–æ–¥–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Å—Ç—É–¥–µ–Ω—Ç–∞
    print("6. –ü–æ–∏—Å–∫ –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥–µ–ª—è—Ö:")
    
    # –ü—Ä–æ–≤–µ—Ä–∏–º –≤—Å–µ –º–æ–¥–µ–ª–∏ –∏–∑ mlmodels
    from mlmodels import models as ml_models
    model_classes = [getattr(ml_models, name) for name in dir(ml_models) 
                    if isinstance(getattr(ml_models, name), type) and 
                    issubclass(getattr(ml_models, name), django.db.models.Model)]
    
    for model_class in model_classes:
        if hasattr(model_class, 'student_id') or hasattr(model_class, 'student'):
            try:
                if hasattr(model_class, 'student_id'):
                    count = model_class.objects.filter(student_id=student_id).count()
                else:
                    count = model_class.objects.filter(student=user).count()
                
                if count > 0:
                    print(f"   ‚úÖ {model_class.__name__}: {count} –∑–∞–ø–∏—Å–µ–π")
                    
                    # –ü–æ–∫–∞–∂–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤
                    if hasattr(model_class, 'student_id'):
                        samples = model_class.objects.filter(student_id=student_id)[:3]
                    else:
                        samples = model_class.objects.filter(student=user)[:3]
                    
                    for sample in samples:
                        print(f"      - {sample}")
                        
            except Exception as e:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
    
    # 7. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    print("\n7. –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:")
    print(f"   üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {User.objects.count()}")
    print(f"   üéì –ü—Ä–æ—Ñ–∏–ª–µ–π —Å—Ç—É–¥–µ–Ω—Ç–æ–≤: {StudentProfile.objects.count()}")
    print(f"   üìù –í—Å–µ–≥–æ –ø–æ–ø—ã—Ç–æ–∫: {TaskAttempt.objects.count()}")
    print(f"   üß† –ó–∞–ø–∏—Å–µ–π –æ—Å–≤–æ–µ–Ω–∏—è –Ω–∞–≤—ã–∫–æ–≤: {StudentSkillMastery.objects.count()}")
    print(f"   üìä –ü—Ä–æ—Ñ–∏–ª–µ–π –æ–±—É—á–µ–Ω–∏—è: {StudentLearningProfile.objects.count()}")
    print(f"   üìö –ù–∞–≤—ã–∫–æ–≤: {Skill.objects.count()}")
    print(f"   üìã –ó–∞–¥–∞—á: {Task.objects.count()}")
    print(f"   üéØ –ö—É—Ä—Å–æ–≤: {Course.objects.count()}")
    
    # 8. –ü–æ–ø—ã—Ç–∫–∏ –¥–ª—è –¥—Ä—É–≥–∏—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ (–¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è)
    print("\n8. –î–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è - –ø–æ–ø—ã—Ç–∫–∏ –¥—Ä—É–≥–∏—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤:")
    other_attempts = TaskAttempt.objects.exclude(student_id=student_id).values('student_id').annotate(
        count=models.Count('id')
    ).order_by('-count')[:5]
    
    for attempt_stat in other_attempts:
        student_id_other = attempt_stat['student_id']
        count = attempt_stat['count']
        try:
            other_user = User.objects.get(id=student_id_other)
            print(f"   üë§ –°—Ç—É–¥–µ–Ω—Ç {other_user.username} (ID: {student_id_other}): {count} –ø–æ–ø—ã—Ç–æ–∫")
        except User.DoesNotExist:
            print(f"   üë§ –°—Ç—É–¥–µ–Ω—Ç ID {student_id_other}: {count} –ø–æ–ø—ã—Ç–æ–∫")


if __name__ == "__main__":
    check_student_data(2)
    print("\n" + "=" * 70)
    print("üîç –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
