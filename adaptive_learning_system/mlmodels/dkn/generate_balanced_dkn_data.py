#!/usr/bin/env python3
"""
–£–õ–£–ß–®–ï–ù–ù–´–ô –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è DKN —Å –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ–∫—Ä—ã—Ç–∏–µ–º

–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:
1. –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ –ø–æ —É—Ä–æ–≤–Ω—è–º –Ω–∞–≤—ã–∫–æ–≤
2. –ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –∫—É—Ä—Å–æ–≤
3. –†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –æ–±—É—á–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
4. –£–ª—É—á—à–µ–Ω–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
"""

import sys
import os
import json
import numpy as np
import pandas as pd
from typing import Dict, List, Set, Tuple, Optional, Any
from datetime import datetime, timedelta
from dataclasses import dataclass, asdict
from collections import defaultdict
import random
from pathlib import Path
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
warnings.filterwarnings('ignore')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
project_root = Path(__file__).parent.parent.parent
sys.path.append(str(project_root))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'adaptive_learning.settings')

import django
django.setup()

from skills.models import Skill
from methodist.models import Task, Course
from django.contrib.auth.models import User


@dataclass
class SkillState:
    """–°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞–≤—ã–∫–∞ –¥–ª—è BKT"""
    skill_id: int
    skill_name: str
    level: int
    prior_knowledge: float
    learn_rate: float
    guess_rate: float
    slip_rate: float
    current_mastery: float
    prerequisites: List[int]


@dataclass
class TaskAction:
    """–î–µ–π—Å—Ç–≤–∏–µ - –≤—ã–±–æ—Ä –∑–∞–¥–∞–Ω–∏—è"""
    task_id: int
    skill_id: int
    difficulty: str
    task_type: str
    course_id: int


@dataclass
class StudentArchetype:
    """–ê—Ä—Ö–µ—Ç–∏–ø —Å—Ç—É–¥–µ–Ω—Ç–∞ –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è"""
    name: str
    base_success_rate: float
    learning_speed: float
    max_level_progression: int  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å, –¥–æ –∫–æ—Ç–æ—Ä–æ–≥–æ –¥–æ–π–¥–µ—Ç
    preferred_difficulty: str
    session_length: Tuple[int, int]  # –î–∏–∞–ø–∞–∑–æ–Ω –¥–ª–∏–Ω—ã —Å–µ—Å—Å–∏–∏
    course_focus: Optional[int]  # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π –∫—É—Ä—Å


class BalancedDKNDataGenerator:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ–∫—Ä—ã—Ç–∏–µ–º"""
    
    def __init__(self, target_students: int = 1500, output_path: str = "dataset"):
        self.target_students = target_students
        self.output_path = Path(output_path)
        self.output_path.mkdir(exist_ok=True)
        
        # –ê—Ä—Ö–µ—Ç–∏–ø—ã —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
        self.student_archetypes = [
            StudentArchetype("novice_basic", 0.4, 0.2, 5, "beginner", (15, 30), 1),
            StudentArchetype("novice_persistent", 0.3, 0.3, 8, "beginner", (30, 50), 1),
            StudentArchetype("average_balanced", 0.5, 0.3, 12, "intermediate", (25, 45), None),
            StudentArchetype("advanced_fast", 0.7, 0.5, 16, "intermediate", (40, 70), None),
            StudentArchetype("expert_focused", 0.8, 0.4, 16, "advanced", (50, 80), 2),
            StudentArchetype("ml_specialist", 0.6, 0.4, 16, "intermediate", (35, 60), 3),
        ]
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∫—Ä—ã—Ç–∏—è
        self.min_attempts_per_skill = 500  # –ú–∏–Ω–∏–º—É–º –ø–æ–ø—ã—Ç–æ–∫ –Ω–∞ –Ω–∞–≤—ã–∫
        self.level_progression_bias = 0.3  # –°–∫–ª–æ–Ω–Ω–æ—Å—Ç—å –∫ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—é –ø–æ —É—Ä–æ–≤–Ω—è–º
        self.course_balance_weight = 0.5   # –í–µ—Å –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏ –∫—É—Ä—Å–æ–≤
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        self._load_skills_and_tasks()
        self._build_skill_graph()
        self._initialize_statistics()
        self._create_coverage_targets()
    
    def _load_skills_and_tasks(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞–≤—ã–∫–∏ –∏ –∑–∞–¥–∞–Ω–∏—è –∏–∑ –±–∞–∑—ã"""
        print("üìö –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞–≤—ã–∫–æ–≤ –∏ –∑–∞–¥–∞–Ω–∏–π –∏–∑ –±–∞–∑—ã...")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞–≤—ã–∫–∏
        skills_queryset = Skill.objects.prefetch_related('prerequisites')
        self.skills = {}
        self.skill_levels = defaultdict(list)
        
        for skill in skills_queryset:
            level = getattr(skill, 'level', self._calculate_skill_level(skill))
            
            skill_state = SkillState(
                skill_id=skill.id,
                skill_name=skill.name,
                level=level,
                prior_knowledge=0.1,
                learn_rate=0.3,
                guess_rate=0.2,
                slip_rate=0.1,
                current_mastery=0.1,
                prerequisites=[p.id for p in skill.prerequisites.all()]
            )
            
            self.skills[skill.id] = skill_state
            self.skill_levels[level].append(skill.id)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–¥–∞–Ω–∏—è
        tasks_queryset = Task.objects.prefetch_related('skills', 'courses')
        self.tasks = {}
        self.tasks_by_skill = defaultdict(list)
        self.tasks_by_course = defaultdict(list)
        
        for task in tasks_queryset:
            task_skills = list(task.skills.all())
            if not task_skills:
                continue
                
            task_courses = list(task.courses.all())
            course_id = task_courses[0].id if task_courses else 1
                
            task_action = TaskAction(
                task_id=task.id,
                skill_id=task_skills[0].id,
                difficulty=task.difficulty or 'intermediate',
                task_type=task.task_type or 'single',
                course_id=course_id
            )
            
            self.tasks[task.id] = task_action
            
            for skill in task_skills:
                self.tasks_by_skill[skill.id].append(task_action)
            
            for course in task_courses:
                self.tasks_by_course[course.id].append(task_action)
        
        print(f"   ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –Ω–∞–≤—ã–∫–æ–≤: {len(self.skills)}")
        print(f"   ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: {len(self.tasks)}")
        print(f"   ‚úÖ –£—Ä–æ–≤–Ω–µ–π –Ω–∞–≤—ã–∫–æ–≤: {len(self.skill_levels)}")
        print(f"   ‚úÖ –ö—É—Ä—Å–æ–≤ —Å –∑–∞–¥–∞–Ω–∏—è–º–∏: {len(self.tasks_by_course)}")
    
    def _calculate_skill_level(self, skill):
        """–í—ã—á–∏—Å–ª—è–µ—Ç —É—Ä–æ–≤–µ–Ω—å –Ω–∞–≤—ã–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–ø–æ—Å—ã–ª–æ–∫"""
        if not skill.prerequisites.exists():
            return 1
        
        max_prereq_level = 0
        for prereq in skill.prerequisites.all():
            prereq_level = getattr(prereq, 'level', self._calculate_skill_level(prereq))
            max_prereq_level = max(max_prereq_level, prereq_level)
        
        return max_prereq_level + 1
    
    def _build_skill_graph(self):
        """–°—Ç—Ä–æ–∏—Ç –≥—Ä–∞—Ñ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –Ω–∞–≤—ã–∫–æ–≤"""
        print("üï∏Ô∏è –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∞ –Ω–∞–≤—ã–∫–æ–≤...")
        
        self.skill_graph = {}
        self.reverse_graph = defaultdict(list)
        
        for skill_id, skill_state in self.skills.items():
            self.skill_graph[skill_id] = skill_state.prerequisites
            
            for prereq_id in skill_state.prerequisites:
                self.reverse_graph[prereq_id].append(skill_id)
        
        print(f"   ‚úÖ –ü–æ—Å—Ç—Ä–æ–µ–Ω –≥—Ä–∞—Ñ: {len(self.skill_graph)} –Ω–∞–≤—ã–∫–æ–≤")
        print(f"   ‚úÖ –°–≤—è–∑–µ–π: {sum(len(prereqs) for prereqs in self.skill_graph.values())}")
    
    def _initialize_statistics(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
        self.stats = {
            'students_generated': 0,
            'records_generated': 0,
            'skills_covered': set(),
            'courses_covered': set(),
            'level_coverage': defaultdict(int),
            'difficulty_distribution': defaultdict(int),
            'type_distribution': defaultdict(int),
            'skill_individual_coverage': defaultdict(int),
            'course_coverage': defaultdict(int),
            'archetype_distribution': defaultdict(int)
        }
    
    def _create_coverage_targets(self):
        """–°–æ–∑–¥–∞–µ—Ç —Ü–µ–ª–∏ –ø–æ–∫—Ä—ã—Ç–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–≤–Ω—è –∏ –∫—É—Ä—Å–∞"""
        print("üéØ –°–æ–∑–¥–∞–Ω–∏–µ —Ü–µ–ª–µ–π –ø–æ–∫—Ä—ã—Ç–∏—è...")
        
        # –¶–µ–ª–∏ –ø–æ–∫—Ä—ã—Ç–∏—è –ø–æ —É—Ä–æ–≤–Ω—è–º (—á–µ–º –≤—ã—à–µ —É—Ä–æ–≤–µ–Ω—å, —Ç–µ–º –º–µ–Ω—å—à–µ, –Ω–æ –Ω–µ –Ω–æ–ª—å)
        self.level_targets = {}
        max_level = max(self.skill_levels.keys())
        
        for level in self.skill_levels.keys():
            # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ —É–±—ã–≤–∞–Ω–∏–µ, –Ω–æ —Å –º–∏–Ω–∏–º—É–º–æ–º
            base_attempts = self.target_students * 30  # –ë–∞–∑–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
            level_factor = np.exp(-(level - 1) * 0.3)  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ —É–±—ã–≤–∞–Ω–∏–µ
            min_attempts = self.min_attempts_per_skill  # –ú–∏–Ω–∏–º—É–º –Ω–∞ –Ω–∞–≤—ã–∫
            
            attempts_per_level = max(min_attempts, int(base_attempts * level_factor))
            self.level_targets[level] = attempts_per_level
        
        # –¶–µ–ª–∏ –ø–æ–∫—Ä—ã—Ç–∏—è –ø–æ –∫—É—Ä—Å–∞–º (—Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ)
        course_ids = list(self.tasks_by_course.keys())
        attempts_per_course = (self.target_students * 50) // len(course_ids)
        self.course_targets = {course_id: attempts_per_course for course_id in course_ids}
        
        print(f"   ‚úÖ –¶–µ–ª–∏ –ø–æ —É—Ä–æ–≤–Ω—è–º: {dict(self.level_targets)}")
        print(f"   ‚úÖ –¶–µ–ª–∏ –ø–æ –∫—É—Ä—Å–∞–º: {dict(self.course_targets)}")
    
    def generate_student_with_archetype(self, student_id: int, archetype: StudentArchetype) -> List[Dict]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å—Ç—É–¥–µ–Ω—Ç–∞ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º –∞—Ä—Ö–µ—Ç–∏–ø–æ–º"""
        records = []
        
        # –ù–∞—á–∞–ª—å–Ω—ã–µ –Ω–∞–≤—ã–∫–∏
        skill_masteries = {skill_id: np.random.uniform(0.05, 0.15) 
                          for skill_id in self.skills.keys()}
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞–≤—ã–∫–∏
        available_skills = self.get_available_skills(skill_masteries)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–µ—Å—Å–∏–∏
        session_length = np.random.randint(*archetype.session_length)
        current_time = datetime.now() - timedelta(days=random.randint(1, 60))
        
        success_streak = 0
        failure_streak = 0
        
        for attempt in range(session_length):
            # –í—ã–±–∏—Ä–∞–µ–º –Ω–∞–≤—ã–∫ —Å —É—á–µ—Ç–æ–º –∞—Ä—Ö–µ—Ç–∏–ø–∞ –∏ –ø–æ–∫—Ä—ã—Ç–∏—è
            target_skill = self._select_target_skill_balanced(
                skill_masteries, available_skills, archetype
            )
            
            if not target_skill or target_skill not in self.tasks_by_skill:
                # –ï—Å–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–∞–≤—ã–∫–æ–≤, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å
                target_skill = self._force_unlock_next_level(skill_masteries, archetype)
                if not target_skill:
                    break
            
            # –í—ã–±–∏—Ä–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ
            task = self._select_task_for_skill(target_skill, archetype, skill_masteries)
            if not task:
                continue
            
            # –°–∏–º—É–ª–∏—Ä—É–µ–º –ø–æ–ø—ã—Ç–∫—É
            is_correct, skill_progress = self._simulate_attempt(
                skill_masteries, task, archetype, success_streak, failure_streak
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–æ
            old_mastery = skill_masteries[target_skill]
            skill_masteries[target_skill] = min(0.99, max(0.01, old_mastery + skill_progress))
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞–≤—ã–∫–∏
            available_skills = self.get_available_skills(skill_masteries)
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å
            record = {
                'student_id': student_id,
                'task_id': task.task_id,
                'skill_id': task.skill_id,
                'target': 1.0 if is_correct else 0.0,
                'difficulty': task.difficulty,
                'task_type': task.task_type,
                'course_id': task.course_id,
                'skill_level': self.skills[task.skill_id].level,
                'current_skill_mastery': skill_masteries[task.skill_id],
                'archetype': archetype.name,
                'timestamp': current_time.isoformat()
            }
            
            records.append(record)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self._update_statistics(task)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º streak
            if is_correct:
                success_streak += 1
                failure_streak = 0
            else:
                success_streak = 0
                failure_streak += 1
            
            current_time += timedelta(minutes=np.random.randint(2, 15))
        
        return records
    
    def _select_target_skill_balanced(self, skill_masteries: Dict[int, float], 
                                    available_skills: Set[int], 
                                    archetype: StudentArchetype) -> Optional[int]:
        """–í—ã–±–∏—Ä–∞–µ—Ç –Ω–∞–≤—ã–∫ —Å —É—á–µ—Ç–æ–º –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏ –ø–æ–∫—Ä—ã—Ç–∏—è"""
        if not available_skills:
            return None
        
        skill_priorities = {}
        
        for skill_id in available_skills:
            skill_state = self.skills[skill_id]
            mastery = skill_masteries.get(skill_id, 0.1)
            
            # –ë–∞–∑–æ–≤—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
            base_priority = 1.0 - mastery
            
            # –ë–æ–Ω—É—Å –∑–∞ –Ω–µ–¥–æ–ø–æ–∫—Ä—ã—Ç—ã–µ –Ω–∞–≤—ã–∫–∏
            current_coverage = self.stats['skill_individual_coverage'].get(skill_id, 0)
            target_coverage = self.level_targets.get(skill_state.level, self.min_attempts_per_skill)
            coverage_bonus = max(0, (target_coverage - current_coverage) / target_coverage)
            
            # –ë–æ–Ω—É—Å –∑–∞ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ –ø–æ —É—Ä–æ–≤–Ω—è–º
            level_bonus = 0
            if skill_state.level <= archetype.max_level_progression:
                # –ü–æ–æ—â—Ä—è–µ–º –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ –∫ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–º—É —É—Ä–æ–≤–Ω—é –∞—Ä—Ö–µ—Ç–∏–ø–∞
                progress_factor = skill_state.level / archetype.max_level_progression
                level_bonus = (1 - progress_factor) * self.level_progression_bias
            
            # –ë–æ–Ω—É—Å –∑–∞ –∫—É—Ä—Å–æ–≤—É—é –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ—Å—Ç—å
            course_bonus = 0
            if archetype.course_focus:
                # –ù–∞–π–¥–µ–º –∑–∞–¥–∞–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –Ω–∞–≤—ã–∫–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∏–º –∫—É—Ä—Å—ã
                skill_tasks = self.tasks_by_skill.get(skill_id, [])
                for task in skill_tasks:
                    if task.course_id == archetype.course_focus:
                        course_bonus = self.course_balance_weight
                        break
            
            total_priority = base_priority + coverage_bonus + level_bonus + course_bonus
            skill_priorities[skill_id] = total_priority
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å –≤–µ—Å–æ–≤–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é
        if not skill_priorities:
            return random.choice(list(available_skills))
        
        skills, weights = zip(*skill_priorities.items())
        weights = np.array(weights)
        weights = weights / weights.sum()
        
        return np.random.choice(skills, p=weights)
    
    def _force_unlock_next_level(self, skill_masteries: Dict[int, float], 
                               archetype: StudentArchetype) -> Optional[int]:
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç –Ω–∞–≤—ã–∫–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è"""
        # –ù–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –æ—Å–≤–æ–µ–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å
        max_mastered_level = 0
        for skill_id, mastery in skill_masteries.items():
            if mastery > 0.8:  # –°—á–∏—Ç–∞–µ–º –æ—Å–≤–æ–µ–Ω–Ω—ã–º
                skill_level = self.skills[skill_id].level
                max_mastered_level = max(max_mastered_level, skill_level)
        
        # –ò—â–µ–º –Ω–∞–≤—ã–∫–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
        target_level = min(max_mastered_level + 1, archetype.max_level_progression)
        
        if target_level in self.skill_levels:
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ "–∏–∑—É—á–∞–µ–º" –ø—Ä–µ–¥–ø–æ—Å—ã–ª–∫–∏
            for skill_id in self.skill_levels[target_level]:
                skill_state = self.skills[skill_id]
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥–ø–æ—Å—ã–ª–∫–∏ –∫–∞–∫ –æ—Å–≤–æ–µ–Ω–Ω—ã–µ
                for prereq_id in skill_state.prerequisites:
                    if skill_masteries.get(prereq_id, 0) < 0.8:
                        skill_masteries[prereq_id] = 0.85
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—Ç–∞–ª –ª–∏ –Ω–∞–≤—ã–∫ –¥–æ—Å—Ç—É–ø–Ω—ã–º
                available = self.get_available_skills(skill_masteries)
                if skill_id in available:
                    return skill_id
        
        return None
    
    def _select_task_for_skill(self, skill_id: int, archetype: StudentArchetype, 
                             skill_masteries: Dict[int, float]) -> Optional[TaskAction]:
        """–í—ã–±–∏—Ä–∞–µ—Ç –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è –Ω–∞–≤—ã–∫–∞ —Å —É—á–µ—Ç–æ–º –∞—Ä—Ö–µ—Ç–∏–ø–∞"""
        skill_tasks = self.tasks_by_skill.get(skill_id, [])
        if not skill_tasks:
            return None
        
        mastery = skill_masteries.get(skill_id, 0.1)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–¥—Ö–æ–¥—è—â—É—é —Å–ª–æ–∂–Ω–æ—Å—Ç—å
        if mastery < 0.3:
            preferred_difficulty = 'beginner'
        elif mastery < 0.7:
            preferred_difficulty = 'intermediate'
        else:
            preferred_difficulty = 'advanced'
        
        # –£—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –∞—Ä—Ö–µ—Ç–∏–ø–∞
        if archetype.preferred_difficulty == 'beginner':
            preferred_difficulty = 'beginner'
        elif archetype.preferred_difficulty == 'advanced' and mastery > 0.4:
            preferred_difficulty = 'advanced'
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        suitable_tasks = [t for t in skill_tasks if t.difficulty == preferred_difficulty]
        if not suitable_tasks:
            suitable_tasks = skill_tasks
        
        # –£—á–∏—Ç—ã–≤–∞–µ–º –∫—É—Ä—Å–æ–≤—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
        if archetype.course_focus:
            course_tasks = [t for t in suitable_tasks if t.course_id == archetype.course_focus]
            if course_tasks:
                suitable_tasks = course_tasks
        
        return random.choice(suitable_tasks)
    
    def _simulate_attempt(self, skill_masteries: Dict[int, float], task: TaskAction,
                        archetype: StudentArchetype, success_streak: int, 
                        failure_streak: int) -> Tuple[bool, float]:
        """–°–∏–º—É–ª–∏—Ä—É–µ—Ç –ø–æ–ø—ã—Ç–∫—É —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è"""
        skill_mastery = skill_masteries.get(task.skill_id, 0.1)
        
        # –ë–∞–∑–æ–≤–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É—Å–ø–µ—Ö–∞
        base_prob = archetype.base_success_rate * (0.3 + 0.7 * skill_mastery)
        
        # –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        difficulty_mod = {'beginner': 1.3, 'intermediate': 1.0, 'advanced': 0.7}
        base_prob *= difficulty_mod.get(task.difficulty, 1.0)
        
        # –í–ª–∏—è–Ω–∏–µ streak
        if success_streak >= 3:
            base_prob *= 1.1  # –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        elif failure_streak >= 3:
            base_prob *= 0.9  # –§—Ä—É—Å—Ç—Ä–∞—Ü–∏—è
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç
        is_correct = np.random.random() < np.clip(base_prob, 0.05, 0.95)
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å –Ω–∞–≤—ã–∫–∞
        if is_correct:
            progress = archetype.learning_speed * np.random.uniform(0.02, 0.08)
        else:
            progress = archetype.learning_speed * np.random.uniform(0.01, 0.03)
        
        return is_correct, progress
    
    def get_available_skills(self, skill_masteries: Dict[int, float], 
                           mastery_threshold: float = 0.8) -> Set[int]:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω–∞–≤—ã–∫–∏, –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è"""
        available = set()
        
        for skill_id, skill_state in self.skills.items():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–¥–ø–æ—Å—ã–ª–∫–∏
            prerequisites_met = True
            for prereq_id in skill_state.prerequisites:
                if skill_masteries.get(prereq_id, 0.0) < mastery_threshold:
                    prerequisites_met = False
                    break
            
            if prerequisites_met and skill_masteries.get(skill_id, 0.0) < 0.95:
                available.add(skill_id)
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö, –Ω–∞—á–∏–Ω–∞–µ–º —Å –±–∞–∑–æ–≤—ã—Ö
        if not available:
            level_1_skills = self.skill_levels.get(1, [])
            available.update(level_1_skills)
        
        return available
    
    def _update_statistics(self, task: TaskAction):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
        self.stats['records_generated'] += 1
        self.stats['skills_covered'].add(task.skill_id)
        self.stats['courses_covered'].add(task.course_id)
        
        skill_level = self.skills[task.skill_id].level
        self.stats['level_coverage'][skill_level] += 1
        self.stats['difficulty_distribution'][task.difficulty] += 1
        self.stats['type_distribution'][task.task_type] += 1
        self.stats['skill_individual_coverage'][task.skill_id] += 1
        self.stats['course_coverage'][task.course_id] += 1
    
    def generate_balanced_dataset(self) -> pd.DataFrame:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç"""
        print(f"\nüöÄ –ì–ï–ù–ï–†–ê–¶–ò–Ø –°–ë–ê–õ–ê–ù–°–ò–†–û–í–ê–ù–ù–û–ì–û DKN –î–ê–¢–ê–°–ï–¢–ê")
        print("=" * 70)
        
        all_records = []
        
        # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ø–æ –∞—Ä—Ö–µ—Ç–∏–ø–∞–º
        archetype_counts = {}
        remaining_students = self.target_students
        
        for i, archetype in enumerate(self.student_archetypes[:-1]):
            count = remaining_students // (len(self.student_archetypes) - i)
            archetype_counts[archetype] = count
            remaining_students -= count
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–π –∞—Ä—Ö–µ—Ç–∏–ø –ø–æ–ª—É—á–∞–µ—Ç –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è
        archetype_counts[self.student_archetypes[-1]] = remaining_students
        
        print(f"üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∞—Ä—Ö–µ—Ç–∏–ø–∞–º:")
        for archetype, count in archetype_counts.items():
            print(f"   {archetype.name}: {count} —Å—Ç—É–¥–µ–Ω—Ç–æ–≤")
        
        student_id = 1
        for archetype, count in archetype_counts.items():
            print(f"\nüéØ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–ª—è –∞—Ä—Ö–µ—Ç–∏–ø–∞ '{archetype.name}'...")
            
            for i in range(count):
                if student_id % 100 == 0:
                    print(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤: {student_id}/{self.target_students}")
                
                student_records = self.generate_student_with_archetype(student_id, archetype)
                all_records.extend(student_records)
                
                self.stats['students_generated'] += 1
                self.stats['archetype_distribution'][archetype.name] += 1
                student_id += 1
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –¥–æ–±–∏–≤–∞–µ–º—Å—è –ø–æ–∫—Ä—ã—Ç–∏—è –≤—Å–µ—Ö –Ω–∞–≤—ã–∫–æ–≤
        self._ensure_full_coverage(all_records)
        
        df = pd.DataFrame(all_records)
        
        print(f"\n‚úÖ –ì–ï–ù–ï–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!")
        print(f"   –°—Ç—É–¥–µ–Ω—Ç–æ–≤: {self.stats['students_generated']}")
        print(f"   –ó–∞–ø–∏—Å–µ–π: {len(df)}")
        print(f"   –ù–∞–≤—ã–∫–æ–≤ –ø–æ–∫—Ä—ã—Ç–æ: {len(self.stats['skills_covered'])}/{len(self.skills)}")
        print(f"   –ö—É—Ä—Å–æ–≤ –ø–æ–∫—Ä—ã—Ç–æ: {len(self.stats['courses_covered'])}")
        print(f"   –£—Ä–æ–≤–Ω–µ–π –ø–æ–∫—Ä—ã—Ç–æ: {len(self.stats['level_coverage'])}")
        
        return df
    
    def _ensure_full_coverage(self, all_records: List[Dict]):
        """–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø–æ–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –Ω–∞–≤—ã–∫–æ–≤"""
        uncovered_skills = set(self.skills.keys()) - self.stats['skills_covered']
        
        if uncovered_skills:
            print(f"\nüéØ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ {len(uncovered_skills)} –Ω–µ–ø–æ–∫—Ä—ã—Ç—ã—Ö –Ω–∞–≤—ã–∫–æ–≤...")
            
            for skill_id in uncovered_skills:
                skill_tasks = self.tasks_by_skill.get(skill_id, [])
                if not skill_tasks:
                    continue
                
                # –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –Ω–∞–≤—ã–∫–∞
                for _ in range(min(50, self.min_attempts_per_skill)):
                    task = random.choice(skill_tasks)
                    
                    record = {
                        'student_id': np.random.randint(1, self.target_students + 1),
                        'task_id': task.task_id,
                        'skill_id': task.skill_id,
                        'target': float(np.random.choice([0, 1], p=[0.4, 0.6])),
                        'difficulty': task.difficulty,
                        'task_type': task.task_type,
                        'course_id': task.course_id,
                        'skill_level': self.skills[task.skill_id].level,
                        'current_skill_mastery': np.random.uniform(0.1, 0.9),
                        'archetype': 'synthetic_coverage',
                        'timestamp': datetime.now().isoformat()
                    }
                    
                    all_records.append(record)
                    self._update_statistics(task)
            
            print(f"   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(uncovered_skills) * 50} –∑–∞–ø–∏—Å–µ–π –¥–ª—è –ø–æ–∫—Ä—ã—Ç–∏—è")
    
    def save_dataset(self, df: pd.DataFrame):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞—Ç–∞—Å–µ—Ç —Å –æ—Ç—á–µ—Ç–∞–º–∏ –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è–º–∏"""
        print(f"\nüíæ –°–û–•–†–ê–ù–ï–ù–ò–ï –°–ë–ê–õ–ê–ù–°–ò–†–û–í–ê–ù–ù–û–ì–û –î–ê–¢–ê–°–ï–¢–ê...")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –¥–∞—Ç–∞—Å–µ—Ç
        output_file = self.output_path / "balanced_dkn_dataset.csv"
        df.to_csv(output_file, index=False)
        print(f"   ‚úÖ –î–∞—Ç–∞—Å–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_file}")
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç
        self._generate_detailed_report(df)
        
        # –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
        self._create_comprehensive_visualizations(df)
    
    def _generate_detailed_report(self, df: pd.DataFrame):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç –æ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏"""
        report_file = self.output_path / "BALANCED_DKN_REPORT.md"
        
        with open(report_file, 'w', encoding='utf-8') as f:
            f.write(f"""# –û—Ç—á–µ—Ç –æ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–º DKN –¥–∞—Ç–∞—Å–µ—Ç–µ

## üìä –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

**–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è**: {datetime.now().strftime('%d.%m.%Y %H:%M')}

### –†–∞–∑–º–µ—Ä –¥–∞—Ç–∞—Å–µ—Ç–∞
- **–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π**: {len(df):,}
- **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤**: {df['student_id'].nunique():,}
- **–°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏**: {len(df) / df['student_id'].nunique():.1f}

### –ü–æ–∫—Ä—ã—Ç–∏–µ —Å–∏—Å—Ç–µ–º—ã
- **–ù–∞–≤—ã–∫–æ–≤ –ø–æ–∫—Ä—ã—Ç–æ**: {len(self.stats['skills_covered'])}/{len(self.skills)} ({len(self.stats['skills_covered'])/len(self.skills)*100:.1f}%)
- **–ö—É—Ä—Å–æ–≤ –ø–æ–∫—Ä—ã—Ç–æ**: {len(self.stats['courses_covered'])}
- **–£—Ä–æ–≤–Ω–µ–π –ø–æ–∫—Ä—ã—Ç–æ**: {len(self.stats['level_coverage'])}/17

## üéØ –ê–Ω–∞–ª–∏–∑ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏

### –ü–æ–∫—Ä—ã—Ç–∏–µ –ø–æ —É—Ä–æ–≤–Ω—è–º –Ω–∞–≤—ã–∫–æ–≤
""")
            
            # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ —É—Ä–æ–≤–Ω—è–º
            for level in sorted(self.stats['level_coverage'].keys()):
                count = self.stats['level_coverage'][level]
                skills_at_level = len(self.skill_levels.get(level, []))
                avg_per_skill = count / skills_at_level if skills_at_level > 0 else 0
                target = self.level_targets.get(level, 0)
                coverage_pct = (count / target * 100) if target > 0 else 0
                
                f.write(f"- **–£—Ä–æ–≤–µ–Ω—å {level}**: {count:,} –∑–∞–ø–∏—Å–µ–π ({skills_at_level} –Ω–∞–≤—ã–∫–æ–≤, {avg_per_skill:.0f} –≤ —Å—Ä–µ–¥–Ω–µ–º –Ω–∞ –Ω–∞–≤—ã–∫, {coverage_pct:.1f}% –æ—Ç —Ü–µ–ª–∏)\n")
            
            f.write(f"""
### –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∞—Ä—Ö–µ—Ç–∏–ø–∞–º —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
""")
            
            for archetype, count in self.stats['archetype_distribution'].items():
                pct = count / self.stats['students_generated'] * 100
                success_rate = df[df['archetype'] == archetype]['target'].mean() * 100
                f.write(f"- **{archetype}**: {count:,} —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ ({pct:.1f}%, —É—Å–ø–µ—Ö: {success_rate:.1f}%)\n")
            
            f.write(f"""
### –ü–æ–∫—Ä—ã—Ç–∏–µ –ø–æ –∫—É—Ä—Å–∞–º
""")
            
            for course_id in sorted(self.stats['course_coverage'].keys()):
                count = self.stats['course_coverage'][course_id]
                target = self.course_targets.get(course_id, 0)
                coverage_pct = (count / target * 100) if target > 0 else 0
                success_rate = df[df['course_id'] == course_id]['target'].mean() * 100
                
                f.write(f"- **–ö—É—Ä—Å {course_id}**: {count:,} –∑–∞–ø–∏—Å–µ–π ({coverage_pct:.1f}% –æ—Ç —Ü–µ–ª–∏, —É—Å–ø–µ—Ö: {success_rate:.1f}%)\n")
            
            f.write(f"""
## üìà –ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö

### –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
""")
            
            for difficulty in ['beginner', 'intermediate', 'advanced']:
                subset = df[df['difficulty'] == difficulty]
                if len(subset) > 0:
                    success_rate = subset['target'].mean() * 100
                    f.write(f"- **{difficulty}**: {len(subset):,} –∑–∞–ø–∏—Å–µ–π ({success_rate:.1f}% —É—Å–ø–µ—Ö)\n")
            
            f.write(f"""
### –ü—Ä–æ–≥—Ä–µ—Å—Å–∏—è –ø–æ —É—Ä–æ–≤–Ω—è–º
- **–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ–∫—Ä—ã—Ç—ã–π —É—Ä–æ–≤–µ–Ω—å**: {min(self.stats['level_coverage'].keys())}
- **–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø–æ–∫—Ä—ã—Ç—ã–π —É—Ä–æ–≤–µ–Ω—å**: {max(self.stats['level_coverage'].keys())}
- **–†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è**: {"‚úÖ –•–æ—Ä–æ—à–∞—è" if len(self.stats['level_coverage']) >= 10 else "‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è"}

## ‚úÖ –í—ã–≤–æ–¥—ã

### –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è
- ‚úÖ **–ü–æ–ª–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ –Ω–∞–≤—ã–∫–æ–≤**: {len(self.stats['skills_covered'])}/{len(self.skills)}
- ‚úÖ **–†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ –∞—Ä—Ö–µ—Ç–∏–ø–æ–≤**: {len(self.stats['archetype_distribution'])} —Ç–∏–ø–æ–≤ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
- ‚úÖ **–ü–æ–∫—Ä—ã—Ç–∏–µ –≤—ã—Å—à–∏—Ö —É—Ä–æ–≤–Ω–µ–π**: –î–æ —É—Ä–æ–≤–Ω—è {max(self.stats['level_coverage'].keys())}
- ‚úÖ **–ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ –∫—É—Ä—Å–æ–≤**: {len(self.stats['courses_covered'])} –∫—É—Ä—Å–æ–≤ –∞–∫—Ç–∏–≤–Ω—ã

### –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è DKN
- üéØ –î–∞—Ç–∞—Å–µ—Ç –≥–æ—Ç–æ–≤ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è DKN –º–æ–¥–µ–ª–∏
- üìä –•–æ—Ä–æ—à–µ–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–π –æ–±—É—á–µ–Ω–∏—è
- üéÆ –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –æ–±—É—á–µ–Ω–∏—è —Å –ø–æ–¥–∫—Ä–µ–ø–ª–µ–Ω–∏–µ–º
- üï∏Ô∏è –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ —É—á–∏—Ç—ã–≤–∞–µ—Ç –≥—Ä–∞—Ñ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –Ω–∞–≤—ã–∫–æ–≤

---
*–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {datetime.now().strftime('%d.%m.%Y %H:%M')}*
""")
        
        print(f"   ‚úÖ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")
    
    def _create_comprehensive_visualizations(self, df: pd.DataFrame):
        """–°–æ–∑–¥–∞–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏"""
        print(f"   üìä –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π...")
        
        plt.style.use('seaborn-v0_8')
        fig = plt.figure(figsize=(20, 16))
        
        # 1. –ü–æ–∫—Ä—ã—Ç–∏–µ –ø–æ —É—Ä–æ–≤–Ω—è–º
        plt.subplot(3, 3, 1)
        levels = sorted(self.stats['level_coverage'].keys())
        counts = [self.stats['level_coverage'][level] for level in levels]
        targets = [self.level_targets.get(level, 0) for level in levels]
        
        x = np.arange(len(levels))
        width = 0.35
        
        plt.bar(x - width/2, counts, width, label='–§–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ', alpha=0.8)
        plt.bar(x + width/2, targets, width, label='–¶–µ–ª–µ–≤–æ–µ', alpha=0.6)
        plt.xlabel('–£—Ä–æ–≤–µ–Ω—å –Ω–∞–≤—ã–∫–∞')
        plt.ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π')
        plt.title('–ü–æ–∫—Ä—ã—Ç–∏–µ –ø–æ —É—Ä–æ–≤–Ω—è–º –Ω–∞–≤—ã–∫–æ–≤')
        plt.xticks(x, levels)
        plt.legend()
        plt.yscale('log')
        
        # 2. –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞—Ä—Ö–µ—Ç–∏–ø–æ–≤
        plt.subplot(3, 3, 2)
        archetype_data = list(self.stats['archetype_distribution'].items())
        archetypes, counts = zip(*archetype_data)
        plt.pie(counts, labels=archetypes, autopct='%1.1f%%')
        plt.title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ø–æ –∞—Ä—Ö–µ—Ç–∏–ø–∞–º')
        
        # 3. –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –ø–æ –∞—Ä—Ö–µ—Ç–∏–ø–∞–º
        plt.subplot(3, 3, 3)
        archetype_success = df.groupby('archetype')['target'].agg(['mean', 'count'])
        archetype_success = archetype_success.sort_values('mean', ascending=False)
        bars = plt.bar(range(len(archetype_success)), archetype_success['mean'])
        plt.title('–£—Å–ø–µ—à–Ω–æ—Å—Ç—å –ø–æ –∞—Ä—Ö–µ—Ç–∏–ø–∞–º')
        plt.ylabel('–î–æ–ª—è —É—Å–ø–µ—à–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫')
        plt.xticks(range(len(archetype_success)), [str(x) for x in archetype_success.index], rotation=45)
        
        # 4. –ü–æ–∫—Ä—ã—Ç–∏–µ –ø–æ –∫—É—Ä—Å–∞–º
        plt.subplot(3, 3, 4)
        course_data = [(cid, count) for cid, count in self.stats['course_coverage'].items()]
        course_ids, course_counts = zip(*course_data)
        plt.bar(course_ids, course_counts)
        plt.xlabel('ID –∫—É—Ä—Å–∞')
        plt.ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π')
        plt.title('–ü–æ–∫—Ä—ã—Ç–∏–µ –ø–æ –∫—É—Ä—Å–∞–º')
        
        # 5. –ü—Ä–æ–≥—Ä–µ—Å—Å–∏—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        plt.subplot(3, 3, 5)
        difficulty_success = df.groupby('difficulty')['target'].mean()
        difficulties = ['beginner', 'intermediate', 'advanced']
        success_rates = [difficulty_success.get(d, 0) for d in difficulties]
        colors = ['green', 'orange', 'red']
        plt.bar(difficulties, success_rates, color=colors, alpha=0.7)
        plt.title('–£—Å–ø–µ—à–Ω–æ—Å—Ç—å –ø–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏')
        plt.ylabel('–î–æ–ª—è —É—Å–ø–µ—à–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫')
        
        # 6. –û—Å–≤–æ–µ–Ω–∏–µ –Ω–∞–≤—ã–∫–æ–≤ vs —É—Ä–æ–≤–µ–Ω—å
        plt.subplot(3, 3, 6)
        level_mastery = df.groupby('skill_level')['current_skill_mastery'].mean()
        plt.plot(level_mastery.index.to_numpy(), level_mastery.values.to_numpy(), marker='o', linewidth=2)
        plt.xlabel('–£—Ä–æ–≤–µ–Ω—å –Ω–∞–≤—ã–∫–∞')
        plt.ylabel('–°—Ä–µ–¥–Ω–µ–µ –æ—Å–≤–æ–µ–Ω–∏–µ')
        plt.title('–û—Å–≤–æ–µ–Ω–∏–µ –Ω–∞–≤—ã–∫–æ–≤ –ø–æ —É—Ä–æ–≤–Ω—è–º')
        plt.grid(True, alpha=0.3)
        
        # 7. –í—Ä–µ–º–µ–Ω–Ω–∞—è –¥–∏–Ω–∞–º–∏–∫–∞
        plt.subplot(3, 3, 7)
        df['timestamp'] = pd.to_datetime(df['timestamp'])
        daily_attempts = df.set_index('timestamp').resample('D').size()
        daily_attempts.plot(kind='line', alpha=0.7)
        plt.title('–í—Ä–µ–º–µ–Ω–Ω–∞—è –¥–∏–Ω–∞–º–∏–∫–∞ –ø–æ–ø—ã—Ç–æ–∫')
        plt.ylabel('–ü–æ–ø—ã—Ç–æ–∫ –≤ –¥–µ–Ω—å')
        
        # 8. –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è —É—Ä–æ–≤–Ω—è –∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        plt.subplot(3, 3, 8)
        correlation_data = df.groupby(['skill_level', 'difficulty']).size().unstack(fill_value=0)
        sns.heatmap(correlation_data, annot=True, fmt='d', cmap='Blues')
        plt.title('–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è: –£—Ä–æ–≤–µ–Ω—å –Ω–∞–≤—ã–∫–∞ vs –°–ª–æ–∂–Ω–æ—Å—Ç—å')
        
        # 9. –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        plt.subplot(3, 3, 9)
        stats_text = f"""
–°–í–û–î–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê

–ó–∞–ø–∏—Å–µ–π: {len(df):,}
–°—Ç—É–¥–µ–Ω—Ç–æ–≤: {df['student_id'].nunique():,}
–ù–∞–≤—ã–∫–æ–≤: {len(self.stats['skills_covered'])}/{len(self.skills)}
–ö—É—Ä—Å–æ–≤: {len(self.stats['courses_covered'])}
–£—Ä–æ–≤–Ω–µ–π: {len(self.stats['level_coverage'])}

–û–±—â–∞—è —É—Å–ø–µ—à–Ω–æ—Å—Ç—å: {df['target'].mean()*100:.1f}%
–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å: {max(self.stats['level_coverage'].keys())}
–ê—Ä—Ö–µ—Ç–∏–ø–æ–≤: {len(self.stats['archetype_distribution'])}
        """
        plt.text(0.1, 0.5, stats_text, fontsize=12, verticalalignment='center',
                bbox=dict(boxstyle="round,pad=0.3", facecolor="lightblue"))
        plt.axis('off')
        plt.title('–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
        
        plt.tight_layout()
        
        viz_file = self.output_path / "balanced_dkn_visualizations.png"
        plt.savefig(viz_file, dpi=300, bbox_inches='tight', facecolor='white')
        plt.close()
        
        print(f"   ‚úÖ –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {viz_file}")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞"""
    print("üéØ –ì–ï–ù–ï–†–ê–¢–û–† –°–ë–ê–õ–ê–ù–°–ò–†–û–í–ê–ù–ù–û–ì–û DKN –î–ê–¢–ê–°–ï–¢–ê")
    print("=" * 60)
    
    generator = BalancedDKNDataGenerator(
        target_students=1500,
        output_path="dataset"
    )
    
    try:
        df = generator.generate_balanced_dataset()
        generator.save_dataset(df)
        
        print(f"\nüéâ –ì–ï–ù–ï–†–ê–¶–ò–Ø –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù–ê!")
        print(f"üìä –°–æ–∑–¥–∞–Ω–æ {len(df):,} –∑–∞–ø–∏—Å–µ–π –¥–ª—è {df['student_id'].nunique():,} —Å—Ç—É–¥–µ–Ω—Ç–æ–≤")
        print(f"üéØ –ü–æ–∫—Ä—ã—Ç–æ {len(generator.stats['skills_covered'])}/{len(generator.skills)} –Ω–∞–≤—ã–∫–æ–≤")
        print(f"üìà –£—Ä–æ–≤–Ω–µ–π –ø–æ–∫—Ä—ã—Ç–æ: {len(generator.stats['level_coverage'])}")
        print(f"üèÜ –û–±—â–∞—è —É—Å–ø–µ—à–Ω–æ—Å—Ç—å: {df['target'].mean()*100:.1f}%")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main()
