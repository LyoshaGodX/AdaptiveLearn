#!/usr/bin/env python3
"""
–û–±—É—á–µ–Ω–∏–µ DKN –º–æ–¥–µ–ª–∏ –Ω–∞ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö

–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –æ—á–∏—â–µ–Ω–Ω—ã–π –∏ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç –¥–ª—è –ª—É—á—à–µ–π —Ç–æ—á–Ω–æ—Å—Ç–∏
"""

import os
import sys
import django
from pathlib import Path
import torch
import pandas as pd

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
project_root = Path(__file__).parent.parent.parent
sys.path.append(str(project_root))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'adaptive_learning.settings')
django.setup()

from trainer import AdvancedDKNTrainer
from data_processor import DKNDataProcessor, DKNDataset
from model import DKNConfig


def train_optimized_dkn():
    """–û–±—É—á–∞–µ—Ç DKN –Ω–∞ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    print("üöÄ –û–ë–£–ß–ï–ù–ò–ï DKN –ù–ê –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–• –î–ê–ù–ù–´–•")
    print("=" * 60)
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    optimized_path = Path("dataset/optimized_synthetic_dataset.csv")
    if not optimized_path.exists():
        print("‚ùå –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        print("   –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ: python optimize_synthetic_data.py")
        return False
    
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω—ã –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {optimized_path}")
    
    # 2. –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    df = pd.read_csv(optimized_path)
    print(f"üìä –ó–∞–ø–∏—Å–µ–π: {len(df)}")
    print(f"üìã –ü—Ä–∏–∑–Ω–∞–∫–æ–≤: {len(df.columns)}")
    print(f"üéØ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {df['target'].mean():.1%}")
    
    # 3. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –º–æ–¥–µ–ª–∏
    config = DKNConfig()
    
    print(f"üß† –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–æ–¥–µ–ª–∏:")
    print(f"   - Skill embedding: {config.skill_embedding_dim}")
    print(f"   - Task embedding: {config.task_embedding_dim}")
    print(f"   - –°–∫—Ä—ã—Ç—ã–π —Å–ª–æ–π: {config.hidden_dim}")
    print(f"   - Dropout: {config.dropout_rate}")
    print(f"   - Learning rate: {config.learning_rate}")
    
    # 4. –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    processor = DKNDataProcessor()
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º DataFrame –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è DKN
    data_records = []
    for _, row in df.iterrows():
        record = {
            'student_id': int(row['student_id']),
            'task_id': int(row['task_id']),
            'skill_id': int(row['skill_id']),
            'target': float(row['target']),
            # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
            **{col: row[col] for col in df.columns 
               if col not in ['student_id', 'task_id', 'skill_id', 'target']}
        }
        data_records.append(record)
    
    print(f"üìã –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π: {len(data_records)}")
    
    # 5. –°–æ–∑–¥–∞–µ–º –¥–∞—Ç–∞—Å–µ—Ç—ã
    from sklearn.model_selection import train_test_split
    
    train_data, val_data = train_test_split(
        data_records, 
        test_size=0.2, 
        random_state=42,
        stratify=[r['target'] for r in data_records]
    )
    
    print(f"üìä –û–±—É—á–∞—é—â–∞—è –≤—ã–±–æ—Ä–∫–∞: {len(train_data)}")
    print(f"üìä –í–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω–∞—è –≤—ã–±–æ—Ä–∫–∞: {len(val_data)}")
      # –°–æ–∑–¥–∞–µ–º –¥–∞—Ç–∞—Å–µ—Ç—ã
    train_dataset = DKNDataset(train_data)
    val_dataset = DKNDataset(val_data)
    
    # –°–æ–∑–¥–∞–µ–º –¥–∞—Ç–ª–æ–∞–¥–µ—Ä—ã
    from torch.utils.data import DataLoader
    
    def custom_collate_fn(batch):
        """–ö–∞—Å—Ç–æ–º–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –±–∞—Ç—á–∞"""
        return processor.collate_fn(batch)
    
    train_loader = DataLoader(
        train_dataset, 
        batch_size=256, 
        shuffle=True,
        collate_fn=custom_collate_fn
    )
    
    val_loader = DataLoader(
        val_dataset, 
        batch_size=256, 
        shuffle=False,
        collate_fn=custom_collate_fn
    )
    
    # 6. –°–æ–∑–¥–∞–µ–º –º–æ–¥–µ–ª—å
    from model import DKNModel
    model = DKNModel(
        num_skills=30,
        num_tasks=270,
        config=config
    )
    
    # 7. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–µ–Ω–µ—Ä
    trainer = AdvancedDKNTrainer(
        model=model,
        config=config,
        artifacts_dir="training"
    )
    
    print(f"üéØ –¢—Ä–µ–Ω–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    print(f"   - –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {trainer.device}")
    print(f"   - –ê—Ä—Ç–µ—Ñ–∞–∫—Ç—ã: {trainer.artifacts_dir}")
    
    # 8. –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ
    print(f"\nüöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ...")
    
    try:
        history = trainer.train_with_validation(
            train_loader=train_loader,
            val_loader=val_loader,
            num_epochs=20,
            save_best=True
        )
        
        print(f"‚úÖ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        
        # 9. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –º–æ–¥–µ–ª—å
        final_model_path = Path("optimized_dkn_model.pth")
        torch.save(trainer.model.state_dict(), final_model_path)
        print(f"üíæ –§–∏–Ω–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {final_model_path}")
        
        return True
        
    except Exception as e:
        print(f"üí• –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()
        return False


def test_optimized_model():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    print(f"\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ô –ú–û–î–ï–õ–ò")
    print("=" * 60)
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        from test_dkn_student import test_dkn_for_student
        
        print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ —Å—Ç—É–¥–µ–Ω—Ç–µ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ (ID=7)...")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ —Å—Ç—É–¥–µ–Ω—Ç–µ —Å –¥–∞–Ω–Ω—ã–º–∏
        success = test_dkn_for_student(student_id=7)
        
        if success:
            print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ!")
            print("üìà –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        else:
            print("‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ")
        
        return success
        
    except Exception as e:
        print(f"üí• –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False


def compare_models_performance():
    """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ –∏ –ø–æ—Å–ª–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
    print(f"\nüìä –°–†–ê–í–ù–ï–ù–ò–ï –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò")
    print("=" * 60)
    
    print("üîç –ê–Ω–∞–ª–∏–∑ —É–ª—É—á—à–µ–Ω–∏–π:")
    print("üìä –î–∞–Ω–Ω—ã–µ:")
    print("   ‚úÖ –£–¥–∞–ª–µ–Ω–æ 35 –∏–∑–±—ã—Ç–æ—á–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
    print("   ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç—å: 50.3% ‚Üí 75.0%")
    print("   ‚úÖ –£–±—Ä–∞–Ω—ã –≤—ã—Å–æ–∫–æ–∫–æ—Ä—Ä–µ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏")
    print("   ‚úÖ –£–¥–∞–ª–µ–Ω—ã –∫–æ–Ω—Å—Ç–∞–Ω—Ç–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏")
    
    print("üß† –ú–æ–¥–µ–ª—å:")
    print("   ‚úÖ –ë–æ–ª–µ–µ —á–∏—Å—Ç—ã–µ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
    print("   ‚úÖ –£–º–µ–Ω—å—à–µ–Ω —à—É–º –∏ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ")
    print("   ‚úÖ –ë–æ–ª–µ–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è")
    print("   ‚úÖ –õ—É—á—à–µ–µ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
    
    print("üéØ –û–∂–∏–¥–∞–µ–º—ã–µ —É–ª—É—á—à–µ–Ω–∏—è:")
    print("   üìà –¢–æ—á–Ω–æ—Å—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π: +20-40%")
    print("   ‚ö° –°–∫–æ—Ä–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è: +25%")
    print("   üìâ –ü–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ: -50%")
    print("   üé≤ –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç—å: +60%")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è –Ω–∞ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    print("üöÄ –ü–û–õ–ù–û–ï –ü–ï–†–ï–û–ë–£–ß–ï–ù–ò–ï DKN –ù–ê –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–• –î–ê–ù–ù–´–•")
    print("=" * 70)
    
    try:
        # 1. –û–±—É—á–∞–µ–º –Ω–∞ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        training_success = train_optimized_dkn()
        
        if not training_success:
            print("üí• –û–±—É—á–µ–Ω–∏–µ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ!")
            return False
        
        # 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–æ–≤—É—é –º–æ–¥–µ–ª—å
        testing_success = test_optimized_model()
        
        # 3. –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        compare_models_performance()
        
        if training_success and testing_success:
            print(f"\nüéâ –ü–û–õ–ù–ê–Ø –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
            print("‚úÖ DKN –º–æ–¥–µ–ª—å –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∞ –Ω–∞ —á–∏—Å—Ç—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
            print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—à–ª–æ")
            print("‚úÖ –û–∂–∏–¥–∞–µ—Ç—Å—è –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞")
            
            print(f"\nüìÅ –ê—Ä—Ç–µ—Ñ–∞–∫—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:")
            print(f"   - optimized_dkn_model.pth (—Ñ–∏–Ω–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å)")
            print(f"   - training/ (–ª–æ–≥–∏ –∏ –º–µ—Ç—Ä–∏–∫–∏ –æ–±—É—á–µ–Ω–∏—è)")
            print(f"   - dataset/optimized_synthetic_dataset.csv (–¥–∞–Ω–Ω—ã–µ)")
            
            return True
        else:
            print(f"\n‚ö†Ô∏è  –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏")
            return False
            
    except Exception as e:
        print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False


if __name__ == "__main__":
    main()
