#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã DKNDataProcessor

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å data_processor.py –∏–∑–≤–ª–µ–∫–∞—Ç—å 
—Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞—Ç—å –∏—Ö –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è DKN –º–æ–¥–µ–ª–∏.
"""

import os
import sys
import django
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
project_root = Path(__file__).parent.parent.parent
sys.path.append(str(project_root))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'adaptive_learning.settings')
django.setup()

import torch
import numpy as np
import pandas as pd
from django.contrib.auth.models import User
from skills.models import Skill
from methodist.models import Task
from mlmodels.models import TaskAttempt, StudentSkillMastery
from student.models import StudentProfile

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö
from data_processor import DKNDataProcessor


def test_data_processor():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ DKNDataProcessor")
    print("=" * 50)
    
    # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
    print("1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è DKNDataProcessor...")
    processor = DKNDataProcessor(max_history_length=10)
    
    print(f"   ‚úÖ –ù–∞–≤—ã–∫–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ: {len(processor.skill_to_id)}")
    print(f"   ‚úÖ –ó–∞–¥–∞–Ω–∏–π –≤ —Å–∏—Å—Ç–µ–º–µ: {len(processor.task_to_id)}")
    
    # 2. –ü—Ä–æ–≤–µ—Ä–∏–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –¥–∞–Ω–Ω—ã—Ö
    print("\\n2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ...")
    
    users_count = User.objects.count()
    tasks_count = Task.objects.count()
    attempts_count = TaskAttempt.objects.count()
    
    print(f"   üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count}")
    print(f"   üìã –ó–∞–¥–∞–Ω–∏–π: {tasks_count}")
    print(f"   üéØ –ü–æ–ø—ã—Ç–æ–∫: {attempts_count}")
    
    if users_count == 0:
        print("   ‚ùå –í –±–∞–∑–µ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!")
        return False
        
    if tasks_count == 0:
        print("   ‚ùå –í –±–∞–∑–µ –Ω–µ—Ç –∑–∞–¥–∞–Ω–∏–π!")
        return False
    
    # 3. –ù–∞–π–¥–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –¥–∞–Ω–Ω—ã–º–∏
    print("\\n3. –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ–ø—ã—Ç–∫–∞–º–∏...")
    
    users_with_attempts = User.objects.filter(
        id__in=TaskAttempt.objects.values_list('student_id', flat=True).distinct()
    )
    
    if not users_with_attempts.exists():
        print("   ‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ–ø—ã—Ç–∫–∞–º–∏!")
        # –ü–æ–ø—Ä–æ–±—É–µ–º –ø—Ä–æ—Å—Ç–æ –≤–∑—è—Ç—å –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        test_user = User.objects.first()
        if not test_user:
            print("   ‚ùå –í–æ–æ–±—â–µ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ!")
            return False
        print(f"   ‚ö†Ô∏è  –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ –ø–æ–ø—ã—Ç–æ–∫: {test_user.username} (ID: {test_user.id})")
    else:
        test_user = users_with_attempts.first()
        print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –ø–æ–ø—ã—Ç–∫–∞–º–∏: {test_user.username} (ID: {test_user.id})")
    
    # 4. –ù–∞–π–¥–µ–º –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    print("\\n4. –ü–æ–∏—Å–∫ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")
    
    test_task = Task.objects.first()
    if not test_task:
        print("   ‚ùå –ù–µ—Ç –∑–∞–¥–∞–Ω–∏–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!")
        return False
        
    print(f"   ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–¥–∞–Ω–∏–µ: {test_task.title} (ID: {test_task.id})")
    
    # 5. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–∞
    print("\\n5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–∞...")
    
    try:
        student_data = processor.get_student_data(test_user.id, test_task.id)
        print("   ‚úÖ –î–∞–Ω–Ω—ã–µ —Å—Ç—É–¥–µ–Ω—Ç–∞ –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        print(f"   üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö:")
        print(f"      - student_id: {student_data['student_id']}")
        print(f"      - task_id: {student_data['task_id']}")
        print(f"      - –ò—Å—Ç–æ—Ä–∏—è: {len(student_data['history'])} –∑–∞–ø–∏—Å–µ–π")
        print(f"      - BKT –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {len(student_data['bkt_params'])} –Ω–∞–≤—ã–∫–æ–≤")
        print(f"      - –ù–∞–≤—ã–∫–∏ –∑–∞–¥–∞–Ω–∏—è: {len(student_data['task_skills'])}")
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
        print(f"\\n   üìà –ê–Ω–∞–ª–∏–∑ –∏—Å—Ç–æ—Ä–∏–∏:")
        history = student_data['history']
        non_empty_history = [h for h in history if h['task_id'] != 0]
        print(f"      - –†–µ–∞–ª—å–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫: {len(non_empty_history)}")
        print(f"      - –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω—É–ª—è–º–∏: {len(history) - len(non_empty_history)}")
        
        if non_empty_history:
            print(f"      - –ü—Ä–∏–º–µ—Ä –ø–æ–ø—ã—Ç–∫–∏: {non_empty_history[0]}")
        
        # –ê–Ω–∞–ª–∏–∑ BKT –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        print(f"\\n   üß† –ê–Ω–∞–ª–∏–∑ BKT –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:")
        for skill_id, params in list(student_data['bkt_params'].items())[:3]:
            print(f"      - –ù–∞–≤—ã–∫ {skill_id}: P_L={params['P_L']:.3f}, P_T={params['P_T']:.3f}")
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        import traceback
        traceback.print_exc()
        return False
    
    # 6. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É –±–∞—Ç—á–∞
    print("\\n6. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –±–∞—Ç—á–∞...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–∞–Ω–Ω—ã—Ö
        batch_data = []
        for i in range(3):  # –ú–∞–ª–µ–Ω—å–∫–∏–π –±–∞—Ç—á
            data = processor.get_student_data(test_user.id, test_task.id)
            batch_data.append(data)
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –±–∞—Ç—á
        batch_tensors = processor.prepare_batch(batch_data)
        print("   ‚úÖ –ë–∞—Ç—á –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–Ω–∑–æ—Ä—ã
        print(f"   üì¶ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –±–∞—Ç—á–∞:")
        for key, tensor in batch_tensors.items():
            if isinstance(tensor, torch.Tensor):
                print(f"      - {key}: {tensor.shape} ({tensor.dtype})")
            else:
                print(f"      - {key}: {type(tensor)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
        print(f"\\n   üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π:")
        print(f"      - task_ids: {batch_tensors['task_ids']}")
        print(f"      - task_difficulty: {batch_tensors['task_difficulty']}")
        print(f"      - task_type: {batch_tensors['task_type']}")
        print(f"      - current_bkt_avg[0]: {batch_tensors['current_bkt_avg'][0]}")
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –±–∞—Ç—á–∞: {e}")
        import traceback
        traceback.print_exc()
        return False
    
    # 7. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    print("\\n7. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏...")
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        synthetic_path = "dataset/enhanced_synthetic_dataset.csv"
        if os.path.exists(synthetic_path):
            synthetic_df = pd.read_csv(synthetic_path)
            print(f"   üìä –°–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–π –¥–∞—Ç–∞—Å–µ—Ç: {len(synthetic_df)} –∑–∞–ø–∏—Å–µ–π")
            print(f"   üìä –ö–æ–ª–æ–Ω–∫–∏: {list(synthetic_df.columns)}")
            
            # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä
            real_data_fields = set(student_data.keys())
            synthetic_fields = set(['student_id', 'task_id', 'target'] + 
                                 [col for col in synthetic_df.columns if col.startswith('hist_')] +
                                 [col for col in synthetic_df.columns if col.startswith('skill_')])
            
            print(f"\\n   üîÑ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä:")
            print(f"      - –ü–æ–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {real_data_fields}")
            print(f"      - –ü–æ–ª—è —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö: {synthetic_fields}")
            
            common_concepts = {'student_id', 'task_id', 'history', 'bkt_params'}
            print(f"      - –û–±—â–∏–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏: {common_concepts}")
            
        else:
            print(f"   ‚ö†Ô∏è  –°–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–π –¥–∞—Ç–∞—Å–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {synthetic_path}")
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ —Å —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏: {e}")
    
    print("\\n" + "=" * 50)
    print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
    print("\\nüéØ –í—ã–≤–æ–¥—ã:")
    print("   - DKNDataProcessor –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã")
    print("   - –î–∞–Ω–Ω—ã–µ –ø—Ä–µ–æ–±—Ä–∞–∑—É—é—Ç—Å—è –≤ —Ñ–æ—Ä–º–∞—Ç, —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Å DKN –º–æ–¥–µ–ª—å—é")
    print("   - –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–Ω–∏—è–º –º–æ–¥–µ–ª–∏")
    
    return True


if __name__ == "__main__":
    try:
        success = test_data_processor()
        if success:
            print("\\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã!")
        else:
            print("\\nüí• –¢–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã!")
            sys.exit(1)
            
    except Exception as e:
        print(f"\\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)
