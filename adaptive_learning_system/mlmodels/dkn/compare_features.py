#!/usr/bin/env python3
"""
–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–æ–≤ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ —Ä–µ–∞–ª—å–Ω—ã—Ö –∏ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è DKN

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç:
1. –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å—Ç—É–¥–µ–Ω—Ç–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
2. –°–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ, –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö –æ–±—É—á–∞–µ—Ç—Å—è DKN
3. –°—Ç—Ä—É–∫—Ç—É—Ä—É –∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
"""

import os
import sys
import django
from pathlib import Path
import torch
import numpy as np
import pandas as pd
import json
from typing import Dict, List, Any
import matplotlib.pyplot as plt

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
project_root = Path(__file__).parent.parent.parent
sys.path.append(str(project_root))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'adaptive_learning.settings')
django.setup()

from django.contrib.auth.models import User
from skills.models import Skill
from methodist.models import Task
from mlmodels.models import TaskAttempt, StudentSkillMastery
from student.models import StudentProfile

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã DKN
from data_processor import DKNDataProcessor, DKNDataset
from model import DKNModel, DKNConfig


def load_synthetic_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ"""
    print("üìä –ó–∞–≥—Ä—É–∑–∫–∞ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö...")
    
    # –ü—É—Ç—å –∫ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–º –¥–∞–Ω–Ω—ã–º
    synthetic_path = Path("dataset/enhanced_synthetic_dataset.csv")
    
    if not synthetic_path.exists():
        print(f"‚ùå –§–∞–π–ª {synthetic_path} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return None
    
    df = pd.read_csv(synthetic_path)
    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–ø–∏—Å–µ–π")
    print(f"üìã –ö–æ–ª–æ–Ω–∫–∏: {list(df.columns)}")
    
    return df


def analyze_real_student_features(student_id: int = 7):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞"""
    print(f"\nüîç –ê–Ω–∞–ª–∏–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ —Å—Ç—É–¥–µ–Ω—Ç–∞ ID: {student_id}")
    print("=" * 60)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞
    user = User.objects.get(id=student_id)
    student_profile = StudentProfile.objects.get(user=user)
    
    print(f"üë§ –°—Ç—É–¥–µ–Ω—Ç: {student_profile.full_name}")
    print(f"üìä –ü–æ–ø—ã—Ç–æ–∫: {TaskAttempt.objects.filter(student=student_profile).count()}")
    print(f"üß† –ù–∞–≤—ã–∫–æ–≤ –æ—Å–≤–æ–µ–Ω–æ: {StudentSkillMastery.objects.filter(student=student_profile).count()}")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
    processor = DKNDataProcessor(max_history_length=10)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
    test_tasks = Task.objects.all()[:10]  # –ë–µ—Ä–µ–º 10 –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    real_features = []
    
    for i, task in enumerate(test_tasks):
        try:
            student_data = processor.get_student_data(student_id, task.id)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏
            features = {
                'task_id': task.id,
                'task_title': task.title,
                'task_difficulty': task.difficulty,
                'task_type': task.task_type,
                'task_skills': [skill.name for skill in task.skills.all()],
                'history_length': len([h for h in student_data['history'] if h['task_id'] != 0]),
                'bkt_skills_count': len(student_data['bkt_params']),
                'task_skills_count': len(student_data['task_skills']),
                'history_data': student_data['history'],
                'bkt_data': student_data['bkt_params'],
                'task_data': student_data['task_data']
            }
            
            real_features.append(features)
            
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è {task.id}: {e}")
    
    print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(real_features)} –∑–∞–¥–∞–Ω–∏–π")
    return real_features


def analyze_synthetic_features(df):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏"""
    print(f"\nüîç –ê–Ω–∞–ª–∏–∑ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
    print("=" * 60)
    
    if df is None:
        return None
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
    print("üìä –û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö:")
    
    # –°—Ç—É–¥–µ–Ω—Ç—ã
    unique_students = df['student_id'].nunique()
    print(f"üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤: {unique_students}")
    
    # –ó–∞–¥–∞–Ω–∏—è
    unique_tasks = df['task_id'].nunique()
    print(f"üìù –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π: {unique_tasks}")
    
    # –ù–∞–≤—ã–∫–∏
    if 'skill_id' in df.columns:
        unique_skills = df['skill_id'].nunique()
        print(f"üß† –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –Ω–∞–≤—ã–∫–æ–≤: {unique_skills}")
    
    # –ö—É—Ä—Å—ã
    if 'course_id' in df.columns:
        unique_courses = df['course_id'].nunique()
        print(f"üìö –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫—É—Ä—Å–æ–≤: {unique_courses}")
    
    # –£—Å–ø–µ—à–Ω–æ—Å—Ç—å
    if 'is_correct' in df.columns:
        success_rate = df['is_correct'].mean()
        print(f"‚úÖ –û–±—â–∞—è —É—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1%}")
    
    # –í—Ä–µ–º—è —Ä–µ—à–µ–Ω–∏—è
    if 'time_spent' in df.columns:
        avg_time = df['time_spent'].mean()
        min_time = df['time_spent'].min()
        max_time = df['time_spent'].max()
        print(f"‚è±Ô∏è  –í—Ä–µ–º—è —Ä–µ—à–µ–Ω–∏—è: {avg_time:.1f}—Å (–º–∏–Ω: {min_time}, –º–∞–∫—Å: {max_time})")
    
    # BKT –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    bkt_columns = [col for col in df.columns if col.startswith('bkt_')]
    if bkt_columns:
        print(f"üìà BKT –∫–æ–ª–æ–Ω–æ–∫: {len(bkt_columns)}")
        for col in bkt_columns[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
            avg_val = df[col].mean()
            print(f"   {col}: {avg_val:.3f}")
    
    return {
        'unique_students': unique_students,
        'unique_tasks': unique_tasks,
        'unique_skills': unique_skills if 'skill_id' in df.columns else 0,
        'success_rate': success_rate if 'is_correct' in df.columns else 0,
        'avg_time': avg_time if 'time_spent' in df.columns else 0,
        'bkt_columns': bkt_columns
    }


def compare_features_structure(real_features, synthetic_stats, df):
    """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–∏–∑–Ω–∞–∫–æ–≤"""
    print(f"\nüîÑ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
    print("=" * 60)
    
    if not real_features or synthetic_stats is None:
        print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è")
        return
    
    print("üìä –°–¢–†–£–ö–¢–£–†–ù–û–ï –°–†–ê–í–ù–ï–ù–ò–ï:")
    print("-" * 40)
    
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞–Ω–∏–π
    real_tasks = len(real_features)
    synthetic_tasks = synthetic_stats['unique_tasks']
    print(f"üìù –ó–∞–¥–∞–Ω–∏—è:")
    print(f"   –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {real_tasks} (–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º—ã—Ö)")
    print(f"   –°–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ: {synthetic_tasks}")
    
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–≤—ã–∫–æ–≤
    real_skills = len(set().union(*[f['task_skills'] for f in real_features]))
    synthetic_skills = synthetic_stats['unique_skills']
    print(f"üß† –ù–∞–≤—ã–∫–∏:")
    print(f"   –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {real_skills} (—É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≤ –∑–∞–¥–∞—á–∞—Ö)")
    print(f"   –°–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ: {synthetic_skills}")
    
    # –ò—Å—Ç–æ—Ä–∏—è –ø–æ–ø—ã—Ç–æ–∫
    real_history_lengths = [f['history_length'] for f in real_features]
    avg_real_history = np.mean(real_history_lengths)
    print(f"üìö –ò—Å—Ç–æ—Ä–∏—è –ø–æ–ø—ã—Ç–æ–∫:")
    print(f"   –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {avg_real_history:.1f} –ø–æ–ø—ã—Ç–æ–∫ –≤ —Å—Ä–µ–¥–Ω–µ–º")
    print(f"   –î–∏–∞–ø–∞–∑–æ–Ω: {min(real_history_lengths)}-{max(real_history_lengths)}")
    
    # BKT –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    real_bkt_skills = [f['bkt_skills_count'] for f in real_features]
    avg_real_bkt = np.mean(real_bkt_skills)
    print(f"üìà BKT –Ω–∞–≤—ã–∫–∏:")
    print(f"   –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {avg_real_bkt:.1f} –Ω–∞–≤—ã–∫–æ–≤ –≤ —Å—Ä–µ–¥–Ω–µ–º")
    print(f"   –°–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ: {len(synthetic_stats['bkt_columns'])} BKT –∫–æ–ª–æ–Ω–æ–∫")


def compare_bkt_parameters(real_features, df):
    """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç BKT –ø–∞—Ä–∞–º–µ—Ç—Ä—ã"""
    print(f"\nüìà –°–†–ê–í–ù–ï–ù–ò–ï BKT –ü–ê–†–ê–ú–ï–¢–†–û–í")
    print("=" * 60)
    
    if not real_features or df is None:
        return
    
    # –†–µ–∞–ª—å–Ω—ã–µ BKT –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    print("üîç –†–µ–∞–ª—å–Ω—ã–µ BKT –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–ø–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ):")
    first_real = real_features[0]
    real_bkt = first_real['bkt_data']
    
    print(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–≤—ã–∫–æ–≤ —Å BKT: {len(real_bkt)}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º
    p_l_values = [params['P_L'] for params in real_bkt.values()]
    p_t_values = [params['P_T'] for params in real_bkt.values()]  
    p_g_values = [params['P_G'] for params in real_bkt.values()]
    p_s_values = [params['P_S'] for params in real_bkt.values()]
    
    print(f"üìã –†–µ–∞–ª—å–Ω—ã–µ BKT —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:")
    print(f"   P_L (–æ—Å–≤–æ–µ–Ω–∏–µ): {np.mean(p_l_values):.3f} ¬± {np.std(p_l_values):.3f}")
    print(f"   P_T (–ø–µ—Ä–µ—Ö–æ–¥):  {np.mean(p_t_values):.3f} ¬± {np.std(p_t_values):.3f}")
    print(f"   P_G (—É–≥–∞–¥—ã–≤–∞–Ω–∏–µ): {np.mean(p_g_values):.3f} ¬± {np.std(p_g_values):.3f}")
    print(f"   P_S (–æ—à–∏–±–∫–∞):   {np.mean(p_s_values):.3f} ¬± {np.std(p_s_values):.3f}")
    
    # –°–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ BKT –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    print(f"\nüîç –°–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ BKT –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:")
    bkt_columns = [col for col in df.columns if col.startswith('bkt_')]
    
    if bkt_columns:
        # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ BKT –∏–¥—É—Ç –∫–∞–∫ bkt_skill_0_P_L, bkt_skill_0_P_T –∏ —Ç.–¥.
        p_l_synthetic = [df[col].mean() for col in bkt_columns if '_P_L' in col or col.endswith('_0')]
        p_t_synthetic = [df[col].mean() for col in bkt_columns if '_P_T' in col or col.endswith('_1')]
        p_g_synthetic = [df[col].mean() for col in bkt_columns if '_P_G' in col or col.endswith('_2')]
        p_s_synthetic = [df[col].mean() for col in bkt_columns if '_P_S' in col or col.endswith('_3')]
        
        if p_l_synthetic:
            print(f"üìã –°–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ BKT —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:")
            print(f"   P_L (–æ—Å–≤–æ–µ–Ω–∏–µ): {np.mean(p_l_synthetic):.3f} ¬± {np.std(p_l_synthetic):.3f}")
        if p_t_synthetic:
            print(f"   P_T (–ø–µ—Ä–µ—Ö–æ–¥):  {np.mean(p_t_synthetic):.3f} ¬± {np.std(p_t_synthetic):.3f}")
        if p_g_synthetic:
            print(f"   P_G (—É–≥–∞–¥—ã–≤–∞–Ω–∏–µ): {np.mean(p_g_synthetic):.3f} ¬± {np.std(p_g_synthetic):.3f}")
        if p_s_synthetic:
            print(f"   P_S (–æ—à–∏–±–∫–∞):   {np.mean(p_s_synthetic):.3f} ¬± {np.std(p_s_synthetic):.3f}")


def compare_history_features(real_features, df):
    """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –ø—Ä–∏–∑–Ω–∞–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ø—ã—Ç–æ–∫"""
    print(f"\nüìö –°–†–ê–í–ù–ï–ù–ò–ï –ò–°–¢–û–†–ò–ò –ü–û–ü–´–¢–û–ö")
    print("=" * 60)
    
    if not real_features:
        return
    
    # –†–µ–∞–ª—å–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è
    print("üîç –†–µ–∞–ª—å–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è –ø–æ–ø—ã—Ç–æ–∫:")
    first_real = real_features[0]
    real_history = first_real['history_data']
    
    real_attempts = [h for h in real_history if h['task_id'] != 0]
    print(f"üìä –†–µ–∞–ª—å–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –≤ –∏—Å—Ç–æ—Ä–∏–∏: {len(real_attempts)}")
    
    if real_attempts:
        # –£—Å–ø–µ—à–Ω–æ—Å—Ç—å
        success_rates = [h['is_correct'] for h in real_attempts]
        avg_success = np.mean(success_rates)
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {avg_success:.1%}")
        
        # –í—Ä–µ–º—è —Ä–µ—à–µ–Ω–∏—è
        times = [h['time_spent'] for h in real_attempts]
        avg_time = np.mean(times)
        print(f"‚è±Ô∏è  –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {avg_time:.1f}—Å")
        
        # –°–ª–æ–∂–Ω–æ—Å—Ç—å –∑–∞–¥–∞–Ω–∏–π
        difficulties = [h['difficulty'] for h in real_attempts]
        unique_difficulties = set(difficulties)
        print(f"üéØ –£—Ä–æ–≤–Ω–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏: {unique_difficulties}")
        
        # –¢–∏–ø—ã –∑–∞–¥–∞–Ω–∏–π
        task_types = [h['task_type'] for h in real_attempts]
        unique_types = set(task_types)
        print(f"üìù –¢–∏–ø—ã –∑–∞–¥–∞–Ω–∏–π: {unique_types}")
    
    # –°–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∞—è –∏—Å—Ç–æ—Ä–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å –∫–æ–ª–æ–Ω–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏)
    print(f"\nüîç –°–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∞—è –∏—Å—Ç–æ—Ä–∏—è:")
    history_columns = [col for col in df.columns if 'history' in col.lower()]
    
    if history_columns:
        print(f"üìä –ö–æ–ª–æ–Ω–æ–∫ –∏—Å—Ç–æ—Ä–∏–∏: {len(history_columns)}")
        for col in history_columns[:5]:
            print(f"   {col}: {df[col].dtype}")
    else:
        print("üìä –ò—Å—Ç–æ—Ä–∏—è –≤ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∞ –ø–æ-–¥—Ä—É–≥–æ–º—É")
    
    # –û–±—â–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    if 'is_correct' in df.columns:
        synthetic_success = df['is_correct'].mean()
        print(f"‚úÖ –°–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∞—è —É—Å–ø–µ—à–Ω–æ—Å—Ç—å: {synthetic_success:.1%}")
    
    if 'time_spent' in df.columns:
        synthetic_time_avg = df['time_spent'].mean()
        print(f"‚è±Ô∏è  –°–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–æ–µ –≤—Ä–µ–º—è: {synthetic_time_avg:.1f}—Å")


def generate_comparison_report(real_features, synthetic_stats, df):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
    print(f"\nüìã –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –°–†–ê–í–ù–ï–ù–ò–Ø")
    print("=" * 60)
    
    print("üéØ –ö–õ–Æ–ß–ï–í–´–ï –í–´–í–û–î–´:")
    print("-" * 40)
    
    # –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
    print("‚úÖ –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–¨:")
    print("   - –°—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö —Å–æ–≤–º–µ—Å—Ç–∏–º—ã")
    print("   - DKN –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å –æ–±–æ–∏–º–∏ —Ç–∏–ø–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö")
    print("   - –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏ —Ç–µ–Ω–∑–æ—Ä–æ–≤ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ")
    
    # –†–∞–∑–ª–∏—á–∏—è
    print("\nüîÑ –†–ê–ó–õ–ò–ß–ò–Ø:")
    if real_features and len(real_features) > 0:
        avg_history = np.mean([f['history_length'] for f in real_features])
        if avg_history > 0:
            print("   - –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –±–æ–≥–∞—Ç—É—é –∏—Å—Ç–æ—Ä–∏—é –ø–æ–ø—ã—Ç–æ–∫")
            print("   - BKT –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Å–Ω–æ–≤–∞–Ω—ã –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–æ–ø—ã—Ç–∫–∞—Ö")
        else:
            print("   - –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–º–µ—é—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é")
    
    if synthetic_stats:
        print("   - –°–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç –ø–æ–ª–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ")
        print("   - –ë–æ–ª—å—à–µ–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –æ–±—É—á–µ–Ω–∏—è")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    print("   1. –û–±—É—á–∞—Ç—å DKN –Ω–∞ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è")
    print("   2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏")
    print("   3. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ BKT –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–∏ –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–µ")
    print("   4. –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ –∑–∞–º–µ–Ω—è—Ç—å —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —Ä–µ–∞–ª—å–Ω—ã–º–∏")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
    print("üîç –°–†–ê–í–ù–ï–ù–ò–ï –†–ï–ê–õ–¨–ù–´–• –ò –°–ò–ù–¢–ï–¢–ò–ß–ï–°–ö–ò–• –ü–†–ò–ó–ù–ê–ö–û–í DKN")
    print("=" * 70)
    
    try:
        # 1. –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
        synthetic_df = load_synthetic_data()
        
        # 2. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞
        real_features = analyze_real_student_features(student_id=7)
        
        # 3. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
        synthetic_stats = analyze_synthetic_features(synthetic_df)
        
        # 4. –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        compare_features_structure(real_features, synthetic_stats, synthetic_df)
        
        # 5. –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º BKT –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        compare_bkt_parameters(real_features, synthetic_df)
        
        # 6. –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ–ø—ã—Ç–æ–∫
        compare_history_features(real_features, synthetic_df)
        
        # 7. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        generate_comparison_report(real_features, synthetic_stats, synthetic_df)
        
        print(f"\nüéâ –ê–Ω–∞–ª–∏–∑ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"üí• –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main()
