#!/usr/bin/env python3
"""
–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:
DKN –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è + –∞–Ω–∞–ª–∏–∑ –≥—Ä–∞—Ñ–∞ –Ω–∞–≤—ã–∫–æ–≤ + BKT –¥–∞–Ω–Ω—ã–µ

–ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª:
1. data_processor - –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã
2. model - –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π DKN 
3. skill_based_recommender - —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å —É—á–µ—Ç–æ–º –Ω–∞–≤—ã–∫–æ–≤
"""

import os
import sys
import django
from pathlib import Path
from typing import List, Dict, Optional, Tuple
from dataclasses import dataclass
import logging
import torch
import numpy as np

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
project_root = Path(__file__).parent.parent.parent
sys.path.append(str(project_root))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'adaptive_learning.settings')
django.setup()

from django.contrib.auth.models import User
from skills.models import Skill
from methodist.models import Task
from mlmodels.models import TaskAttempt, StudentSkillMastery
from student.models import StudentProfile

# –ò–º–ø–æ—Ä—Ç—ã DKN –º–æ–¥—É–ª–µ–π
from data_processor import DKNDataProcessor
from model import DKNModel, DKNConfig

logger = logging.getLogger(__name__)


@dataclass
class IntegratedRecommendation:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
    task_id: int
    task_title: str
    skill_name: str
    skill_mastery: float
    task_difficulty: str
    dkn_prediction: float  # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ DKN –º–æ–¥–µ–ª–∏
    priority: int  # 1-5, –≥–¥–µ 1 - —Å–∞–º—ã–π –≤–∞–∂–Ω—ã–π
    reasoning: str
    confidence: float  # –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏


class IntegratedSkillRecommender:
    """–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: DKN + –∞–Ω–∞–ª–∏–∑ –Ω–∞–≤—ã–∫–æ–≤"""
    
    def __init__(self, model_path: Optional[str] = None):
        self.mastery_threshold = 0.8  # –ù–∞–≤—ã–∫ —Å—á–∏—Ç–∞–µ—Ç—Å—è –æ—Å–≤–æ–µ–Ω–Ω—ã–º –ø—Ä–∏ 80%
        self.near_mastery_threshold = 0.6  # –ë–ª–∏–∑–∫–æ –∫ –æ—Å–≤–æ–µ–Ω–∏—é –ø—Ä–∏ 60%
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è DKN –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.data_processor = DKNDataProcessor()
        self.dkn_model = None
          # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ–±—É—á–µ–Ω–Ω—É—é DKN –º–æ–¥–µ–ª—å
        self._load_dkn_model(model_path)
    
    def _load_dkn_model(self, model_path: Optional[str]):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç DKN –º–æ–¥–µ–ª—å"""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥–µ–ª–∏
            if model_path is None:
                model_path = str(Path(__file__).parent / "training" / "models" / "best_model.pth")
            
            config = DKNConfig()
            self.dkn_model = DKNModel(
                num_skills=len(self.data_processor.skill_to_id),
                num_tasks=len(self.data_processor.task_to_id),
                config=config
            )
            
            if model_path and os.path.exists(model_path):
                checkpoint = torch.load(model_path, map_location='cpu')
                if 'model_state_dict' in checkpoint:
                    self.dkn_model.load_state_dict(checkpoint['model_state_dict'])
                else:
                    self.dkn_model.load_state_dict(checkpoint)
                print(f"‚úÖ DKN –º–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ {model_path}")
            else:
                print(f"‚ö†Ô∏è  –§–∞–π–ª –º–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {model_path}")
                print("‚ö†Ô∏è  –ò—Å–ø–æ–ª—å–∑—É—é –Ω–µ–æ–±—É—á–µ–Ω–Ω—É—é DKN –º–æ–¥–µ–ª—å")
                
            self.dkn_model.eval()
            
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ DKN –º–æ–¥–µ–ª–∏: {e}")
            print(f"‚ö†Ô∏è  –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {type(e).__name__}")
            self.dkn_model = None
    
    def get_recommendations(self, student_id: int, num_recommendations: int = 5) -> List[IntegratedRecommendation]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: DKN + –∞–Ω–∞–ª–∏–∑ –Ω–∞–≤—ã–∫–æ–≤
        """
        print(f"\nüéØ –ò–ù–¢–ï–ì–†–ò–†–û–í–ê–ù–ù–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –î–õ–Ø –°–¢–£–î–ï–ù–¢–ê {student_id}")
        print("=" * 60)
        
        try:
            # 1. –ü–æ–ª—É—á–∞–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞
            user = User.objects.get(id=student_id)
            student_profile = StudentProfile.objects.get(user=user)
            print(f"üë§ –°—Ç—É–¥–µ–Ω—Ç: {user.username}")
            
            # 2. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Å–≤–æ–µ–Ω–∏–µ –Ω–∞–≤—ã–∫–æ–≤
            skill_analysis = self._analyze_student_skills(student_profile)
            
            # 3. –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –∑–∞–¥–∞–Ω–∏–π –∏ DKN –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
            recommendations = self._build_integrated_recommendations(skill_analysis, student_profile, student_id)
            
            # 4. –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
            recommendations.sort(key=lambda x: (x.priority, -x.confidence, -x.dkn_prediction))
            
            return recommendations[:num_recommendations]
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return []
    
    def _analyze_student_skills(self, student_profile: StudentProfile) -> Dict[str, Dict]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ—Å–≤–æ–µ–Ω–∏–µ –Ω–∞–≤—ã–∫–æ–≤ —Å—Ç—É–¥–µ–Ω—Ç–æ–º"""
        print("\nüìä –ê–ù–ê–õ–ò–ó –û–°–í–û–ï–ù–ò–Ø –ù–ê–í–´–ö–û–í:")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–∞–≤—ã–∫–∏ –∏ –∏—Ö –æ—Å–≤–æ–µ–Ω–∏–µ
        skill_masteries = StudentSkillMastery.objects.filter(student=student_profile)
        
        skill_analysis = {}
        
        for mastery in skill_masteries:
            skill_name = mastery.skill.name
            mastery_prob = mastery.current_mastery_prob
            
            status = self._get_skill_status(mastery_prob)
            
            skill_analysis[skill_name] = {
                'skill_id': mastery.skill.id,
                'mastery_prob': mastery_prob,
                'status': status,
                'skill': mastery.skill
            }
            
            print(f"   {status} {skill_name}: {mastery_prob:.1%}")
        
        return skill_analysis
    
    def _get_skill_status(self, mastery_prob: float) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –æ—Å–≤–æ–µ–Ω–∏—è –Ω–∞–≤—ã–∫–∞"""
        if mastery_prob >= self.mastery_threshold:
            return '‚úÖ'  # –û—Å–≤–æ–µ–Ω
        elif mastery_prob >= self.near_mastery_threshold:
            return 'üîÑ'  # –ë–ª–∏–∑–∫–æ –∫ –æ—Å–≤–æ–µ–Ω–∏—é
        else:
            return '‚ùå'  # –ù–µ –æ—Å–≤–æ–µ–Ω
    
    def _build_integrated_recommendations(self, skill_analysis: Dict, student_profile: StudentProfile, student_id: int) -> List[IntegratedRecommendation]:
        """–°—Ç—Ä–æ–∏—Ç –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: –Ω–∞–≤—ã–∫–∏ + DKN"""
        print("\nüéØ –ü–û–°–¢–†–û–ï–ù–ò–ï –ò–ù–¢–ï–ì–†–ò–†–û–í–ê–ù–ù–´–• –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ô:")
        
        recommendations = []
        task_data_list = []
        tasks_for_prediction = []
        
        # –°–æ–±–∏—Ä–∞–µ–º –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –Ω–∞–≤—ã–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∏–∑—É—á–∞—Ç—å
        for skill_name, skill_data in skill_analysis.items():
            skill = skill_data['skill']
            mastery_prob = skill_data['mastery_prob']
            status = skill_data['status']
            
            # –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –Ω–∞–≤—ã–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∏–∑—É—á–∞—Ç—å
            if status in ['üîÑ', '‚ùå']:
                tasks = Task.objects.filter(skills=skill)[:3]  # –ú–∞–∫—Å–∏–º—É–º 3 –∑–∞–¥–∞–Ω–∏—è –Ω–∞ –Ω–∞–≤—ã–∫
                
                for task in tasks:
                    tasks_for_prediction.append(task)
                    
                    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è DKN –º–æ–¥–µ–ª–∏
                    if self.dkn_model:
                        try:
                            student_data = self.data_processor.get_student_data(student_id, task.id)
                            task_data_list.append(student_data)
                        except Exception as e:
                            print(f"   ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–¥–∞–Ω–∏—è {task.id}: {e}")
                            task_data_list.append(None)
                    else:
                        task_data_list.append(None)
        
        # –ü–æ–ª—É—á–∞–µ–º DKN –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –∑–∞–¥–∞–Ω–∏–π
        dkn_predictions = self._get_dkn_predictions(task_data_list)
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recommendation_idx = 0
        for skill_name, skill_data in skill_analysis.items():
            skill = skill_data['skill']
            mastery_prob = skill_data['mastery_prob']
            status = skill_data['status']
            
            if status in ['üîÑ', '‚ùå']:
                tasks = Task.objects.filter(skills=skill)[:3]
                
                for task in tasks:
                    if recommendation_idx < len(dkn_predictions):
                        dkn_pred = dkn_predictions[recommendation_idx]
                        prediction_value = dkn_pred if dkn_pred is not None else 0.5
                    else:
                        prediction_value = 0.5  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    
                    priority = self._calculate_integrated_priority(skill_name, mastery_prob, task, prediction_value, skill_analysis)
                    confidence = self._calculate_confidence(mastery_prob, prediction_value)
                    reasoning = self._generate_integrated_reasoning(skill_name, mastery_prob, task, prediction_value)
                    
                    recommendation = IntegratedRecommendation(
                        task_id=task.id,
                        task_title=task.title,
                        skill_name=skill_name,
                        skill_mastery=mastery_prob,
                        task_difficulty=task.difficulty,
                        dkn_prediction=prediction_value,
                        priority=priority,
                        reasoning=reasoning,
                        confidence=confidence
                    )
                    
                    recommendations.append(recommendation)
                    
                    print(f"   üìã {task.title}")
                    print(f"      –ù–∞–≤—ã–∫: {skill_name} ({mastery_prob:.1%})")
                    print(f"      DKN –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ: {prediction_value:.1%}")
                    print(f"      –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority}")
                    print(f"      –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.2f}")
                    print()
                    
                    recommendation_idx += 1
        
        return recommendations
    
    def _get_dkn_predictions(self, task_data_list: List) -> List[Optional[float]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è DKN –º–æ–¥–µ–ª–∏ –¥–ª—è —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞–Ω–∏–π"""
        if not self.dkn_model or not task_data_list:
            return [None] * len(task_data_list)
        
        try:
            # –§–∏–ª—å—Ç—Ä—É–µ–º –≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            valid_data = [data for data in task_data_list if data is not None]
            
            if not valid_data:
                return [None] * len(task_data_list)
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –±–∞—Ç—á
            batch = self.data_processor.prepare_batch(valid_data)
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
            with torch.no_grad():
                predictions = self.dkn_model(batch)
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ø–∏—Å–æ–∫
            pred_values = predictions.numpy().tolist()
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Ä—è–¥–æ–∫ (—É—á–∏—Ç—ã–≤–∞–µ–º None –∑–Ω–∞—á–µ–Ω–∏—è)
            result = []
            pred_idx = 0
            for data in task_data_list:
                if data is not None:
                    result.append(pred_values[pred_idx])
                    pred_idx += 1
                else:
                    result.append(None)
            
            return result
            
        except Exception as e:
            print(f"   ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è DKN –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π: {e}")
            return [None] * len(task_data_list)
    
    def _calculate_integrated_priority(self, skill_name: str, mastery_prob: float, task: Task, dkn_prediction: float, skill_analysis: Dict) -> int:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Å —É—á–µ—Ç–æ–º –Ω–∞–≤—ã–∫–æ–≤ –∏ DKN"""
        # –ë–∞–∑–æ–≤—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Å–≤–æ–µ–Ω–∏—è –Ω–∞–≤—ã–∫–∞
        if mastery_prob < 0.3:
            base_priority = 1  # –ö—Ä–∏—Ç–∏—á–Ω–æ –≤–∞–∂–Ω–æ
        elif mastery_prob < 0.6:
            base_priority = 2  # –í–∞–∂–Ω–æ
        else:
            base_priority = 3  # –°—Ä–µ–¥–Ω—è—è –≤–∞–∂–Ω–æ—Å—Ç—å
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ DKN –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        if dkn_prediction > 0.7:
            dkn_modifier = -1  # –í—ã—Å–æ–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É—Å–ø–µ—Ö–∞ - –ø–æ–≤—ã—à–∞–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        elif dkn_prediction < 0.3:
            dkn_modifier = 1   # –ù–∏–∑–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å - –ø–æ–Ω–∏–∂–∞–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        else:
            dkn_modifier = 0
        
        # –£—á–∏—Ç—ã–≤–∞–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç—å
        if task.difficulty == 'beginner':
            difficulty_modifier = 0
        elif task.difficulty == 'intermediate':
            difficulty_modifier = 1
        else:
            difficulty_modifier = 2
        
        final_priority = max(1, min(5, base_priority + dkn_modifier + difficulty_modifier))
        return final_priority
    
    def _calculate_confidence(self, mastery_prob: float, dkn_prediction: float) -> float:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
        # –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤—ã—à–µ, –∫–æ–≥–¥–∞ –¥–∞–Ω–Ω—ã–µ BKT –∏ DKN —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω—ã
        if mastery_prob > 0.6 and dkn_prediction > 0.6:
            return 0.9  # –í—ã—Å–æ–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        elif mastery_prob < 0.4 and dkn_prediction < 0.4:
            return 0.8  # –í—ã—Å–æ–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å (—Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å)
        elif abs(mastery_prob - dkn_prediction) < 0.2:
            return 0.7  # –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        else:
            return 0.5  # –ù–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å (–Ω–µ—Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å)
    
    def _generate_integrated_reasoning(self, skill_name: str, mastery_prob: float, task: Task, dkn_prediction: float) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ —Å —É—á–µ—Ç–æ–º BKT –∏ DKN –¥–∞–Ω–Ω—ã—Ö"""
        # –ê–Ω–∞–ª–∏–∑ –æ—Å–≤–æ–µ–Ω–∏—è –Ω–∞–≤—ã–∫–∞
        if mastery_prob < 0.3:
            skill_status = "–Ω–µ –æ—Å–≤–æ–µ–Ω"
        elif mastery_prob < 0.7:
            skill_status = "—á–∞—Å—Ç–∏—á–Ω–æ –æ—Å–≤–æ–µ–Ω"
        else:
            skill_status = "–±–ª–∏–∑–æ–∫ –∫ –æ—Å–≤–æ–µ–Ω–∏—é"
        
        # –ê–Ω–∞–ª–∏–∑ DKN –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        if dkn_prediction > 0.7:
            dkn_status = "–≤—ã—Å–æ–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É—Å–ø–µ—Ö–∞"
        elif dkn_prediction > 0.5:
            dkn_status = "—Å—Ä–µ–¥–Ω—è—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É—Å–ø–µ—Ö–∞"
        else:
            dkn_status = "–Ω–∏–∑–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É—Å–ø–µ—Ö–∞"
        
        reasoning = f"–ù–∞–≤—ã–∫ '{skill_name}' {skill_status} (BKT: {mastery_prob:.1%}). "
        reasoning += f"DKN –º–æ–¥–µ–ª—å –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç {dkn_status} ({dkn_prediction:.1%}). "
        reasoning += f"–ó–∞–¥–∞–Ω–∏–µ —É—Ä–æ–≤–Ω—è '{task.difficulty}' —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è –Ω–∞–≤—ã–∫–∞."
        
        return reasoning
    
    def print_detailed_analysis(self, student_id: int):
        """–í—ã–≤–æ–¥–∏—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
        print(f"\nüîç –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ò–ù–¢–ï–ì–†–ò–†–û–í–ê–ù–ù–´–• –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ô")
        print("=" * 60)
        
        recommendations = self.get_recommendations(student_id, num_recommendations=5)
        
        print(f"\nüéØ –¢–û–ü-5 –ò–ù–¢–ï–ì–†–ò–†–û–í–ê–ù–ù–´–• –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ô:")
        print("-" * 40)
        
        for i, rec in enumerate(recommendations, 1):
            print(f"{i}. {rec.task_title}")
            print(f"   üéØ –ù–∞–≤—ã–∫: {rec.skill_name}")
            print(f"   üìä BKT –æ—Å–≤–æ–µ–Ω–∏–µ: {rec.skill_mastery:.1%}")
            print(f"   üß† DKN –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ: {rec.dkn_prediction:.1%}")
            print(f"   üìà –°–ª–æ–∂–Ω–æ—Å—Ç—å: {rec.task_difficulty}")
            print(f"   ‚≠ê –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {rec.priority}/5")
            print(f"   üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {rec.confidence:.2f}")
            print(f"   üí≠ –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: {rec.reasoning}")
            print()


def test_integrated_recommender(student_id: int = 7):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–ù–¢–ï–ì–†–ò–†–û–í–ê–ù–ù–û–ô –°–ò–°–¢–ï–ú–´ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ô")
    print("=" * 70)
    
    # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –æ–±—É—á–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å
    model_paths = [
        "training/models/best_model.pth",
        "../checkpoints/best_model.pth", 
        "../best_enhanced_model.pth",
        "../best_simple_model.pth"
    ]
    
    model_path = None
    for path in model_paths:
        if os.path.exists(path):
            model_path = path
            break
    
    recommender = IntegratedSkillRecommender(model_path)
    recommender.print_detailed_analysis(student_id)
    
    print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print("\nüéØ –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã:")
    print("   ‚úÖ –ö–æ–º–±–∏–Ω–∏—Ä—É–µ—Ç DKN –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –∏ BKT –∞–Ω–∞–ª–∏–∑ –Ω–∞–≤—ã–∫–æ–≤")
    print("   ‚úÖ –£—á–∏—Ç—ã–≤–∞–µ—Ç —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö")
    print("   ‚úÖ –ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∏—Ä—É–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞–∂–Ω–æ—Å—Ç–∏ –Ω–∞–≤—ã–∫–æ–≤ –∏ —Ç–æ—á–Ω–æ—Å—Ç–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π")
    print("   ‚úÖ –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è—Ö")
    print("   ‚úÖ –û–±—ä—è—Å–Ω—è–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏")
    print("   ‚úÖ –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª: –ë–∞–∑–∞ ‚Üí DKN ‚Üí –ù–∞–≤—ã–∫–∏ ‚Üí –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")


if __name__ == "__main__":
    test_integrated_recommender(student_id=7)
