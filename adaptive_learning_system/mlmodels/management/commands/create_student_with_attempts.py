"""
Django management –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞ —Å –ø–æ–ø—ã—Ç–∫–∞–º–∏ —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π.

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python manage.py create_student_with_attempts
    python manage.py create_student_with_attempts --mastered 15 --partial 10
    python manage.py create_student_with_attempts --recreate
"""

from django.core.management.base import BaseCommand
from mlmodels.tests.create_student_with_attempts import StudentCreatorWithAttempts
from django.contrib.auth.models import User


class Command(BaseCommand):
    help = '–°–æ–∑–¥–∞–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞ —Å –ø–æ–ø—ã—Ç–∫–∞–º–∏ —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏ –æ–±—É—á–µ–Ω–∏—è'

    def add_arguments(self, parser):
        parser.add_argument(
            '--mastered',
            type=int,
            help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å–≤–æ–µ–Ω–Ω—ã—Ö –Ω–∞–≤—ã–∫–æ–≤',
            default=12
        )
        parser.add_argument(
            '--partial',
            type=int,
            help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å—Ç–∏—á–Ω–æ –æ—Å–≤–æ–µ–Ω–Ω—ã—Ö –Ω–∞–≤—ã–∫–æ–≤',
            default=8
        )
        parser.add_argument(
            '--recreate',
            action='store_true',
            help='–ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–∞ –µ—Å–ª–∏ –æ–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç',
        )
        parser.add_argument(
            '--output-dir',
            type=str,
            help='–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö',
            default=None
        )
        parser.add_argument(
            '--seed',
            type=int,
            help='Seed –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤',
            default=None
        )

    def handle(self, *args, **options):
        import random
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º seed –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏
        if options['seed']:
            random.seed(options['seed'])
            self.stdout.write(f"üé≤ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω seed: {options['seed']}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞
        username = "alex_klementev"
        if User.objects.filter(username=username).exists() and not options['recreate']:
            self.stdout.write(
                self.style.WARNING(
                    f'‚ö†Ô∏è –°—Ç—É–¥–µ–Ω—Ç {username} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. '
                    '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --recreate –¥–ª—è –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è.'
                )
            )
            return
        
        creator = StudentCreatorWithAttempts()
        
        try:
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏
            creator.trajectory_builder.target_mastered_count = options['mastered']
            creator.trajectory_builder.target_partial_count = options['partial']
            
            # –°–æ–∑–¥–∞–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞
            student_profile = creator.create_student()
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ü–µ–ª–µ–≤—ã–µ —É—Ä–æ–≤–Ω–∏
            target_mastery = creator.generate_target_mastery_from_trajectory()
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ–ø—ã—Ç–∫–∏
            attempts = creator.create_all_task_attempts()
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            analysis = creator.analyze_resulting_mastery()
            
            # –í—ã–≤–æ–¥–∏–º –æ—Ç—á–µ—Ç
            creator.print_detailed_report(analysis)
            
            # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            creator.export_student_data(analysis, options['output_dir'])
            
            self.stdout.write(
                self.style.SUCCESS(f'\n‚ú® –°—Ç—É–¥–µ–Ω—Ç {student_profile.full_name} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!')
            )
            self.stdout.write(
                self.style.SUCCESS(f'üìä –°–æ–∑–¥–∞–Ω–æ –ø–æ–ø—ã—Ç–æ–∫: {len(attempts)}')
            )
            self.stdout.write(
                self.style.SUCCESS(f'üìà –û—Å–≤–æ–µ–Ω–æ –Ω–∞–≤—ã–∫–æ–≤: {analysis["mastered_count"]} –ø–æ–ª–Ω–æ—Å—Ç—å—é, {analysis["partial_count"]} —á–∞—Å—Ç–∏—á–Ω–æ')
            )
                
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'‚ùå –û—à–∏–±–∫–∞: {e}')
            )
            raise
