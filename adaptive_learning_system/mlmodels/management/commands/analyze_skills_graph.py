"""
Django management –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –≥—Ä–∞—Ñ–∞ –Ω–∞–≤—ã–∫–æ–≤.

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python manage.py analyze_skills_graph
"""

from django.core.management.base import BaseCommand
from mlmodels.tests.parse_skills_graph import SkillsGraphParser


class Command(BaseCommand):
    help = '–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≥—Ä–∞—Ñ –Ω–∞–≤—ã–∫–æ–≤ –∏ –≤—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É'

    def add_arguments(self, parser):
        parser.add_argument(
            '--export-only',
            action='store_true',
            help='–¢–æ–ª—å–∫–æ —ç–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –±–µ–∑ –≤—ã–≤–æ–¥–∞ –æ—Ç—á–µ—Ç–∞',
        )
        parser.add_argument(
            '--output-dir',
            type=str,
            help='–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö',
            default=None
        )
        parser.add_argument(
            '--target-skill',
            type=int,
            help='ID –Ω–∞–≤—ã–∫–∞ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –ø—É—Ç–∏ –∏–∑—É—á–µ–Ω–∏—è',
            default=None
        )

    def handle(self, *args, **options):
        parser = SkillsGraphParser()
        
        try:
            if options['export_only']:
                # –¢–æ–ª—å–∫–æ —ç–∫—Å–ø–æ—Ä—Ç
                parser.parse_skills_graph()
                parser.parse_task_skills_mapping()
                parser.export_graph_data(options['output_dir'])
                self.stdout.write(
                    self.style.SUCCESS('‚úÖ –î–∞–Ω–Ω—ã–µ –≥—Ä–∞—Ñ–∞ –Ω–∞–≤—ã–∫–æ–≤ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã')
                )
            else:
                # –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑
                parser.print_analysis_report()
                parser.export_graph_data(options['output_dir'])
                
                # –ü—É—Ç—å –∏–∑—É—á–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –Ω–∞–≤—ã–∫–∞
                if options['target_skill']:
                    path = parser.get_skill_learning_path(options['target_skill'])
                    self.stdout.write(f"\nüéØ –ü—É—Ç—å –∏–∑—É—á–µ–Ω–∏—è –¥–ª—è –Ω–∞–≤—ã–∫–∞ {options['target_skill']}:")
                    for i, skill_id in enumerate(path, 1):
                        skill_name = parser.skill_info[skill_id].name
                        self.stdout.write(f"  {i}. {skill_name} (ID: {skill_id})")
                
                self.stdout.write(
                    self.style.SUCCESS('\n‚ú® –ê–Ω–∞–ª–∏–∑ –≥—Ä–∞—Ñ–∞ –Ω–∞–≤—ã–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω')
                )
                
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'‚ùå –û—à–∏–±–∫–∞: {e}')
            )
            raise
