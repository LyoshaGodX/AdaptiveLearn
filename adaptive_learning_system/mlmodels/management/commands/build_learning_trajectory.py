"""
Django management –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ –æ–±—É—á–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞.

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python manage.py build_learning_trajectory
    python manage.py build_learning_trajectory --mastered 15 --partial 10
    python manage.py build_learning_trajectory --export-only
"""

from django.core.management.base import BaseCommand
from mlmodels.tests.learning_trajectory_builder import LearningTrajectoryBuilder


class Command(BaseCommand):
    help = '–°—Ç—Ä–æ–∏—Ç —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—é –æ–±—É—á–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≥—Ä–∞—Ñ–∞ –Ω–∞–≤—ã–∫–æ–≤'

    def add_arguments(self, parser):
        parser.add_argument(
            '--mastered',
            type=int,
            help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å–≤–æ–µ–Ω–Ω—ã—Ö –Ω–∞–≤—ã–∫–æ–≤',
            default=12
        )
        parser.add_argument(
            '--partial',
            type=int,
            help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å—Ç–∏—á–Ω–æ –æ—Å–≤–æ–µ–Ω–Ω—ã—Ö –Ω–∞–≤—ã–∫–æ–≤',
            default=8
        )
        parser.add_argument(
            '--export-only',
            action='store_true',
            help='–¢–æ–ª—å–∫–æ —ç–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –±–µ–∑ –≤—ã–≤–æ–¥–∞ –æ—Ç—á–µ—Ç–∞',
        )
        parser.add_argument(
            '--output-dir',
            type=str,
            help='–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö',
            default=None
        )
        parser.add_argument(
            '--seed',
            type=int,
            help='Seed –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤',
            default=None
        )

    def handle(self, *args, **options):
        import random
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º seed –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏
        if options['seed']:
            random.seed(options['seed'])
            self.stdout.write(f"üé≤ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω seed: {options['seed']}")
        
        builder = LearningTrajectoryBuilder()
        
        try:
            builder.initialize()            # –°–∏–º—É–ª–∏—Ä—É–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞
            mastery, learning_steps = builder.simulate_student_learning(
                target_mastered_count=options['mastered'],
                target_partial_count=options['partial']
            )
            
            if not options['export_only']:
                # –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç
                builder.print_student_report(mastery, learning_steps)
            
            # –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
            builder.export_trajectory_data(mastery, learning_steps, options['output_dir'])
            
            self.stdout.write(
                self.style.SUCCESS('\n‚ú® –¢—Ä–∞–µ–∫—Ç–æ—Ä–∏—è –æ–±—É—á–µ–Ω–∏—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!')
            )
                
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'‚ùå –û—à–∏–±–∫–∞: {e}')
            )
            raise
