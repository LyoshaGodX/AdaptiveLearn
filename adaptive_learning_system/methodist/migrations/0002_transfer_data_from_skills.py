# Generated by Django 5.2.1 on 2025-06-11 02:49

from django.db import migrations


def transfer_data(apps, schema_editor):
    """Переносим данные из приложения skills в приложение methodist"""
    # Получаем модели из обоих приложений
    SkillsSkill = apps.get_model('skills', 'Skill')
    SkillsCourse = apps.get_model('skills', 'Course')
    MethodistSkill = apps.get_model('methodist', 'Skill')
    MethodistCourse = apps.get_model('methodist', 'Course')
    
    print("Начинаем перенос данных из приложения skills в methodist...")
    
    # Переносим курсы
    print("Переносим курсы...")
    for course in SkillsCourse.objects.all():
        MethodistCourse.objects.get_or_create(
            id=course.id,
            defaults={
                'name': course.name,
                'description': course.description
            }
        )
        print(f"Курс '{course.name}' перенесен")
    
    # Переносим навыки (без связей)
    print("Переносим навыки...")
    skill_mapping = {}  # Для хранения соответствия старых и новых объектов
    for skill in SkillsSkill.objects.all():
        new_skill, created = MethodistSkill.objects.get_or_create(
            name=skill.name,
            defaults={
                'description': skill.description,
                'is_base': skill.is_base
            }
        )
        skill_mapping[skill.id] = new_skill
        status = "создан" if created else "существует"
        print(f"Навык '{skill.name}' {status}")
    
    # Обновляем связи между навыками и курсами
    print("Устанавливаем связи навыков с курсами...")
    for old_skill in SkillsSkill.objects.all():
        new_skill = skill_mapping[old_skill.id]
        
        # Добавляем курсы к навыку
        for course in old_skill.courses.all():
            try:
                new_course = MethodistCourse.objects.get(id=course.id)
                new_skill.courses.add(new_course)
                print(f"Навык '{new_skill.name}' добавлен к курсу '{new_course.name}'")
            except MethodistCourse.DoesNotExist:
                print(f"Предупреждение: Курс {course.id} не найден в methodist")
    
    # Устанавливаем связи предпосылок между навыками
    print("Устанавливаем связи предпосылок...")
    for old_skill in SkillsSkill.objects.all():
        new_skill = skill_mapping[old_skill.id]
        
        # Добавляем предпосылки
        for prereq in old_skill.prerequisites.all():
            if prereq.id in skill_mapping:
                new_prereq = skill_mapping[prereq.id]
                new_skill.prerequisites.add(new_prereq)
                print(f"Установлена связь: '{new_prereq.name}' -> '{new_skill.name}'")
            else:
                print(f"Предупреждение: Предпосылка {prereq.id} не найдена для навыка {old_skill.name}")
    
    print("Перенос данных завершен успешно!")


def reverse_transfer_data(apps, schema_editor):
    """Обратная операция - удаляем все данные из приложения methodist"""
    MethodistSkill = apps.get_model('methodist', 'Skill')
    MethodistCourse = apps.get_model('methodist', 'Course')
    
    print("Удаляем все данные из приложения methodist...")
    MethodistSkill.objects.all().delete()
    MethodistCourse.objects.all().delete()
    print("Данные удалены")


class Migration(migrations.Migration):

    dependencies = [
        ('methodist', '0001_initial'),
        ('skills', '0003_remove_course_name_en_remove_skill_name_en'),
    ]

    operations = [
        migrations.RunPython(transfer_data, reverse_transfer_data),
    ]
