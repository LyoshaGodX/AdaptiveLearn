"""
–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Ä–∞–±–æ—Ç—ã BKT –º–æ–¥–µ–ª–∏:
1. –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î
2. –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ BKT –º–æ–¥–µ–ª—å
3. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –≤ –ë–î
"""

import os
import sys
import django
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
sys.path.append(str(Path(__file__).parent))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'adaptive_learning.settings')
django.setup()

from datetime import datetime, timedelta
from django.utils import timezone
from django.contrib.auth.models import User

# –ò–º–ø–æ—Ä—Ç—ã –Ω–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π
from mlmodels.services.student_assessment_service import StudentAssessmentService
from mlmodels.models import TaskAttempt, StudentSkillMastery
from student.models import StudentProfile
from methodist.models import Task, Course
from skills.models import Skill


def test_full_bkt_cycle():
    """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ BKT –º–æ–¥–µ–ª–∏"""
    print("üß™ –¢–ï–°–¢ –ü–û–õ–ù–û–ì–û –¶–ò–ö–õ–ê BKT –ú–û–î–ï–õ–ò")
    print("=" * 50)
    
    # 1. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    print("1Ô∏è‚É£ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    student, tasks, skills = create_test_data()
    print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω —Å—Ç—É–¥–µ–Ω—Ç: {student.full_name}")
    print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω–æ –∑–∞–¥–∞–Ω–∏–π: {len(tasks)}")
    print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω–æ –Ω–∞–≤—ã–∫–æ–≤: {len(skills)}")
    
    # 2. –°–æ–∑–¥–∞–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫ –≤ –ë–î
    print("\n2Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫...")
    attempts = create_historical_attempts(student, tasks)
    print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω–æ –ø–æ–ø—ã—Ç–æ–∫ –≤ –ë–î: {len(attempts)}")
    
    # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ë–î –¥–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ BKT
    print("\n3Ô∏è‚É£ –°–æ—Å—Ç–æ—è–Ω–∏–µ –ë–î –¥–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ BKT...")
    masteries_before = check_skill_masteries(student, skills)
    print_masteries("–î–æ BKT:", masteries_before)
    
    # 4. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫ BKT –º–æ–¥–µ–ª–∏
    print("\n4Ô∏è‚É£ –ó–∞–ø—É—Å–∫ BKT –º–æ–¥–µ–ª–∏...")
    service = StudentAssessmentService()
      # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ–ø—ã—Ç–æ–∫
    result = service.assess_student_from_attempts_history(
        student_id=student.id, 
        reset_state=True,
        days_back=None  # –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏
    )
    
    if 'error' in result:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ BKT: {result['error']}")
        return
    
    print(f"   ‚úÖ BKT –æ–±—Ä–∞–±–æ—Ç–∞–ª–∞ {result.get('processed_attempts', 0)} –ø–æ–ø—ã—Ç–æ–∫")
    
    # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ë–î –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ BKT
    print("\n5Ô∏è‚É£ –°–æ—Å—Ç–æ—è–Ω–∏–µ –ë–î –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ BKT...")
    masteries_after = check_skill_masteries(student, skills)
    print_masteries("–ü–æ—Å–ª–µ BKT:", masteries_after)
    
    # 6. –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    print("\n6Ô∏è‚É£ –ê–Ω–∞–ª–∏–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...")
    analyze_changes(masteries_before, masteries_after)
    
    # 7. –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–æ–≤—É—é –ø–æ–ø—ã—Ç–∫—É
    print("\n7Ô∏è‚É£ –¢–µ—Å—Ç –Ω–æ–≤–æ–π –ø–æ–ø—ã—Ç–∫–∏...")
    test_new_attempt(service, student, tasks[0])
    
    # 8. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ
    print("\n8Ô∏è‚É£ –¢–µ—Å—Ç –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è...")
    test_prediction(service, student, skills[0])
    
    print("\nüéâ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!")


def create_test_data():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–æ—Ñ–∏–ª—å —Å—Ç—É–¥–µ–Ω—Ç–∞
    username = "test_bkt_student"
    user, created = User.objects.get_or_create(
        username=username,
        defaults={
            'first_name': '–¢–µ—Å—Ç',
            'last_name': 'BKT',
            'email': f'{username}@test.com'
        }
    )
    
    student, created = StudentProfile.objects.get_or_create(
        user=user,
        defaults={
            'full_name': '–¢–µ—Å—Ç BKT –°—Ç—É–¥–µ–Ω—Ç',
            'email': user.email,
            'organization': '–¢–µ—Å—Ç–æ–≤–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è'
        }
    )
    
    # –°–æ–∑–¥–∞–µ–º –Ω–∞–≤—ã–∫–∏
    skills = []
    skill_names = ['Python Basics', 'Data Structures', 'Algorithms']
    for name in skill_names:
        skill, created = Skill.objects.get_or_create(
            name=name,
            defaults={'description': f'–ù–∞–≤—ã–∫ {name}'}
        )
        skills.append(skill)
    
    # –°–æ–∑–¥–∞–µ–º –∫—É—Ä—Å
    course, created = Course.objects.get_or_create(
        id='TEST_BKT',
        defaults={
            'name': '–¢–µ—Å—Ç BKT –ö—É—Ä—Å',
            'description': '–¢–µ—Å—Ç–æ–≤—ã–π –∫—É—Ä—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ BKT',
            'duration_hours': 20
        }
    )    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞–Ω–∏—è
    tasks = []
    for i in range(5):
        task, created = Task.objects.get_or_create(
            title=f'–¢–µ—Å—Ç–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ BKT {i+1}',
            defaults={
                'question_text': f'–í–æ–ø—Ä–æ—Å –¥–ª—è –∑–∞–¥–∞–Ω–∏—è {i+1}',
                'task_type': 'single',
                'difficulty': 'intermediate',
                'is_active': True
            }
        )
        
        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ –Ω–∞–≤—ã–∫–∞–º –∏ –∫—É—Ä—Å—É
        if created:
            task.skills.add(skills[i % len(skills)])
            task.courses.add(course)
        
        tasks.append(task)
    
    return student, tasks, skills


def create_historical_attempts(student, tasks):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫"""
    attempts = []
    base_time = timezone.now() - timedelta(days=10)
    
    # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –ø–æ–ø—ã—Ç–∫–∏ —ç—Ç–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞
    TaskAttempt.objects.filter(student=student).delete()
    
    for i, task in enumerate(tasks):
        # –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
        for attempt_num in range(3):
            # –°–∏–º—É–ª–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å: –æ—Ç 40% –¥–æ 80% –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
            success_rate = 0.4 + (i * 0.1) + (attempt_num * 0.1)
            is_correct = hash(f"{i}_{attempt_num}") % 100 < (success_rate * 100)
            
            attempt = TaskAttempt.objects.create(
                student=student,
                task=task,
                is_correct=is_correct,
                time_spent=60 + (i * 30),  # 1-4 –º–∏–Ω—É—Ç—ã
                started_at=base_time + timedelta(hours=i*2 + attempt_num),
                completed_at=base_time + timedelta(hours=i*2 + attempt_num, minutes=5)
            )
            attempts.append(attempt)
    
    return attempts


def check_skill_masteries(student, skills):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–µ–∫—É—â–∏–µ —É—Ä–æ–≤–Ω–∏ –æ—Å–≤–æ–µ–Ω–∏—è –Ω–∞–≤—ã–∫–æ–≤"""
    masteries = {}
    for skill in skills:
        try:
            mastery = StudentSkillMastery.objects.get(
                student=student, skill=skill
            )
            masteries[skill.name] = {
                'mastery': mastery.current_mastery_prob,
                'attempts': mastery.attempts_count,
                'correct': mastery.correct_attempts,
                'accuracy': mastery.accuracy
            }
        except StudentSkillMastery.DoesNotExist:
            masteries[skill.name] = {
                'mastery': 0.0,
                'attempts': 0,
                'correct': 0,
                'accuracy': 0.0
            }
    
    return masteries


def print_masteries(title, masteries):
    """–í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Å–≤–æ–µ–Ω–∏–∏ –Ω–∞–≤—ã–∫–æ–≤"""
    print(f"   {title}")
    for skill_name, data in masteries.items():
        print(f"     üéØ {skill_name}: {data['mastery']:.3f} "
              f"({data['correct']}/{data['attempts']}, "
              f"—Ç–æ—á–Ω–æ—Å—Ç—å: {data['accuracy']:.2f})")


def analyze_changes(before, after):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –æ—Å–≤–æ–µ–Ω–∏–∏ –Ω–∞–≤—ã–∫–æ–≤"""
    for skill_name in before.keys():
        before_mastery = before[skill_name]['mastery']
        after_mastery = after[skill_name]['mastery']
        change = after_mastery - before_mastery
        
        if abs(change) > 0.001:
            direction = "üìà" if change > 0 else "üìâ"
            print(f"   {direction} {skill_name}: {before_mastery:.3f} ‚Üí {after_mastery:.3f} "
                  f"(–∏–∑–º–µ–Ω–µ–Ω–∏–µ: {change:+.3f})")
        else:
            print(f"   ‚û°Ô∏è {skill_name}: –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ({after_mastery:.3f})")


def test_new_attempt(service, student, task):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω–æ–≤–æ–π –ø–æ–ø—ã—Ç–∫–∏"""
    print(f"   –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ø–æ–ø—ã—Ç–∫—É –¥–ª—è –∑–∞–¥–∞–Ω–∏—è: {task.title}")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —É—Ä–æ–≤–Ω–∏
    before_masteries = {}
    for skill in task.skills.all():
        try:
            mastery = StudentSkillMastery.objects.get(student=student, skill=skill)
            before_masteries[skill.id] = mastery.current_mastery_prob
        except StudentSkillMastery.DoesNotExist:
            before_masteries[skill.id] = 0.0
      # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–≤—É—é –ø–æ–ø—ã—Ç–∫—É —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
    result = service.process_new_attempt(
        student_id=student.id,
        task_id=task.id,
        is_correct=True,
        answer_score=0.8
    )
    
    if 'error' not in result:
        print(f"   ‚úÖ –ù–æ–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞")
        for skill_id, skill_result in result.get('skills_updated', {}).items():
            before = before_masteries.get(skill_id, 0.0)
            after = skill_result['mastery_after']
            print(f"     üéØ –ù–∞–≤—ã–∫ {skill_result['skill_name']}: {before:.3f} ‚Üí {after:.3f}")
    else:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ø—ã—Ç–∫–∏: {result['error']}")


def test_prediction(service, student, skill):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ"""
    print(f"   –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º –æ—Å–≤–æ–µ–Ω–∏–µ –Ω–∞–≤—ã–∫–∞: {skill.name}")
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–∞–ø—Ä—è–º—É—é –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è
    predictions = service.assessment_interface.predict_skill_mastery(
        student_id=student.id,
        skill_id=skill.id,
        future_attempts=3
    )
    
    if predictions:
        current_mastery = predictions[0] if predictions else 0.0
        estimated_mastery = predictions[-1] if len(predictions) > 1 else current_mastery
        
        print(f"   ‚úÖ –¢–µ–∫—É—â–µ–µ –æ—Å–≤–æ–µ–Ω–∏–µ: {current_mastery:.3f}")
        print(f"   üîÆ –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ—Å–ª–µ 3 –ø–æ–ø—ã—Ç–æ–∫: {estimated_mastery:.3f}")
        if estimated_mastery > 0.8:
            print(f"   üéØ –°—Ç—É–¥–µ–Ω—Ç –¥–æ—Å—Ç–∏–≥–Ω–µ—Ç –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–∞!")
        else:
            print(f"   üìö –°—Ç—É–¥–µ–Ω—Ç—É –Ω—É–∂–Ω–æ –±–æ–ª—å—à–µ –ø—Ä–∞–∫—Ç–∏–∫–∏")
    else:
        print(f"   ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑")


def test_database_integration():
    """–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüîç –¢–ï–°–¢ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –° –ë–ê–ó–û–ô –î–ê–ù–ù–´–•")
    print("=" * 40)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è
    masteries = StudentSkillMastery.objects.all()
    attempts = TaskAttempt.objects.all()
    
    print(f"üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –æ—Å–≤–æ–µ–Ω–∏—è –Ω–∞–≤—ã–∫–æ–≤: {masteries.count()}")
    print(f"üìù –í—Å–µ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ –≤ –ë–î: {attempts.count()}")
    
    if masteries.exists():
        print("\nüìã –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø–∏—Å–µ–π –æ—Å–≤–æ–µ–Ω–∏—è –Ω–∞–≤—ã–∫–æ–≤:")
        for mastery in masteries[:3]:
            print(f"   üë§ {mastery.student.full_name}")
            print(f"   üéØ {mastery.skill.name}: {mastery.current_mastery_prob:.3f}")
            print(f"   üìä –ü–æ–ø—ã—Ç–æ–∫: {mastery.attempts_count}, —Ç–æ—á–Ω–æ—Å—Ç—å: {mastery.accuracy:.2f}")
            print()


if __name__ == "__main__":
    try:
        test_full_bkt_cycle()
        test_database_integration()
        print("\n‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê –í –¢–ï–°–¢–ê–•: {e}")
        import traceback
        traceback.print_exc()
