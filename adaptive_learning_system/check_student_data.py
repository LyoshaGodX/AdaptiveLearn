#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–∞ ID=15 (alex_klementev)
"""

import os
import sys
import django
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'adaptive_learning.settings')
django.setup()

from django.contrib.auth.models import User
from student.models import StudentProfile
from skills.models import Skill
from methodist.models import Task
from mlmodels.models import StudentSkillMastery, TaskAttempt, DQNRecommendation
from mlmodels.dqn.data_processor import DQNDataProcessor


def check_student_data():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å—Ç—É–¥–µ–Ω—Ç–∞ —Å ID=15"""
    
    print("üîç –ü–†–û–í–ï–†–ö–ê –î–ê–ù–ù–´–• –°–¢–£–î–ï–ù–¢–ê ID=15 (alex_klementev)")
    print("="*80)
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = User.objects.get(id=15)
        print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: {user.username} (ID: {user.id})")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å —Å—Ç—É–¥–µ–Ω—Ç–∞
        try:
            student_profile = StudentProfile.objects.get(user=user)
            print(f"‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —Å—Ç—É–¥–µ–Ω—Ç–∞ –Ω–∞–π–¥–µ–Ω (ID: {student_profile.id})")
        except StudentProfile.DoesNotExist:
            print("‚ùå –ü—Ä–æ—Ñ–∏–ª—å —Å—Ç—É–¥–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        print("\nüìä –ê–ù–ê–õ–ò–ó –ü–û–ü–´–¢–û–ö")
        print("-" * 40)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫–∏
        attempts = TaskAttempt.objects.filter(student=student_profile)
        print(f"‚úÖ –í—Å–µ–≥–æ –ø–æ–ø—ã—Ç–æ–∫: {attempts.count()}")
        
        if attempts.exists():
            recent_attempts = attempts.order_by('-started_at')[:5]
            print("üïí –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –ø–æ–ø—ã—Ç–æ–∫:")
            for attempt in recent_attempts:
                status = "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ" if attempt.is_correct else "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ"
                print(f"  - –ó–∞–¥–∞–Ω–∏–µ {attempt.task.id}: {status} ({attempt.started_at.strftime('%Y-%m-%d %H:%M')})")
        
        print("\nüìä –ê–ù–ê–õ–ò–ó BKT –û–¶–ï–ù–û–ö")
        print("-" * 40)
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º BKT –æ—Ü–µ–Ω–∫–∏
        bkt_records = StudentSkillMastery.objects.filter(student=student_profile)
        print(f"‚úÖ –í—Å–µ–≥–æ BKT –∑–∞–ø–∏—Å–µ–π: {bkt_records.count()}")
        
        if bkt_records.exists():
            print("üéØ BKT –ø–æ –Ω–∞–≤—ã–∫–∞–º:")
            for bkt in bkt_records.order_by('-current_mastery_prob')[:10]:
                status = "üî• –û–°–í–û–ï–ù" if bkt.current_mastery_prob >= 0.85 else "üî∂ –ò–ó–£–ß–ê–ï–¢–°–Ø" if bkt.current_mastery_prob >= 0.5 else "üî¥ –ù–ò–ó–ö–ò–ô"
                print(f"  - {bkt.skill.name}: {bkt.current_mastery_prob:.4f} {status}")
        
        print("\nüìã –ê–ù–ê–õ–ò–ó –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ô")
        print("-" * 40)
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recommendations = DQNRecommendation.objects.filter(student_id=user.id)
        print(f"‚úÖ –í—Å–µ–≥–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {recommendations.count()}")
        
        if recommendations.exists():
            current_rec = recommendations.filter(is_current=True).first()
            if current_rec:
                print(f"üìå –¢–µ–∫—É—â–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ó–∞–¥–∞–Ω–∏–µ {current_rec.task.id} (ID —Ä–µ–∫: {current_rec.id})")
                print(f"   Q-value: {current_rec.q_value:.4f}, –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {current_rec.confidence:.4f}")
            else:
                print("‚ö†Ô∏è  –ù–µ—Ç —Ç–µ–∫—É—â–µ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
            
            recent_recs = recommendations.order_by('-created_at')[:5]
            print("üïí –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:")
            for rec in recent_recs:
                current = "üìå –¢–ï–ö–£–©–ê–Ø" if rec.is_current else ""
                print(f"  - –†–µ–∫ {rec.id}: –ó–∞–¥–∞–Ω–∏–µ {rec.task.id} {current} ({rec.created_at.strftime('%Y-%m-%d %H:%M')})")
        
        print("\nüß† –¢–ï–°–¢ DQN DATA PROCESSOR")
        print("-" * 40)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º DQNDataProcessor
        try:
            processor = DQNDataProcessor()
            state = processor.get_student_state(user.id)
            print(f"‚úÖ DQN —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ: —Ä–∞–∑–º–µ—Ä {state.shape}")
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
            available_actions = processor.get_available_actions(user.id)
            print(f"‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π: {len(available_actions)}")
            
            if available_actions:
                print("üéØ –ü–µ—Ä–≤—ã–µ 5 –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π:")
                for i, task_id in enumerate(available_actions[:5]):
                    try:
                        task = Task.objects.get(id=task_id)
                        print(f"  - –ó–∞–¥–∞–Ω–∏–µ {task_id}: {task.title[:50]}...")
                    except Task.DoesNotExist:
                        print(f"  - –ó–∞–¥–∞–Ω–∏–µ {task_id}: [–∑–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ]")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ DQN Data Processor: {e}")
        
        print("\n‚úÖ –ü–†–û–í–ï–†–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê")
        print("="*80)
        
    except User.DoesNotExist:
        print("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID=15 –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: {e}")


if __name__ == "__main__":
    check_student_data()
