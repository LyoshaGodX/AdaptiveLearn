/*
–°–û–ë–´–¢–ò–Ø –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø –î–õ–Ø –û–¢–°–õ–ï–ñ–ò–í–ê–ù–ò–Ø UX –ü–û–¢–û–ö–ê:

üéØ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø - –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
üöÄ [–°–û–ë–´–¢–ò–ï 1] - –ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç"
üìä [–°–û–ë–´–¢–ò–ï 2] - –ù–∞—á–∞–ª–æ –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
‚úÖ [–°–û–ë–´–¢–ò–ï 2] - –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
‚è≥ [–°–û–ë–´–¢–ò–ï 3] - –ü–æ—è–≤–ª–µ–Ω–∏–µ –Ω–∞–¥–ø–∏—Å–∏ "–ü–æ–¥–±–∏—Ä–∞–µ–º –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ..." (—á–µ—Ä–µ–∑ 2.5 —Å–µ–∫)
üîÑ [–°–û–ë–´–¢–ò–ï 3] - –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –æ–∂–∏–¥–∞–Ω–∏—è
üîç –ü–†–û–í–ï–†–ö–ê - –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
üì° –ü–†–û–í–ï–†–ö–ê - –û—Ç–≤–µ—Ç—ã –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏
üéâ –ì–û–¢–û–í–û - –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞
üéØ [–°–û–ë–´–¢–ò–ï 4] - –ü–æ–∫–∞–∑ –∫–Ω–æ–ø–∫–∏ "–ù–∞—á–∞—Ç—å –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ"
üïê [–°–û–ë–´–¢–ò–ï 4] - –§–æ–ª–±—ç–∫ –ø–æ —Ç–∞–π–º–∞—É—Ç—É (30 —Å–µ–∫)

–í—Å–µ —Å–æ–±—ã—Ç–∏—è —Å–æ–¥–µ—Ä–∂–∞—Ç timestamp –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.
*/

// JavaScript –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ–±—É—á–µ–Ω–∏—è

document.addEventListener('DOMContentLoaded', function() {
    console.log('üéØ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ–±—É—á–µ–Ω–∏—è', {
        timestamp: new Date().toISOString(),
        url: window.location.href,
        userAgent: navigator.userAgent
    });
    
    initLearningPage();
});

function initLearningPage() {
    setupAnswerSelection();
    setupFormSubmission();
    setupTimer();
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—ã–±–æ—Ä–∞ –æ—Ç–≤–µ—Ç–æ–≤
function setupAnswerSelection() {
    const answerOptions = document.querySelectorAll('.answer-option');
    const taskType = document.getElementById('task-type')?.value;
    
    answerOptions.forEach(option => {
        option.addEventListener('click', function() {
            const input = this.querySelector('input[type="radio"], input[type="checkbox"]');
            
            if (taskType === 'multiple') {
                // –î–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
                input.checked = !input.checked;
                this.classList.toggle('selected', input.checked);
            } else {
                // –î–ª—è –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
                answerOptions.forEach(opt => opt.classList.remove('selected'));
                input.checked = true;
                this.classList.add('selected');
            }
            
            updateSubmitButton();
        });
    });
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
function updateSubmitButton() {
    const submitBtn = document.getElementById('submit-answer-btn');
    const selectedAnswers = document.querySelectorAll('input[name="answer"]:checked');
    
    if (selectedAnswers.length > 0) {
        submitBtn.disabled = false;
        submitBtn.textContent = '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç';
    } else {
        submitBtn.disabled = true;
        submitBtn.textContent = '–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç';
    }
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
function setupFormSubmission() {
    const form = document.getElementById('task-answer-form');
    if (!form) return;
    
    form.addEventListener('submit', function(e) {
        e.preventDefault();
        submitAnswer();
    });
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞
function submitAnswer() {
    const form = document.getElementById('task-answer-form');
    const submitBtn = document.getElementById('submit-answer-btn');
    const selectedAnswers = document.querySelectorAll('input[name="answer"]:checked');
    
    if (selectedAnswers.length === 0) {
        showError('–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞');
        return;
    }
    
    // –°–û–ë–´–¢–ò–ï 1: –ù–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç"
    console.log('üöÄ [–°–û–ë–´–¢–ò–ï 1] –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç"', {
        timestamp: new Date().toISOString(),
        selectedAnswersCount: selectedAnswers.length,
        selectedAnswerIds: Array.from(selectedAnswers).map(a => a.value)
    });
      // 1. –°–†–ê–ó–£ —Å–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
    submitBtn.style.display = 'none';
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ä–∞–∑—É
    showLoadingState();
    
    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
    const formData = new FormData(form);
    // –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∑–∞–¥–∞–Ω–∏—è
    const startTime = document.getElementById('task-started-at')?.value || new Date().toISOString();
    formData.append('start_time', startTime);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î
    fetch(window.location.href, {
        method: 'POST',
        body: formData,
        headers: {
            'X-CSRFToken': getCsrfToken()
        }
    })
    .then(response => response.json())    .then(data => {        if (data.success) {
            // –°–∫—Ä—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
            hideLoadingState();
            
            // 2. –°–†–ê–ó–£ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            console.log('üìä [–°–û–ë–´–¢–ò–ï 2] –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç—Ä–∏—Å–æ–≤–∫—É –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞', {
                timestamp: new Date().toISOString(),
                isCorrect: data.is_correct,
                timeSpent: data.time_spent,
                correctAnswerIds: data.correct_answer_ids
            });
            
            highlightAnswers(data);
            showResultMessage(data);
            
            console.log('‚úÖ [–°–û–ë–´–¢–ò–ï 2] –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç—Ä–∏—Å–æ–≤–∞–Ω', {
                timestamp: new Date().toISOString()
            });
              // 3. –ü–û–°–õ–ï –ø–æ–∫–∞–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (–¥–∞—Ç—å –≤—Ä–µ–º—è –∏–∑—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç) –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
            setTimeout(() => {
                console.log('‚è≥ [–°–û–ë–´–¢–ò–ï 3] –ü–æ—è–≤–ª—è–µ—Ç—Å—è –Ω–∞–¥–ø–∏—Å—å "–ü–æ–¥–±–∏—Ä–∞–µ–º –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ..."', {
                    timestamp: new Date().toISOString(),
                    delayFromResult: '1500ms'
                });
                
                showWaitingButton();
                checkRecommendationStatusPeriodically();
            }, 1500); // –î–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—Ä–µ–º—è –∏–∑—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç (1.5 —Å–µ–∫—É–Ω–¥—ã)
              } else {
            // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞, —Å–∫—Ä—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–Ω–æ–ø–∫—É
            hideLoadingState();
            submitBtn.style.display = 'block';
            showError(data.error || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
        }
    })    .catch(error => {
        // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞, —Å–∫—Ä—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–Ω–æ–ø–∫—É
        hideLoadingState();
        submitBtn.style.display = 'block';
        console.error('–û—à–∏–±–∫–∞:', error);
        showError('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞');
    });
}

// –ü–æ–∫–∞–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
function showResultMessage(data) {
    const submitSection = document.querySelector('.submit-section');
    const resultDiv = document.createElement('div');
    resultDiv.className = `result-message ${data.is_correct ? 'correct' : 'incorrect'}`;
    resultDiv.innerHTML = `
        <div class="result-content">
            <i class="fas fa-${data.is_correct ? 'check-circle' : 'times-circle'}"></i>
            <span>${data.is_correct ? '–ü—Ä–∞–≤–∏–ª—å–Ω–æ!' : '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ'}</span>
            <small>–í—Ä–µ–º—è —Ä–µ—à–µ–Ω–∏—è: ${data.time_spent} —Å–µ–∫.</small>
        </div>
    `;
    
    submitSection.insertBefore(resultDiv, submitSection.firstChild);
    
    // –ü–ª–∞–≤–Ω–æ–µ –ø–æ—è–≤–ª–µ–Ω–∏–µ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
    setTimeout(() => {
        resultDiv.style.opacity = '1';
        resultDiv.style.transform = 'translateY(0) scale(1)';
    }, 150);
    
    // –≠—Ñ—Ñ–µ–∫—Ç –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è –≤–Ω–∏–º–∞–Ω–∏—è
    setTimeout(() => {
        resultDiv.style.animation = 'pulse 0.6s ease-in-out';
    }, 600);
}

// –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤
function highlightAnswers(data) {
    const answerOptions = document.querySelectorAll('.answer-option');
    const correctIds = data.correct_answer_ids || [];
    
    answerOptions.forEach(option => {
        const answerId = parseInt(option.dataset.answerId);
        const input = option.querySelector('input[type="radio"], input[type="checkbox"]');
        
        option.style.pointerEvents = 'none';
        input.disabled = true;
        option.classList.remove('selected');
        
        if (correctIds.includes(answerId)) {
            option.classList.add('correct');
        } else if (input.checked) {
            option.classList.add('incorrect');
        }
    });
}

// –ü–æ–∫–∞–∑ –∫–Ω–æ–ø–∫–∏ –æ–∂–∏–¥–∞–Ω–∏—è
function showWaitingButton() {
    console.log('üîÑ [–°–û–ë–´–¢–ò–ï 3] –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "–ü–æ–¥–±–∏—Ä–∞–µ–º –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ..."', {
        timestamp: new Date().toISOString()
    });
    
    const submitSection = document.querySelector('.submit-section');
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–Ω–æ–ø–∫—É –æ–∂–∏–¥–∞–Ω–∏—è
    const waitingBtn = document.createElement('button');
    waitingBtn.type = 'button';
    waitingBtn.id = 'waiting-btn';
    waitingBtn.className = 'waiting-recommendation-btn';
    waitingBtn.disabled = true;
    waitingBtn.innerHTML = '<span class="spinner"></span> –ü–æ–¥–±–∏—Ä–∞–µ–º –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ...';
    
    submitSection.appendChild(waitingBtn);
    
    console.log('‚úÖ [–°–û–ë–´–¢–ò–ï 3] –ù–∞–¥–ø–∏—Å—å "–ü–æ–¥–±–∏—Ä–∞–µ–º –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ..." –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∞', {
        timestamp: new Date().toISOString()
    });
}

// –ó–∞–º–µ–Ω–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
function replaceSubmitButtonWithWaiting() {
    const submitBtn = document.getElementById('submit-answer-btn');
    
    submitBtn.innerHTML = '<span class="spinner"></span> –ü–æ–¥–±–∏—Ä–∞–µ–º –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ...';
    submitBtn.disabled = true;
    submitBtn.className = 'waiting-recommendation-btn';
}

// –ü–æ–∫–∞–∑ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –Ω–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
function showNewTaskReady() {
    console.log('üéØ [–°–û–ë–´–¢–ò–ï 4] –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∫–∞–∑ –∫–Ω–æ–ø–∫–∏ "–ù–∞—á–∞—Ç—å –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ"', {
        timestamp: new Date().toISOString()
    });
    
    const waitingBtn = document.getElementById('waiting-btn') || 
                      document.querySelector('.waiting-recommendation-btn');
    
    if (waitingBtn) {
        waitingBtn.textContent = '–ù–∞—á–∞—Ç—å –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ';
        waitingBtn.className = 'new-task-btn';
        waitingBtn.disabled = false;
        waitingBtn.id = 'new-task-btn';
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é "–≥–æ—Ç–æ–≤–æ"
        waitingBtn.style.animation = 'pulse 0.5s ease-in-out';
        
        waitingBtn.addEventListener('click', function(e) {
            e.preventDefault();
            loadNewTask();
        });
        
        console.log('‚úÖ [–°–û–ë–´–¢–ò–ï 4] –ö–Ω–æ–ø–∫–∞ "–ù–∞—á–∞—Ç—å –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ" –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∞ –∏ –∞–∫—Ç–∏–≤–Ω–∞', {
            timestamp: new Date().toISOString()
        });
    } else {
        console.warn('‚ö†Ô∏è [–°–û–ë–´–¢–ò–ï 4] –ö–Ω–æ–ø–∫–∞ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –∑–∞–º–µ–Ω—ã', {
            timestamp: new Date().toISOString()
        });
    }
}

// –§–æ–ª–±—ç–∫ –¥–ª—è –ø–æ–∫–∞–∑–∞ –Ω–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è (–µ—Å–ª–∏ —Ç–∞–π–º–∞—É—Ç)
function showNewTaskReadyFallback() {
    console.log('üïê [–°–û–ë–´–¢–ò–ï 4] –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞—á–∞—Ç—å –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ" (—Ñ–æ–ª–±—ç–∫)', {
        timestamp: new Date().toISOString(),
        reason: 'timeout_60_seconds'
    });
    
    const waitingBtn = document.getElementById('waiting-btn') || 
                      document.querySelector('.waiting-recommendation-btn');
    
    if (waitingBtn) {
        waitingBtn.textContent = '–ù–∞—á–∞—Ç—å –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ';
        waitingBtn.className = 'new-task-btn';
        waitingBtn.disabled = false;
        waitingBtn.id = 'new-task-btn';
        
        waitingBtn.addEventListener('click', function(e) {
            e.preventDefault();
            loadNewTask();
        });
        
        console.log('‚úÖ [–°–û–ë–´–¢–ò–ï 4] –ö–Ω–æ–ø–∫–∞ "–ù–∞—á–∞—Ç—å –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ" –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∞ (—Ñ–æ–ª–±—ç–∫)', {
            timestamp: new Date().toISOString()
        });
    } else {
        console.warn('‚ö†Ô∏è [–°–û–ë–´–¢–ò–ï 4] –ö–Ω–æ–ø–∫–∞ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –∑–∞–º–µ–Ω—ã (—Ñ–æ–ª–±—ç–∫)', {
            timestamp: new Date().toISOString()
        });
    }
}

// –ó–∞–º–µ–Ω–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∞ "–ù–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ" (–¥–ª—è —Å–ª—É—á–∞–µ–≤ –±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏)
function replaceSubmitButtonWithNewTask() {
    const submitBtn = document.getElementById('submit-answer-btn');
    
    submitBtn.textContent = '–ù–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ';
    submitBtn.className = 'new-task-btn';
    submitBtn.disabled = false;
    
    const newBtn = submitBtn.cloneNode(true);
    submitBtn.parentNode.replaceChild(newBtn, submitBtn);
    
    newBtn.addEventListener('click', function(e) {
        e.preventDefault();
        loadNewTask();
    });
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
function loadNewTask() {
    const btn = document.querySelector('.new-task-btn');
    
    btn.innerHTML = '<span class="spinner"></span> –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ...';
    btn.disabled = true;
    
    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ —á–µ—Ä–µ–∑ API
    fetch('/student/api/new-task/', {
        method: 'GET',
        headers: {
            'X-CSRFToken': getCsrfToken()
        }
    })
    .then(response => response.json())
    .then(data => {
        if (data.success && data.redirect_url) {
            // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –Ω–æ–≤–æ–º—É –∑–∞–¥–∞–Ω–∏—é
            window.location.href = data.redirect_url;
        } else {
            showError(data.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ');
            btn.disabled = false;
            btn.textContent = '–ù–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ';
        }
    })
    .catch(error => {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è:', error);
        showError('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è');
        btn.disabled = false;
        btn.textContent = '–ù–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ';
    });
}

// –¢–∞–π–º–µ—Ä
function setupTimer() {
    const timerElement = document.getElementById('task-timer');
    if (!timerElement) return;
    
    let startTime = Date.now();
    
    function updateTimer() {
        const elapsed = Math.floor((Date.now() - startTime) / 1000);
        const minutes = Math.floor(elapsed / 60);
        const seconds = elapsed % 60;
        
        timerElement.textContent = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
    }
    
    updateTimer();
    setInterval(updateTimer, 1000);
}

// –ü–æ–∫–∞–∑ –æ—à–∏–±–∫–∏
function showError(message) {
    const errorDiv = document.createElement('div');
    errorDiv.style.cssText = `
        position: fixed; top: 20px; right: 20px; z-index: 10000;
        max-width: 400px; padding: 1rem; border-radius: 8px;
        background: #f8d7da; color: #721c24; border: 1px solid #f5c6cb;
    `;
    errorDiv.innerHTML = `
        <button type="button" style="float: right; background: none; border: none; font-size: 1.2rem; cursor: pointer;" onclick="this.parentElement.remove()">&times;</button>
        ${message}
    `;
    
    document.body.appendChild(errorDiv);
    
    setTimeout(() => {
        if (errorDiv.parentElement) {
            errorDiv.remove();
        }
    }, 5000);
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ CSRF —Ç–æ–∫–µ–Ω–∞
function getCsrfToken() {
    const csrfInput = document.querySelector('[name=csrfmiddlewaretoken]');
    return csrfInput ? csrfInput.value : '';
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–π–º–µ—Ä–∞
function setupTimer() {
    const timerElement = document.getElementById('task-timer');
    if (!timerElement) return;
    
    let startTime = Date.now();
    
    function updateTimer() {
        const elapsed = Math.floor((Date.now() - startTime) / 1000);
        const minutes = Math.floor(elapsed / 60);
        const seconds = elapsed % 60;
        
        timerElement.textContent = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
    }
    
    updateTimer();
    setInterval(updateTimer, 1000);
}

// –ü–æ–∫–∞–∑ —ç–∫—Ä–∞–Ω–∞ –∑–∞–≥—Ä—É–∑–∫–∏
function showLoading(message = '–ó–∞–≥—Ä—É–∑–∫–∞...') {
    let overlay = document.getElementById('loading-overlay');
    
    if (!overlay) {
        overlay = document.createElement('div');
        overlay.id = 'loading-overlay';
        overlay.className = 'loading-overlay';
        overlay.innerHTML = `
            <div class="loading-content">
                <div class="loading-spinner"></div>
                <div class="loading-text">${message}</div>
            </div>
        `;
        document.body.appendChild(overlay);
    } else {
        overlay.querySelector('.loading-text').textContent = message;
    }
    
    overlay.classList.add('active');
}

// –°–∫—Ä—ã—Ç–∏–µ —ç–∫—Ä–∞–Ω–∞ –∑–∞–≥—Ä—É–∑–∫–∏
function hideLoading() {
    const overlay = document.getElementById('loading-overlay');
    if (overlay) {
        overlay.classList.remove('active');
    }
}

// –ü–æ–∫–∞–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞
function showLoadingState() {
    console.log('‚è≥ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–≤–µ—Ç–∞', {
        timestamp: new Date().toISOString()
    });
    
    const submitSection = document.querySelector('.submit-section');
    const loadingDiv = document.createElement('div');
    loadingDiv.id = 'answer-loading';
    loadingDiv.className = 'answer-loading';
    loadingDiv.innerHTML = `
        <div class="loading-content">
            <div class="loading-spinner"></div>
            <div class="loading-text">–ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞—à –æ—Ç–≤–µ—Ç...</div>
        </div>
    `;
    
    submitSection.appendChild(loadingDiv);
    
    // –ü–ª–∞–≤–Ω–æ–µ –ø–æ—è–≤–ª–µ–Ω–∏–µ
    setTimeout(() => {
        loadingDiv.style.opacity = '1';
        loadingDiv.style.transform = 'translateY(0)';
    }, 100);
}

// –°–∫—Ä—ã—Ç–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
function hideLoadingState() {
    const loadingDiv = document.getElementById('answer-loading');
    if (loadingDiv) {
        loadingDiv.remove();
    }
}

// Markdown —Ä–µ–Ω–¥–µ—Ä–µ—Ä (–ø—Ä–æ—Å—Ç–æ–π)
function renderMarkdown(text) {
    return text
        .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
        .replace(/\*(.*?)\*/g, '<em>$1</em>')
        .replace(/__(.*?)__/g, '<u>$1</u>')
        .replace(/~~(.*?)~~/g, '<del>$1</del>')
        .replace(/^# (.*$)/gm, '<h1>$1</h1>')
        .replace(/^## (.*$)/gm, '<h2>$1</h2>')
        .replace(/^### (.*$)/gm, '<h3>$1</h3>')
        .replace(/!\[([^\]]*)\]\(([^\)]+)\)/g, '<img src="$2" alt="$1" />')
        .replace(/\[([^\]]+)\]\(([^\)]+)\)/g, '<a href="$2">$1</a>')
        .replace(/\n/g, '<br>');
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Markdown –≤ –≤–æ–ø—Ä–æ—Å–µ
document.addEventListener('DOMContentLoaded', function() {
    const questionText = document.querySelector('.question-text');
    if (questionText && questionText.dataset.markdown) {
        questionText.innerHTML = renderMarkdown(questionText.textContent);
    }
});

// –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
function checkRecommendationStatusPeriodically() {    console.log('üîç –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ç—É—Å–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏', {
        timestamp: new Date().toISOString(),
        checkInterval: '2 seconds',
        timeout: '60 seconds'
    });
    
    let checkCount = 0;
    
    const checkInterval = setInterval(() => {
        checkCount++;
        console.log(`üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ #${checkCount}`, {
            timestamp: new Date().toISOString()
        });
        
        const url = '/student/api/recommendation/status/';
        
        fetch(url, {
            method: 'GET',
            headers: {
                'X-CSRFToken': getCsrfToken()
            }
        })        .then(response => response.json())        .then(data => {
            console.log(`üì° –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É #${checkCount}:`, {
                timestamp: new Date().toISOString(),
                success: data.success,
                recommendationReady: data.recommendation_ready,
                generating: data.generating,
                data: data
            });
            
            if (data.success && data.recommendation_ready && !data.generating) {
                console.log('üéâ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞! –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –Ω–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è', {
                    timestamp: new Date().toISOString(),
                    checksPerformed: checkCount
                });
                
                clearInterval(checkInterval);
                showNewTaskReady();
            } else if (data.success && data.generating) {
                console.log('‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...', {
                    timestamp: new Date().toISOString(),
                    checkNumber: checkCount
                });
            }
        })
        .catch(error => {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ #${checkCount}:`, {
                timestamp: new Date().toISOString(),
                error: error
            });
        });
    }, 2000); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã (–±—ã–ª–æ 3)
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —á–µ—Ä–µ–∑ 60 —Å–µ–∫—É–Ω–¥ (—Ç–∞–π–º–∞—É—Ç) - —É–≤–µ–ª–∏—á–∏–ª–∏ —Å 30 –¥–æ 60 —Å–µ–∫
    setTimeout(() => {
        console.log('‚è∞ –¢–∞–π–º–∞—É—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ (60 —Å–µ–∫)', {
            timestamp: new Date().toISOString(),
            totalChecks: checkCount
        });
        
        clearInterval(checkInterval);
        showNewTaskReadyFallback();
    }, 60000);
}
