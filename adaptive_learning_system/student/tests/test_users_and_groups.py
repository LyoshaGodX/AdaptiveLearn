"""
–¢–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –≥—Ä—É–ø–ø –≤ —Å–∏—Å—Ç–µ–º–µ
"""
from django.test import TestCase
from django.contrib.auth.models import User, Group
from django.core.management import call_command
from django.db import transaction


class UserGroupsTestCase(TestCase):
    """
    –¢–µ—Å—Ç-–∫–µ–π—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∏—Ö –≥—Ä—É–ø–ø
    """
    
    def setUp(self):
        """
        –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö - —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        """
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        try:
            call_command('create_test_users')
        except Exception as e:
            print(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –Ω–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å create_test_users: {e}")
            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤—Ä—É—á–Ω—É—é –µ—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
            self._create_manual_test_users()
    
    def _create_manual_test_users(self):
        """
        –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤—Ä—É—á–Ω—É—é
        """
        # –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—ã
        groups = {}
        for role in ['student', 'expert', 'methodist']:
            group, created = Group.objects.get_or_create(name=role)
            groups[role] = group
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        test_users = [
            ('methodist_test', 'methodist123', 'methodist'),
            ('expert_test', 'expert123', 'expert'),
            ('student_test', 'student123', 'student'),
        ]
        
        for username, password, role in test_users:
            if not User.objects.filter(username=username).exists():
                user = User.objects.create_user(
                    username=username,
                    password=password,
                    email=f'{username}@test.com'
                )
                user.groups.add(groups[role])
    
    def test_display_all_users_and_groups(self):
        """
        –¢–µ—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–≤–æ–¥–∏—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∏—Ö –≥—Ä—É–ø–ø—ã, ID –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞—Ä–æ–ª—è—Ö
        """
        print("\n" + "="*80)
        print("–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –í–°–ï–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–• –ò –ì–†–£–ü–ü–ê–• –°–ò–°–¢–ï–ú–´")
        print("="*80)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users = User.objects.all().order_by('id')
        
        if not users.exists():
            print("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ!")
            return
        
        print(f"üìä –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ: {users.count()}")
        print("-"*80)
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –≥—Ä—É–ø–ø–∞–º
        groups_info = {}
        users_without_groups = []
        
        for user in users:
            user_groups = user.groups.all()
            
            if user_groups.exists():
                for group in user_groups:
                    if group.name not in groups_info:
                        groups_info[group.name] = []
                    groups_info[group.name].append(user)
            else:
                users_without_groups.append(user)
        
        # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –≥—Ä—É–ø–ø–∞–º
        for group_name, group_users in groups_info.items():
            print(f"\nüè∑Ô∏è  –ì–†–£–ü–ü–ê: {group_name.upper()}")
            print("-" * 50)
            
            for user in group_users:
                self._print_user_info(user)
        
        # –í—ã–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –≥—Ä—É–ø–ø
        if users_without_groups:
            print(f"\n‚ùì –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò –ë–ï–ó –ì–†–£–ü–ü")
            print("-" * 50)
            
            for user in users_without_groups:
                self._print_user_info(user)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≥—Ä—É–ø–ø–∞–º
        print(f"\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ì–†–£–ü–ü–ê–ú:")
        print("-" * 30)
        
        all_groups = Group.objects.all()
        for group in all_groups:
            user_count = group.user_set.count()
            print(f"‚Ä¢ {group.name}: {user_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
        print(f"‚Ä¢ –ë–µ–∑ –≥—Ä—É–ø–ø—ã: {len(users_without_groups)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
        print("\n" + "="*80)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        self.assertTrue(users.exists(), "–í —Å–∏—Å—Ç–µ–º–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
    
    def _print_user_info(self, user):
        """
        –í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        """
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        status_flags = []
        if user.is_superuser:
            status_flags.append("üîë –°–£–ü–ï–†")
        if user.is_staff:
            status_flags.append("üë§ –ê–î–ú–ò–ù")
        if user.is_active:
            status_flags.append("‚úÖ –ê–ö–¢–ò–í–ï–ù")
        else:
            status_flags.append("‚ùå –ù–ï–ê–ö–¢–ò–í–ï–ù")
        
        status = " | ".join(status_flags)
        
        # –ì—Ä—É–ø–ø—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_groups = [group.name for group in user.groups.all()]
        groups_str = ", ".join(user_groups) if user_groups else "–ù–ï–¢ –ì–†–£–ü–ü"
        
        print(f"  ID: {user.id:2d} | –õ–æ–≥–∏–Ω: {user.username:15s} | Email: {user.email:25s}")
        print(f"       –ò–º—è: {user.get_full_name() or '–ù–µ —É–∫–∞–∑–∞–Ω–æ':20s} | –ì—Ä—É–ø–ø—ã: {groups_str}")
        print(f"       –°—Ç–∞—Ç—É—Å: {status}")
        print(f"       –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {user.date_joined.strftime('%d.%m.%Y %H:%M')}")
        
        # –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ –æ –ø–∞—Ä–æ–ª—è—Ö
        if user.password:
            print(f"       üîê –ü–∞—Ä–æ–ª—å: –ó–ê–®–ò–§–†–û–í–ê–ù (—Ö–µ—à: {user.password[:20]}...)")
        else:
            print(f"       ‚ö†Ô∏è  –ü–∞—Ä–æ–ª—å: –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù")
        
        print()
    
    def test_display_known_test_passwords(self):
        """
        –í—ã–≤–æ–¥–∏—Ç –∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–∞—Ä–æ–ª–∏ –∏–∑ –∫–æ–º–∞–Ω–¥—ã create_test_users
        """
        print("\n" + "="*80)
        print("–ò–ó–í–ï–°–¢–ù–´–ï –¢–ï–°–¢–û–í–´–ï –ü–ê–†–û–õ–ò")
        print("="*80)
        
        # –ò–∑–≤–µ—Å—Ç–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–∞—Ä–æ–ª–∏ –∏–∑ create_test_users.py
        known_passwords = {
            'methodist': 'methodist123',
            'methodist2': 'methodist123',
            'expert': 'expert123',
            'expert2': 'expert123',  
            'student': 'student123',
            'student2': 'student123',
            'student3': 'student123',
            'student4': 'student123',
            'admin': 'admin123',
        }
        
        print("üìù –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–∞—Ä–æ–ª–∏:")
        print("-" * 40)
        
        for username, password in known_passwords.items():
            user_exists = User.objects.filter(username=username).exists()
            status = "‚úÖ –°–£–©–ï–°–¢–í–£–ï–¢" if user_exists else "‚ùå –ù–ï –ù–ê–ô–î–ï–ù"
            print(f"‚Ä¢ {username:12s} : {password:15s} [{status}]")
        
        print(f"\nüí° –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:")
        print(f"   - –≠—Ç–æ –ø–∞—Ä–æ–ª–∏ –∏–∑ –∫–æ–º–∞–Ω–¥—ã 'python manage.py create_test_users'")
        print(f"   - –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –ø–∞—Ä–æ–ª–∏ —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–º –≤–∏–¥–µ")
        print(f"   - –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:")
        print(f"     python manage.py create_test_users")
        
        print("\n" + "="*80)
    
    def test_group_membership_verification(self):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –≥—Ä—É–ø–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        """
        print("\n" + "="*60)
        print("–ü–†–û–í–ï–†–ö–ê –ü–†–ê–í–ò–õ–¨–ù–û–°–¢–ò –ù–ê–ó–ù–ê–ß–ï–ù–ò–Ø –ì–†–£–ü–ü")
        print("="*60)
        
        # –û–∂–∏–¥–∞–µ–º—ã–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è username -> –≥—Ä—É–ø–ø–∞
        expected_mappings = {
            'methodist': 'methodist',
            'methodist2': 'methodist', 
            'expert': 'expert',
            'expert2': 'expert',
            'student': 'student',
            'student2': 'student',
            'student3': 'student',
            'student4': 'student',
            'admin': 'methodist',  # admin –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –≥—Ä—É–ø–ø–µ methodist
        }
        
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≥—Ä—É–ø–ø–∞–º:")
        print("-" * 50)
        
        errors = []
        
        for username, expected_group in expected_mappings.items():
            try:
                user = User.objects.get(username=username)
                user_groups = [group.name for group in user.groups.all()]
                
                if expected_group in user_groups:
                    print(f"‚úÖ {username:12s} ‚Üí –≥—Ä—É–ø–ø–∞ '{expected_group}' –û–ö")
                else:
                    error_msg = f"‚ùå {username:12s} ‚Üí –æ–∂–∏–¥–∞–ª–∞—Å—å '{expected_group}', –µ—Å—Ç—å: {user_groups}"
                    print(error_msg)
                    errors.append(error_msg)
                    
            except User.DoesNotExist:
                error_msg = f"‚ö†Ô∏è  {username:12s} ‚Üí –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ù–ï –ù–ê–ô–î–ï–ù"
                print(error_msg)
                errors.append(error_msg)
        
        if errors:
            print(f"\n‚ùå –ù–∞–π–¥–µ–Ω–æ {len(errors)} –ø—Ä–æ–±–ª–µ–º:")
            for error in errors:
                print(f"   {error}")
            print(f"\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –≤—ã–ø–æ–ª–Ω–∏—Ç–µ 'python manage.py create_test_users'")
        else:
            print(f"\n‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        
        print("="*60)
        
        # –ù–µ –¥–µ–ª–∞–µ–º assert —á—Ç–æ–±—ã —Ç–µ—Å—Ç –≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        # self.assertEqual(len(errors), 0, f"–ù–∞–π–¥–µ–Ω—ã –æ—à–∏–±–∫–∏ –≤ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –≥—Ä—É–ø–ø: {errors}")


class UserAuthenticationTestCase(TestCase):
    """
    –¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    """
    
    def test_user_login_simulation(self):
        """
        –°–∏–º—É–ª–∏—Ä—É–µ—Ç –ø–æ–ø—ã—Ç–∫–∏ –≤—Ö–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏–∑–≤–µ—Å—Ç–Ω—ã–º–∏ –ø–∞—Ä–æ–ª—è–º–∏
        """
        print("\n" + "="*70)
        print("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô")
        print("="*70)
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞
        test_credentials = [
            ('methodist', 'methodist123'),
            ('expert', 'expert123'),
            ('student', 'student123'),
            ('admin', 'admin123'),
        ]
        
        print("üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ö–æ–¥–∞ —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏:")
        print("-" * 50)
        
        for username, password in test_credentials:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user = User.objects.get(username=username)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
                if user.check_password(password):
                    groups = [g.name for g in user.groups.all()]
                    print(f"‚úÖ {username:12s} - –≤—Ö–æ–¥ –£–°–ü–ï–®–ï–ù (–≥—Ä—É–ø–ø—ã: {groups})")
                else:
                    print(f"‚ùå {username:12s} - –ù–ï–í–ï–†–ù–´–ô –ü–ê–†–û–õ–¨")
                    
            except User.DoesNotExist:
                print(f"‚ö†Ô∏è  {username:12s} - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ù–ï –ù–ê–ô–î–ï–ù")
        
        print("\nüí° –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: —ç—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏")
        print("="*70)
