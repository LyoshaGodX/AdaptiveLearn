"""
–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø—É
"""
from django.core.management.base import BaseCommand
from django.contrib.auth.models import User, Group


class Command(BaseCommand):
    help = "–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —É–∫–∞–∑–∞–Ω–Ω—É—é –≥—Ä—É–ø–ø—É"

    def add_arguments(self, parser):
        parser.add_argument('username', type=str, help='–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
        parser.add_argument('group_name', type=str, help='–ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã (student, expert, methodist)')

    def handle(self, *args, **options):
        username = options['username']
        group_name = options['group_name']
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = User.objects.get(username=username)
            self.stdout.write(f"‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.username} (ID: {user.id})")
            self.stdout.write(f"   –ò–º—è: {user.get_full_name() or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}")
            self.stdout.write(f"   Email: {user.email}")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—É
            group, created = Group.objects.get_or_create(name=group_name)
            if created:
                self.stdout.write(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –≥—Ä—É–ø–ø–∞: {group_name}")
            else:
                self.stdout.write(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –≥—Ä—É–ø–ø–∞: {group_name}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ —É–∂–µ –≤ –≥—Ä—É–ø–ø–µ
            if user.groups.filter(name=group_name).exists():
                self.stdout.write(self.style.WARNING(f"‚ö†Ô∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –≥—Ä—É–ø–ø–µ {group_name}"))
                return
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É
            user.groups.add(group)
            
            self.stdout.write(self.style.SUCCESS(f"üéâ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É {group_name}"))
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –≥—Ä—É–ø–ø—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            current_groups = [g.name for g in user.groups.all()]
            self.stdout.write(f"üìã –¢–µ–∫—É—â–∏–µ –≥—Ä—É–ø–ø—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {', '.join(current_groups)}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, –∫—É–¥–∞ –±—É–¥–µ—Ç –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            if group_name == 'methodist':
                redirect_url = '/methodist/'
            elif group_name == 'expert':
                redirect_url = '/expert/'
            elif group_name == 'student':
                redirect_url = '/student/'
            else:
                redirect_url = '/student/ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)'
            
            self.stdout.write(f"üè† –ü—Ä–∏ –≤—Ö–æ–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—É–¥–µ—Ç –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞: {redirect_url}")
            
        except User.DoesNotExist:
            self.stdout.write(self.style.ERROR(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –Ω–µ –Ω–∞–π–¥–µ–Ω"))
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            users = User.objects.all()
            if users.exists():
                self.stdout.write(f"\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:")
                for user in users:
                    groups = [g.name for g in user.groups.all()]
                    groups_str = ', '.join(groups) if groups else '–ë–ï–ó –ì–†–£–ü–ü–´'
                    self.stdout.write(f"  ‚Ä¢ {user.username} (ID: {user.id}) - –≥—Ä—É–ø–ø—ã: {groups_str}")
            
        except Exception as e:
            self.stdout.write(self.style.ERROR(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"))
