"""
–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
"""
from django.core.management.base import BaseCommand
from django.contrib.auth.models import User


class Command(BaseCommand):
    help = "–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –ø–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"

    def add_arguments(self, parser):
        parser.add_argument('username', type=str, help='–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
        parser.add_argument('new_password', type=str, help='–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å')

    def handle(self, *args, **options):
        username = options['username']
        new_password = options['new_password']
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = User.objects.get(username=username)
            
            self.stdout.write(f"‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.username} (ID: {user.id})")
            self.stdout.write(f"   –ò–º—è: {user.get_full_name() or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}")
            self.stdout.write(f"   Email: {user.email}")
            
            # –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—ã
            groups = [g.name for g in user.groups.all()]
            groups_str = ', '.join(groups) if groups else '–ë–ï–ó –ì–†–£–ü–ü–´'
            self.stdout.write(f"   –ì—Ä—É–ø–ø—ã: {groups_str}")
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–∞—Ä–æ–ª—å
            user.set_password(new_password)
            user.save()
            
            self.stdout.write(self.style.SUCCESS(f"üéâ –ü–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!"))
            self.stdout.write(f"üîë –ù–æ–≤—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
            self.stdout.write(f"   –õ–æ–≥–∏–Ω: {username}")
            self.stdout.write(f"   –ü–∞—Ä–æ–ª—å: {new_password}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º URL –¥–ª—è –≤—Ö–æ–¥–∞
            if 'methodist' in groups:
                redirect_url = '/methodist/'
            elif 'expert' in groups:
                redirect_url = '/expert/'
            elif 'student' in groups:
                redirect_url = '/student/'
            else:
                redirect_url = '/student/ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)'
            
            self.stdout.write(f"üè† –ü–æ—Å–ª–µ –≤—Ö–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—É–¥–µ—Ç –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞: {redirect_url}")
            
        except User.DoesNotExist:
            self.stdout.write(self.style.ERROR(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –Ω–µ –Ω–∞–π–¥–µ–Ω"))
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            users = User.objects.all()
            if users.exists():
                self.stdout.write(f"\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:")
                for user in users:
                    groups = [g.name for g in user.groups.all()]
                    groups_str = ', '.join(groups) if groups else '–ë–ï–ó –ì–†–£–ü–ü–´'
                    self.stdout.write(f"  ‚Ä¢ {user.username} (ID: {user.id}) - –≥—Ä—É–ø–ø—ã: {groups_str}")
            
        except Exception as e:
            self.stdout.write(self.style.ERROR(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"))
