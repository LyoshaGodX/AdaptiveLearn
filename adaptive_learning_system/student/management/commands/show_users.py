"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ management –∫–æ–º–∞–Ω–¥–∞ Django
"""
from django.core.management.base import BaseCommand
from django.contrib.auth.models import User, Group


class Command(BaseCommand):
    help = "–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ—Ö —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–∏—Å—Ç–µ–º—ã —Å –∏—Ö –¥–∞–Ω–Ω—ã–º–∏"

    def handle(self, *args, **options):
        self.stdout.write("\n" + "="*80)
        self.stdout.write("–†–ï–ê–õ–¨–ù–´–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò –í –û–°–ù–û–í–ù–û–ô –ë–ê–ó–ï –î–ê–ù–ù–´–•")
        self.stdout.write("="*80)
        
        users = User.objects.all().order_by('id')
        
        if not users.exists():
            self.stdout.write(self.style.ERROR("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!"))
            self.stdout.write("üí° –°–æ–∑–¥–∞–π—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫–æ–º–∞–Ω–¥–æ–π: python manage.py create_test_users")
            return
        
        self.stdout.write(f"üìä –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users.count()}")
        self.stdout.write("-"*80)
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –≥—Ä—É–ø–ø–∞–º
        groups_info = {}
        users_without_groups = []
        
        for user in users:
            user_groups = user.groups.all()
            
            if user_groups.exists():
                for group in user_groups:
                    if group.name not in groups_info:
                        groups_info[group.name] = []
                    groups_info[group.name].append(user)
            else:
                users_without_groups.append(user)
        
        # –í—ã–≤–æ–¥–∏–º –ø–æ –≥—Ä—É–ø–ø–∞–º
        for group_name, group_users in groups_info.items():
            self.stdout.write(f"\nüè∑Ô∏è  –ì–†–£–ü–ü–ê: {group_name.upper()}")
            self.stdout.write("-" * 50)
            
            for user in group_users:
                self._print_user_info(user)
        
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–µ–∑ –≥—Ä—É–ø–ø
        if users_without_groups:
            self.stdout.write(f"\n‚ùì –ë–ï–ó –ì–†–£–ü–ü–´")
            self.stdout.write("-" * 50)
            
            for user in users_without_groups:
                self._print_user_info(user)
        
        # –ò–∑–≤–µ—Å—Ç–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–∞—Ä–æ–ª–∏
        self.stdout.write(f"\nüìù –ò–ó–í–ï–°–¢–ù–´–ï –¢–ï–°–¢–û–í–´–ï –ü–ê–†–û–õ–ò:")
        self.stdout.write("-" * 50)
        
        known_passwords = {
            'methodist': 'methodist123',
            'methodist2': 'methodist123',
            'expert': 'expert123',
            'expert2': 'expert123',
            'student': 'student123',
            'student2': 'student123',
            'student3': 'student123',
            'student4': 'student123',
            'admin': 'admin123',
        }
        
        for username, password in known_passwords.items():
            user_exists = User.objects.filter(username=username).exists()
            status = "‚úÖ –ï–°–¢–¨ –í –ë–î" if user_exists else "‚ùå –ù–ï –ù–ê–ô–î–ï–ù"
            self.stdout.write(f"‚Ä¢ {username:12s} : {password:15s} [{status}]")
        
        self.stdout.write(f"\nüí° –ü—Ä–∏–º–µ—á–∞–Ω–∏—è:")
        self.stdout.write(f"   - –ü–∞—Ä–æ–ª–∏ –≤ –ë–î —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–º –≤–∏–¥–µ")
        self.stdout.write(f"   - –î–ª—è –≤—Ö–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –ø–∞—Ä–æ–ª–∏")
        self.stdout.write(f"   - –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: python manage.py create_test_users")
        
        self.stdout.write("="*80)
    
    def _print_user_info(self, user):
        """–í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        # –°—Ç–∞—Ç—É—Å
        status_flags = []
        if user.is_superuser:
            status_flags.append("üîë –°–£–ü–ï–†")
        if user.is_staff:
            status_flags.append("üë§ –ê–î–ú–ò–ù")
        if user.is_active:
            status_flags.append("‚úÖ –ê–ö–¢–ò–í–ï–ù")
        else:
            status_flags.append("‚ùå –ù–ï–ê–ö–¢–ò–í–ï–ù")
        
        status = " | ".join(status_flags)
        
        # –ì—Ä—É–ø–ø—ã
        user_groups = [group.name for group in user.groups.all()]
        groups_str = ", ".join(user_groups) if user_groups else "–ù–ï–¢ –ì–†–£–ü–ü"
        
        # –ü–æ–ª–Ω–æ–µ –∏–º—è
        full_name = user.get_full_name() or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        
        self.stdout.write(f"  ID: {user.id:2d} | –õ–æ–≥–∏–Ω: {user.username:15s} | Email: {user.email:25s}")
        self.stdout.write(f"       –ò–º—è: {full_name:20s} | –ì—Ä—É–ø–ø—ã: {groups_str}")
        self.stdout.write(f"       –°—Ç–∞—Ç—É—Å: {status}")
        self.stdout.write(f"       –°–æ–∑–¥–∞–Ω: {user.date_joined.strftime('%d.%m.%Y %H:%M')}")
        self.stdout.write("")
