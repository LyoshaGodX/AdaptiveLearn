#!/usr/bin/env python
"""
–ê–Ω–∞–ª–∏–∑ –ø–æ–∫—Ä—ã—Ç–∏—è –Ω–∞–≤—ã–∫–æ–≤ –≤ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –∫—É—Ä—Å–∞—Ö
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

import django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'adaptive_learning.settings')
django.setup()

import pandas as pd
from collections import defaultdict, Counter
from skills.models import Skill
from methodist.models import Task, Course

def analyze_course_structure():
    """–ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫—É—Ä—Å–æ–≤"""
    print('üîç –ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´ –ö–£–†–°–û–í')
    print('='*50)
    
    courses = Course.objects.all()
    
    for course in courses:
        print(f'\nüìö –ö—É—Ä—Å: {course.name}')
        course_skills = set()
        course_tasks = Task.objects.filter(courses=course)
        
        for task in course_tasks:
            for skill in task.skills.all():
                course_skills.add(skill.id)
        
        print(f'   –ó–∞–¥–∞–Ω–∏–π: {course_tasks.count()}')
        print(f'   –ù–∞–≤—ã–∫–æ–≤: {len(course_skills)}')
        print(f'   –ù–∞–≤—ã–∫–∏: {sorted(course_skills)}')

def analyze_synthetic_coverage():
    """–ê–Ω–∞–ª–∏–∑ –ø–æ–∫—Ä—ã—Ç–∏—è –Ω–∞–≤—ã–∫–æ–≤ –≤ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
    print('\nüîç –ê–ù–ê–õ–ò–ó –ü–û–ö–†–´–¢–ò–Ø –°–ò–ù–¢–ï–¢–ò–ß–ï–°–ö–ò–• –î–ê–ù–ù–´–•')
    print('='*50)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
    df = pd.read_csv('temp_dir/synthetic_dataset.csv')
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è –≤ –¥–∞–Ω–Ω—ã—Ö
    tasks_in_data = set(df['task_id'].unique())
    
    # –ù–∞—Ö–æ–¥–∏–º –Ω–∞–≤—ã–∫–∏ –¥–ª—è —ç—Ç–∏—Ö –∑–∞–¥–∞–Ω–∏–π
    skills_in_data = set()
    for task_id in tasks_in_data:
        try:
            task = Task.objects.get(id=task_id)
            for skill in task.skills.all():
                skills_in_data.add(skill.id)
        except Task.DoesNotExist:
            print(f'‚ö†Ô∏è –ó–∞–¥–∞–Ω–∏–µ {task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –ë–î')
    
    # –í—Å–µ –Ω–∞–≤—ã–∫–∏ –≤ —Å–∏—Å—Ç–µ–º–µ
    all_skills = set(Skill.objects.values_list('id', flat=True))
    missing_skills = all_skills - skills_in_data
    
    print(f'–í—Å–µ–≥–æ –Ω–∞–≤—ã–∫–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ: {len(all_skills)}')
    print(f'–ù–∞–≤—ã–∫–æ–≤ –≤ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö: {len(skills_in_data)}')
    print(f'–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –Ω–∞–≤—ã–∫–æ–≤: {len(missing_skills)}')
    
    if missing_skills:
        print('\n‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –Ω–∞–≤—ã–∫–∏:')
        for skill_id in sorted(missing_skills):
            skill_name = Skill.objects.get(id=skill_id).name
            print(f'   - {skill_name} (ID: {skill_id})')
    
    return skills_in_data, missing_skills

def analyze_generation_paths():
    """–ê–Ω–∞–ª–∏–∑ –ø—É—Ç–µ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
    print('\nüîç –ê–ù–ê–õ–ò–ó –ü–£–¢–ï–ô –ì–ï–ù–ï–†–ê–¶–ò–ò')
    print('='*50)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é
    import json
    with open('temp_dir/synthetic_data_spec.json', 'r', encoding='utf-8') as f:
        spec = json.load(f)
    
    dependencies = {int(k): [int(x) for x in v] for k, v in spec['skills_graph']['dependencies'].items()}
    levels = {int(k): v for k, v in spec['skills_graph']['levels'].items()}
    
    # –ù–∞—Ö–æ–¥–∏–º –±–∞–∑–æ–≤—ã–µ –Ω–∞–≤—ã–∫–∏ (–±–µ–∑ –ø—Ä–µ—Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤)
    base_skills = [skill_id for skill_id, deps in dependencies.items() if not deps]
    
    print(f'–ë–∞–∑–æ–≤—ã—Ö –Ω–∞–≤—ã–∫–æ–≤: {len(base_skills)}')
    print(f'–ë–∞–∑–æ–≤—ã–µ –Ω–∞–≤—ã–∫–∏: {base_skills}')
    
    # –ê–Ω–∞–ª–∏–∑ —É—Ä–æ–≤–Ω–µ–π
    print('\n–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —É—Ä–æ–≤–Ω—è–º:')
    level_counts = Counter(levels.values())
    for level in sorted(level_counts.keys()):
        skills_at_level = [skill_id for skill_id, skill_level in levels.items() if skill_level == level]
        print(f'   –£—Ä–æ–≤–µ–Ω—å {level}: {level_counts[level]} –Ω–∞–≤—ã–∫–æ–≤ - {skills_at_level}')
    
    return base_skills, levels, dependencies

def identify_unreachable_skills(base_skills, levels, dependencies, max_attempts=50):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∏–∂–∏–º—ã–µ –Ω–∞–≤—ã–∫–∏ –ø—Ä–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –ø–æ–ø—ã—Ç–æ–∫"""
    print(f'\nüîç –ê–ù–ê–õ–ò–ó –î–û–°–¢–ò–ñ–ò–ú–û–°–¢–ò –ù–ê–í–´–ö–û–í (max_attempts={max_attempts})')
    print('='*50)
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –ø—É—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–∞
    reachable_in_attempts = set()
    
    # –ù–∞—á–∏–Ω–∞–µ–º —Å –±–∞–∑–æ–≤—ã—Ö –Ω–∞–≤—ã–∫–æ–≤
    available_skills = set(base_skills)
    mastered_skills = set()
    attempts_used = 0
    
    # –°—Ä–µ–¥–Ω–∏–µ –ø–æ–ø—ã—Ç–∫–∏ –¥–ª—è –æ—Å–≤–æ–µ–Ω–∏—è –Ω–∞–≤—ã–∫–∞ (–Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏)
    attempts_per_skill = {
        0: 3,   # –ë–∞–∑–æ–≤—ã–µ –Ω–∞–≤—ã–∫–∏
        1: 4,   # –ü–µ—Ä–≤—ã–π —É—Ä–æ–≤–µ–Ω—å
        2: 5,   # –í—Ç–æ—Ä–æ–π —É—Ä–æ–≤–µ–Ω—å
    }
    
    while attempts_used < max_attempts and available_skills:
        # –í—ã–±–∏—Ä–∞–µ–º –Ω–∞–≤—ã–∫ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º —É—Ä–æ–≤–Ω–µ–º
        current_skill = min(available_skills, key=lambda s: levels.get(s, 0))
        skill_level = levels.get(current_skill, 0)
          # –ü–æ–ø—ã—Ç–∫–∏ –¥–ª—è –æ—Å–≤–æ–µ–Ω–∏—è –Ω–∞–≤—ã–∫–∞
        needed_attempts = attempts_per_skill.get(skill_level, skill_level + 3)
        if needed_attempts is None:
            needed_attempts = skill_level + 3
        
        if attempts_used + needed_attempts <= max_attempts:
            # –ú–æ–∂–µ–º –æ—Å–≤–æ–∏—Ç—å —ç—Ç–æ—Ç –Ω–∞–≤—ã–∫
            mastered_skills.add(current_skill)
            reachable_in_attempts.add(current_skill)
            available_skills.remove(current_skill)
            attempts_used += needed_attempts
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞–≤—ã–∫–∏
            for skill_id, prereqs in dependencies.items():
                if skill_id not in mastered_skills and skill_id not in available_skills:
                    if all(prereq in mastered_skills for prereq in prereqs):
                        available_skills.add(skill_id)
        else:
            # –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø–æ–ø—ã—Ç–æ–∫
            break
    
    all_skills = set(dependencies.keys())
    unreachable_skills = all_skills - reachable_in_attempts
    
    print(f'–î–æ—Å—Ç–∏–∂–∏–º—ã—Ö –Ω–∞–≤—ã–∫–æ–≤ –∑–∞ {max_attempts} –ø–æ–ø—ã—Ç–æ–∫: {len(reachable_in_attempts)}')
    print(f'–ù–µ–¥–æ—Å—Ç–∏–∂–∏–º—ã—Ö –Ω–∞–≤—ã–∫–æ–≤: {len(unreachable_skills)}')
    
    if unreachable_skills:
        print('\n‚ùå –ù–µ–¥–æ—Å—Ç–∏–∂–∏–º—ã–µ –Ω–∞–≤—ã–∫–∏:')
        for skill_id in sorted(unreachable_skills):
            skill_name = Skill.objects.get(id=skill_id).name
            skill_level = levels.get(skill_id, 0)
            print(f'   - {skill_name} (ID: {skill_id}, —É—Ä–æ–≤–µ–Ω—å: {skill_level})')
    
    return reachable_in_attempts, unreachable_skills

def suggest_improvements():
    """–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –ø–æ–∫—Ä—ã—Ç–∏—è"""
    print('\nüí° –ü–†–ï–î–õ–û–ñ–ï–ù–ò–Ø –ü–û –£–õ–£–ß–®–ï–ù–ò–Æ')
    print('='*50)
    
    print('1. üìà –£–≤–µ–ª–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –Ω–∞ —Å—Ç—É–¥–µ–Ω—Ç–∞:')
    print('   - –°–µ–π—á–∞—Å: ~43 –ø–æ–ø—ã—Ç–∫–∏ –Ω–∞ —Å—Ç—É–¥–µ–Ω—Ç–∞')
    print('   - –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è: 80-120 –ø–æ–ø—ã—Ç–æ–∫ –Ω–∞ —Å—Ç—É–¥–µ–Ω—Ç–∞')
    
    print('\n2. üë• –°–æ–∑–¥–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∞—Ä—Ö–µ—Ç–∏–ø—ã —Å—Ç—É–¥–µ–Ω—Ç–æ–≤:')
    print('   - –°—Ç—É–¥–µ–Ω—Ç—ã —Ä–∞–∑–Ω—ã—Ö –∫—É—Ä—Å–æ–≤ (1-–π, 2-–π, 3-–π)')
    print('   - –°—Ç—É–¥–µ–Ω—Ç—ã —Å —Ä–∞–∑–Ω—ã–º —Ñ–æ–∫—É—Å–æ–º –Ω–∞ –Ω–∞–≤—ã–∫–∏')
    
    print('\n3. üéØ –£–ª—É—á—à–∏—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º –≤—ã–±–æ—Ä–∞ –Ω–∞–≤—ã–∫–æ–≤:')
    print('   - –û–±–µ—Å–ø–µ—á–∏—Ç—å —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö —É—Ä–æ–≤–Ω–µ–π')
    print('   - –î–æ–±–∞–≤–∏—Ç—å —Å—Ç–æ—Ö–∞—Å—Ç–∏—á–Ω–æ—Å—Ç—å –≤ –≤—ã–±–æ—Ä —Å–ª–µ–¥—É—é—â–µ–≥–æ –Ω–∞–≤—ã–∫–∞')
    
    print('\n4. üìä –°–æ–∑–¥–∞—Ç—å –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:')
    print('   - –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–∞–≤—ã–∫–∞')
    print('   - –î–æ–±–∞–≤–∏—Ç—å "–ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö" —Å—Ç—É–¥–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ—Ö–æ–¥—è—Ç –¥–æ –≤—ã—Å–æ–∫–∏—Ö —É—Ä–æ–≤–Ω–µ–π')

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞"""
    
    # –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫—É—Ä—Å–æ–≤
    analyze_course_structure()
    
    # –ê–Ω–∞–ª–∏–∑ –ø–æ–∫—Ä—ã—Ç–∏—è —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    skills_in_data, missing_skills = analyze_synthetic_coverage()
    
    # –ê–Ω–∞–ª–∏–∑ –ø—É—Ç–µ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    base_skills, levels, dependencies = analyze_generation_paths()
    
    # –ê–Ω–∞–ª–∏–∑ –¥–æ—Å—Ç–∏–∂–∏–º–æ—Å—Ç–∏ –Ω–∞–≤—ã–∫–æ–≤
    reachable_43, unreachable_43 = identify_unreachable_skills(base_skills, levels, dependencies, max_attempts=43)
    reachable_80, unreachable_80 = identify_unreachable_skills(base_skills, levels, dependencies, max_attempts=80)
    reachable_120, unreachable_120 = identify_unreachable_skills(base_skills, levels, dependencies, max_attempts=120)
    
    # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é
    suggest_improvements()
    
    print('\nüéØ –í–´–í–û–î')
    print('='*50)
    print(f'–¢–µ–∫—É—â–µ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ –Ω–∞–≤—ã–∫–æ–≤ –≤ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö: {len(skills_in_data)}/30')
    print(f'–¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏ –¥–æ—Å—Ç–∏–∂–∏–º–æ –∑–∞ 43 –ø–æ–ø—ã—Ç–∫–∏: {len(reachable_43)}/30')
    print(f'–¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏ –¥–æ—Å—Ç–∏–∂–∏–º–æ –∑–∞ 80 –ø–æ–ø—ã—Ç–æ–∫: {len(reachable_80)}/30')  
    print(f'–¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏ –¥–æ—Å—Ç–∏–∂–∏–º–æ –∑–∞ 120 –ø–æ–ø—ã—Ç–æ–∫: {len(reachable_120)}/30')
    
    if len(skills_in_data) < 25:  # –ú–µ–Ω–µ–µ 25 –∏–∑ 30 –Ω–∞–≤—ã–∫–æ–≤
        print('\n‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ –Ω–∞–≤—ã–∫–æ–≤!')
        print('   –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∏–∑–º–µ–Ω–∏—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö.')
    else:
        print('\n‚úÖ –ü–æ–∫—Ä—ã—Ç–∏–µ –Ω–∞–≤—ã–∫–æ–≤ –ø—Ä–∏–µ–º–ª–µ–º–æ–µ.')

if __name__ == "__main__":
    main()
