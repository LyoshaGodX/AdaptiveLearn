#!/usr/bin/env python
"""
–í—Ä–µ–º–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–∫—Ä—ã—Ç–∏—è –Ω–∞–≤—ã–∫–æ–≤ –∏ –∑–∞–¥–∞–Ω–∏–π –≤ —Å–∏—Å—Ç–µ–º–µ
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

import django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'adaptive_learning.settings')
django.setup()

import json
from collections import defaultdict
from skills.models import Skill
from methodist.models import Task

def analyze_system_data():
    """–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –≤ —Å–∏—Å—Ç–µ–º–µ"""
    print('üîç –ê–ù–ê–õ–ò–ó –î–ê–ù–ù–´–• –í –°–ò–°–¢–ï–ú–ï')
    print('='*50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–≤—ã–∫–∏
    skills = Skill.objects.all()
    print(f'–í—Å–µ–≥–æ –Ω–∞–≤—ã–∫–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ: {skills.count()}')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–¥–∞–Ω–∏—è  
    tasks = Task.objects.all().prefetch_related('skills')
    print(f'–í—Å–µ–≥–æ –∑–∞–¥–∞–Ω–∏–π –≤ —Å–∏—Å—Ç–µ–º–µ: {tasks.count()}')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π –ø–æ –Ω–∞–≤—ã–∫–∞–º
    skills_with_tasks = set()
    tasks_by_skill_count = defaultdict(int)
    tasks_by_skill_list = defaultdict(list)
    
    for task in tasks:
        task_skills = task.skills.all()
        for skill in task_skills:
            skills_with_tasks.add(skill.id)
            tasks_by_skill_count[skill.id] += 1
            tasks_by_skill_list[skill.id].append(task.id)
    
    print(f'–ù–∞–≤—ã–∫–æ–≤ —Å –∑–∞–¥–∞–Ω–∏—è–º–∏: {len(skills_with_tasks)}')
    print(f'–ù–∞–≤—ã–∫–æ–≤ –±–µ–∑ –∑–∞–¥–∞–Ω–∏–π: {skills.count() - len(skills_with_tasks)}')
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–¥–∞–Ω–∏–π –ø–æ –Ω–∞–≤—ã–∫–∞–º
    print('\nüìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π –ø–æ –Ω–∞–≤—ã–∫–∞–º:')
    for skill in skills.order_by('name'):
        count = tasks_by_skill_count.get(skill.id, 0)
        status = "‚úÖ" if count > 0 else "‚ùå"
        print(f'  {status} {skill.name} (ID: {skill.id}): {count} –∑–∞–¥–∞–Ω–∏–π')
    
    # –ù–∞–≤—ã–∫–∏ –±–µ–∑ –∑–∞–¥–∞–Ω–∏–π
    skills_without_tasks = []
    for skill in skills:
        if skill.id not in skills_with_tasks:
            skills_without_tasks.append((skill.id, skill.name))
    
    if skills_without_tasks:
        print(f'\n‚ùå –ù–∞–≤—ã–∫–∏ –±–µ–∑ –∑–∞–¥–∞–Ω–∏–π ({len(skills_without_tasks)}):')
        for skill_id, skill_name in skills_without_tasks:
            print(f'   - {skill_name} (ID: {skill_id})')
    
    return {
        'total_skills': skills.count(),
        'total_tasks': tasks.count(),
        'skills_with_tasks': len(skills_with_tasks),
        'skills_without_tasks': skills_without_tasks,
        'tasks_by_skill': dict(tasks_by_skill_list)
    }

def analyze_synthetic_spec():
    """–ê–Ω–∞–ª–∏–∑ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
    print('\nüîç –ê–ù–ê–õ–ò–ó –°–ü–ï–¶–ò–§–ò–ö–ê–¶–ò–ò –°–ò–ù–¢–ï–¢–ò–ß–ï–°–ö–ò–• –î–ê–ù–ù–´–•')
    print('='*50)
    
    try:
        with open('temp_dir/synthetic_data_spec.json', 'r', encoding='utf-8') as f:
            spec = json.load(f)
        
        skills_in_spec = len(spec['skills_graph']['skills_info'])
        skills_with_deps = len(spec['skills_graph']['dependencies'])
        
        print(f'–ù–∞–≤—ã–∫–æ–≤ –≤ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏: {skills_in_spec}')
        print(f'–ù–∞–≤—ã–∫–æ–≤ —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏: {skills_with_deps}')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∏–µ –Ω–∞–≤—ã–∫–∏ –µ—Å—Ç—å –≤ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏
        spec_skill_ids = set(int(k) for k in spec['skills_graph']['skills_info'].keys())
        all_skill_ids = set(Skill.objects.values_list('id', flat=True))
        
        missing_in_spec = all_skill_ids - spec_skill_ids
        extra_in_spec = spec_skill_ids - all_skill_ids
        
        if missing_in_spec:
            print(f'\n‚ùå –ù–∞–≤—ã–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –≤ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ ({len(missing_in_spec)}):')
            for skill_id in sorted(missing_in_spec):
                skill_name = Skill.objects.get(id=skill_id).name
                print(f'   - {skill_name} (ID: {skill_id})')
        
        if extra_in_spec:
            print(f'\n‚ö†Ô∏è –õ–∏—à–Ω–∏–µ –Ω–∞–≤—ã–∫–∏ –≤ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ ({len(extra_in_spec)}):')
            for skill_id in sorted(extra_in_spec):
                print(f'   - ID: {skill_id}')
        
        return {
            'skills_in_spec': skills_in_spec,
            'missing_in_spec': missing_in_spec,
            'extra_in_spec': extra_in_spec
        }
        
    except FileNotFoundError:
        print('‚ùå –§–∞–π–ª —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω!')
        return None

def check_generation_coverage():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –Ω–∞–≤—ã–∫–∏"""
    print('\nüîç –ü–†–û–í–ï–†–ö–ê –ü–û–ö–†–´–¢–ò–Ø –ì–ï–ù–ï–†–ê–¢–û–†–ê')
    print('='*50)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        print('–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å–ª–µ–¥–Ω–µ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏...')
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é
        with open('temp_dir/synthetic_data_spec.json', 'r', encoding='utf-8') as f:
            spec = json.load(f)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–∞–≤—ã–∫–∞
        skills_with_no_tasks = []
        
        for skill_id_str in spec['skills_graph']['skills_info'].keys():
            skill_id = int(skill_id_str)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –Ω–∞–≤—ã–∫–∞
            tasks_for_skill = Task.objects.filter(skills__id=skill_id).count()
            if tasks_for_skill == 0:
                try:
                    skill_name = Skill.objects.get(id=skill_id).name
                    skills_with_no_tasks.append((skill_id, skill_name))
                except Skill.DoesNotExist:
                    skills_with_no_tasks.append((skill_id, f'–ù–∞–≤—ã–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω'))
        
        if skills_with_no_tasks:
            print(f'‚ùå –ù–∞–≤—ã–∫–∏ –±–µ–∑ –∑–∞–¥–∞–Ω–∏–π (–Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã):')
            for skill_id, skill_name in skills_with_no_tasks:
                print(f'   - {skill_name} (ID: {skill_id})')
        else:
            print('‚úÖ –í—Å–µ –Ω–∞–≤—ã–∫–∏ –≤ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–º–µ—é—Ç –∑–∞–¥–∞–Ω–∏—è!')
        
        return len(skills_with_no_tasks) == 0
        
    except Exception as e:
        print(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: {e}')
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã
    system_data = analyze_system_data()
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é
    spec_data = analyze_synthetic_spec()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∫—Ä—ã—Ç–∏–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
    coverage_ok = check_generation_coverage()
    
    print('\nüéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò')
    print('='*50)
    
    if system_data['skills_without_tasks']:
        print('1. ‚ùå –ï—Å—Ç—å –Ω–∞–≤—ã–∫–∏ –±–µ–∑ –∑–∞–¥–∞–Ω–∏–π. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è:')
        print('   - –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è –¥–ª—è —ç—Ç–∏—Ö –Ω–∞–≤—ã–∫–æ–≤')
        print('   - –ò–ª–∏ –∏—Å–∫–ª—é—á–∏—Ç—å –∏—Ö –∏–∑ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏')
    
    if spec_data and spec_data['missing_in_spec']:
        print('2. ‚ùå –ù–µ –≤—Å–µ –Ω–∞–≤—ã–∫–∏ –≤–∫–ª—é—á–µ–Ω—ã –≤ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é. –ù—É–∂–Ω–æ:')
        print('   - –ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é —Å –ø–æ–º–æ—â—å—é analyze_dkn_data_requirements.py')
    
    if not coverage_ok:
        print('3. ‚ùå –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –Ω–µ –º–æ–∂–µ—Ç –æ—Ö–≤–∞—Ç–∏—Ç—å –≤—Å–µ –Ω–∞–≤—ã–∫–∏ –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –∑–∞–¥–∞–Ω–∏–π')
        print('   - –ù—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é')
    else:
        print('3. ‚úÖ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –æ—Ö–≤–∞—Ç–∏—Ç—å –≤—Å–µ –Ω–∞–≤—ã–∫–∏ –∏–∑ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏')
    
    print('\nüöÄ –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:', '‚úÖ –î–ê' if coverage_ok else '‚ùå –ù–ï–¢')

if __name__ == "__main__":
    main()
