"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ø—ã—Ç–∫–∞—Ö —Å—Ç—É–¥–µ–Ω—Ç–∞:
1. –í—ã–≥—Ä—É–∂–∞–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞ –∏–∑ –ë–î
2. –ù–∞—Ö–æ–¥–∏—Ç –∫—É—Ä—Å—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –æ–Ω –∑–∞–ø–∏—Å–∞–Ω
3. –ù–∞—Ö–æ–¥–∏—Ç –∑–∞–¥–∞–Ω–∏—è —ç—Ç–∏—Ö –∫—É—Ä—Å–æ–≤
4. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∑–∞–ø–∏—Å–∏ –æ –ø–æ–ø—ã—Ç–∫–∞—Ö (–ø–æ 2 –ø–æ–ø—ã—Ç–∫–∏ –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ)
5. –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –ë–î
"""

import os
import sys
import django
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
sys.path.append(str(Path(__file__).parent))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'adaptive_learning.settings')
django.setup()

import random
from datetime import datetime, timedelta
from django.utils import timezone
from django.contrib.auth.models import User
from django.db import transaction

# –ò–º–ø–æ—Ä—Ç—ã –Ω–∞—à–∏—Ö –º–æ–¥–µ–ª–µ–π
from student.models import StudentProfile, StudentCourseEnrollment
from methodist.models import Task, Course
from skills.models import Skill
from mlmodels.models import TaskAttempt, StudentSkillMastery


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üéì –ì–ï–ù–ï–†–ê–¢–û–† –†–ï–ê–õ–¨–ù–´–• –î–ê–ù–ù–´–• –û –ü–û–ü–´–¢–ö–ê–• –°–¢–£–î–ï–ù–¢–ê")
    print("=" * 60)
    
    # 1. –í—ã–≥—Ä—É–∂–∞–µ–º —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∏–∑ –ë–î
    print("1Ô∏è‚É£ –ü–æ–∏—Å–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
    students = get_students_from_db()
    
    if not students:
        print("   ‚ùå –°—Ç—É–¥–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞...")
        student = create_test_student()
    else:
        print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤: {len(students)}")
        student = select_student(students)
    
    print(f"   üë§ –í—ã–±—Ä–∞–Ω —Å—Ç—É–¥–µ–Ω—Ç: {student.full_name}")
    
    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–∏—Å–∏ –Ω–∞ –∫—É—Ä—Å—ã
    print(f"\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–∏—Å–µ–π –Ω–∞ –∫—É—Ä—Å—ã –¥–ª—è {student.full_name}...")
    enrollments = check_course_enrollments(student)
    
    if not enrollments:
        print("   ‚ùå –°—Ç—É–¥–µ–Ω—Ç –Ω–µ –∑–∞–ø–∏—Å–∞–Ω –Ω–∞ –∫—É—Ä—Å—ã. –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–∞ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫—É—Ä—Å—ã...")
        enrollments = enroll_student_to_courses(student)
    
    print(f"   ‚úÖ –°—Ç—É–¥–µ–Ω—Ç –∑–∞–ø–∏—Å–∞–Ω –Ω–∞ {len(enrollments)} –∫—É—Ä—Å–æ–≤:")
    for enrollment in enrollments:
        print(f"     üìö {enrollment.course.name}")
    
    # 3. –ù–∞—Ö–æ–¥–∏–º –∑–∞–¥–∞–Ω–∏—è –∫—É—Ä—Å–æ–≤
    print(f"\n3Ô∏è‚É£ –ü–æ–∏—Å–∫ –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –∫—É—Ä—Å–æ–≤...")
    course_tasks = find_course_tasks(enrollments)
    
    total_tasks = sum(len(tasks) for tasks in course_tasks.values())
    print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: {total_tasks}")
    for course, tasks in course_tasks.items():
        print(f"     üìö {course.name}: {len(tasks)} –∑–∞–¥–∞–Ω–∏–π")
    
    # 4. –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è (–ø–æ 15 –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫—É—Ä—Å–∞)
    print(f"\n4Ô∏è‚É£ –í—ã–±–æ—Ä —Å–ª—É—á–∞–π–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π...")
    selected_tasks = select_random_tasks(course_tasks, tasks_per_course=15)
    
    total_selected = sum(len(tasks) for tasks in selected_tasks.values())
    print(f"   ‚úÖ –í—ã–±—Ä–∞–Ω–æ –∑–∞–¥–∞–Ω–∏–π: {total_selected}")
    for course, tasks in selected_tasks.items():
        print(f"     üìö {course.name}: {len(tasks)} –∑–∞–¥–∞–Ω–∏–π")
    
    # 5. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–ø—ã—Ç–∫–∏ (–ø–æ 2 –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ)
    print(f"\n5Ô∏è‚É£ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–ø—ã—Ç–æ–∫ —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π...")
    attempts = generate_attempts(student, selected_tasks, attempts_per_task=2)
    
    print(f"   ‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–ø—ã—Ç–æ–∫: {len(attempts)}")
    
    # 6. –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    print(f"\n6Ô∏è‚É£ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
    save_attempts_to_db(attempts)
    
    # 7. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print(f"\n7Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")
    verify_data(student)
    
    print(f"\nüéâ –ì–ï–ù–ï–†–ê–¶–ò–Ø –î–ê–ù–ù–´–• –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")


def get_students_from_db():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∏–∑ –ë–î"""
    students = StudentProfile.objects.all()
    
    print(f"   –ù–∞–π–¥–µ–Ω–æ –≤ –ë–î:")
    for i, student in enumerate(students[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã—Ö 10
        print(f"     {i}. {student.full_name} ({student.user.username})")
        if student.organization:
            print(f"        üè¢ {student.organization}")
    
    if students.count() > 10:
        print(f"     ... –∏ –µ—â–µ {students.count() - 10} —Å—Ç—É–¥–µ–Ω—Ç–æ–≤")
    
    return list(students)


def select_student(students):
    """–í—ã–±–∏—Ä–∞–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö"""
    if len(students) == 1:
        return students[0]
    
    # –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ª–æ–≥–∏–∫—É –≤—ã–±–æ—Ä–∞
    return students[0]


def create_test_student():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞ –µ—Å–ª–∏ –Ω–µ—Ç –≤ –ë–î"""
    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    username = "real_test_student"
    user, created = User.objects.get_or_create(
        username=username,
        defaults={
            'first_name': '–†–µ–∞–ª—å–Ω—ã–π',
            'last_name': '–°—Ç—É–¥–µ–Ω—Ç',
            'email': f'{username}@university.edu'
        }
    )
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å —Å—Ç—É–¥–µ–Ω—Ç–∞
    student, created = StudentProfile.objects.get_or_create(
        user=user,
        defaults={
            'full_name': '–†–µ–∞–ª—å–Ω—ã–π –¢–µ—Å—Ç–æ–≤—ã–π –°—Ç—É–¥–µ–Ω—Ç',
            'email': user.email,
            'organization': '–¢–µ—Å—Ç–æ–≤—ã–π –£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç'
        }
    )
    
    return student


def check_course_enrollments(student):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞ –∫–∞–∫–∏–µ –∫—É—Ä—Å—ã –∑–∞–ø–∏—Å–∞–Ω —Å—Ç—É–¥–µ–Ω—Ç"""
    enrollments = StudentCourseEnrollment.objects.filter(
        student=student
    ).select_related('course')
    
    return list(enrollments)


def enroll_student_to_courses(student):
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞ –Ω–∞ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫—É—Ä—Å—ã"""
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫—É—Ä—Å—ã
    courses = Course.objects.all()
    
    if not courses.exists():
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∫—É—Ä—Å—ã –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        courses = create_test_courses()
    
    enrollments = []
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–∞ –ø–µ—Ä–≤—ã–µ 2-3 –∫—É—Ä—Å–∞
    for course in courses[:3]:
        enrollment, created = StudentCourseEnrollment.objects.get_or_create(
            student=student,
            course=course,
            defaults={
                'status': 'in_progress',
                'progress_percentage': random.randint(10, 80),
                'enrolled_at': timezone.now() - timedelta(days=random.randint(30, 90))
            }
        )
        enrollments.append(enrollment)
    
    return enrollments


def create_test_courses():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –∫—É—Ä—Å—ã –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç –≤ –ë–î"""
    courses = []
    
    course_data = [
        ('PROG101', '–û—Å–Ω–æ–≤—ã –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è', '–ò–∑—É—á–µ–Ω–∏–µ –æ—Å–Ω–æ–≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ Python'),
        ('MATH201', '–í—ã—Å—à–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞', '–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∏ –ª–∏–Ω–µ–π–Ω–∞—è –∞–ª–≥–µ–±—Ä–∞'),
        ('CS301', '–°—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö', '–ê–ª–≥–æ—Ä–∏—Ç–º—ã –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö')
    ]
    
    for course_id, name, description in course_data:
        course, created = Course.objects.get_or_create(
            id=course_id,
            defaults={
                'name': name,
                'description': description,
                'duration_hours': random.randint(40, 80)
            }
        )
        courses.append(course)
    
    return courses


def find_course_tasks(enrollments):
    """–ù–∞—Ö–æ–¥–∏—Ç –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –∫—É—Ä—Å–æ–≤ —Å—Ç—É–¥–µ–Ω—Ç–∞"""
    course_tasks = {}
    
    for enrollment in enrollments:
        course = enrollment.course
        
        # –ù–∞—Ö–æ–¥–∏–º –∑–∞–¥–∞–Ω–∏—è, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ –∫ –∫—É—Ä—Å—É
        tasks = Task.objects.filter(
            courses=course,
            is_active=True
        ).prefetch_related('skills', 'courses')
        
        if not tasks.exists():
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –∫—É—Ä—Å–∞
            tasks = create_test_tasks_for_course(course)
        
        course_tasks[course] = list(tasks)
    
    return course_tasks


def create_test_tasks_for_course(course):
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –∫—É—Ä—Å–∞"""
    tasks = []
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–∞–≤—ã–∫–∏
    skills = get_or_create_skills_for_course(course)
    
    # –°–æ–∑–¥–∞–µ–º 20 —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –∫—É—Ä—Å–∞
    for i in range(1, 21):
        task, created = Task.objects.get_or_create(
            title=f'–ó–∞–¥–∞–Ω–∏–µ {i} –ø–æ –∫—É—Ä—Å—É {course.name}',
            defaults={
                'question_text': f'–í–æ–ø—Ä–æ—Å {i} –¥–ª—è –∫—É—Ä—Å–∞ {course.name}. –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç.',
                'task_type': random.choice(['single', 'multiple', 'true_false']),
                'difficulty': random.choice(['beginner', 'intermediate', 'advanced']),
                'is_active': True
            }
        )
        
        if created:
            # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ –∫—É—Ä—Å—É
            task.courses.add(course)
            
            # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ —Å–ª—É—á–∞–π–Ω—ã–º –Ω–∞–≤—ã–∫–∞–º (1-3 –Ω–∞–≤—ã–∫–∞ –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ)
            task_skills = random.sample(skills, k=random.randint(1, min(3, len(skills))))
            task.skills.add(*task_skills)
        
        tasks.append(task)
    
    return tasks


def get_or_create_skills_for_course(course):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–∞–≤—ã–∫–∏ –¥–ª—è –∫—É—Ä—Å–∞"""
    # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –Ω–∞–≤—ã–∫–∏
    existing_skills = list(Skill.objects.all()[:5])
    
    if existing_skills:
        return existing_skills
    
    # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –Ω–∞–≤—ã–∫–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    skill_names = [
        '–û—Å–Ω–æ–≤—ã –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è',
        '–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö', 
        '–£—Å–ª–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã',
        '–¶–∏–∫–ª—ã',
        '–§—É–Ω–∫—Ü–∏–∏',
        '–†–∞–±–æ—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏',
        '–û–±—ä–µ–∫—Ç–Ω–æ-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ'
    ]
    
    skills = []
    for name in skill_names:
        skill, created = Skill.objects.get_or_create(
            name=name,
            defaults={
                'description': f'–ù–∞–≤—ã–∫: {name}',
                'is_base': name == '–û—Å–Ω–æ–≤—ã –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è'
            }
        )
        skills.append(skill)
    
    return skills


def select_random_tasks(course_tasks, tasks_per_course=15):
    """–í—ã–±–∏—Ä–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫—É—Ä—Å–∞"""
    selected_tasks = {}
    
    for course, tasks in course_tasks.items():
        # –í—ã–±–∏—Ä–∞–µ–º –¥–æ tasks_per_course –∑–∞–¥–∞–Ω–∏–π —Å–ª—É—á–∞–π–Ω–æ
        num_to_select = min(tasks_per_course, len(tasks))
        selected = random.sample(tasks, k=num_to_select)
        selected_tasks[course] = selected
    
    return selected_tasks


def generate_attempts(student, selected_tasks, attempts_per_task=2):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–ø—ã—Ç–∫–∏ —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π"""
    attempts = []
    
    # –ë–∞–∑–æ–≤–æ–µ –≤—Ä–µ–º—è - –º–µ—Å—è—Ü –Ω–∞–∑–∞–¥
    base_time = timezone.now() - timedelta(days=30)
    current_time = base_time
    
    for course, tasks in selected_tasks.items():
        print(f"     üìö –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–ø—ã—Ç–∫–∏ –¥–ª—è –∫—É—Ä—Å–∞: {course.name}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å —Å—Ç—É–¥–µ–Ω—Ç–∞ –¥–ª—è –∫—É—Ä—Å–∞ (–ø—Ä–æ–≥—Ä–µ—Å—Å –æ—Ç –ø–ª–æ—Ö–æ–≥–æ –∫ —Ö–æ—Ä–æ—à–µ–º—É)
        course_progress = 0.3  # –ù–∞—á–∏–Ω–∞–µ–º —Å 30% —É—Å–ø–µ—Ö–∞
        
        for task_idx, task in enumerate(tasks):
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —à–∞–Ω—Å —É—Å–ø–µ—Ö–∞ –ø–æ –º–µ—Ä–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –∫—É—Ä—Å–∞
            success_rate = min(0.9, course_progress + (task_idx * 0.02))
            
            for attempt_num in range(attempts_per_task):
                # –í—Ç–æ—Ä–∞—è –ø–æ–ø—ã—Ç–∫–∞ –æ–±—ã—á–Ω–æ –ª—É—á—à–µ –ø–µ—Ä–≤–æ–π
                adjusted_success_rate = success_rate
                if attempt_num > 0:
                    adjusted_success_rate = min(0.95, success_rate + 0.2)
                
                is_correct = random.random() < adjusted_success_rate
                
                # –í—Ä–µ–º—è –ø–æ–ø—ã—Ç–∫–∏ (–∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏)
                attempt_time = current_time + timedelta(
                    hours=random.randint(1, 48),  # –û—Ç 1 –¥–æ 48 —á–∞—Å–æ–≤ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
                    minutes=random.randint(0, 59)
                )
                
                # –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è
                time_spent = random.randint(30, 600)  # –û—Ç 30 —Å–µ–∫ –¥–æ 10 –º–∏–Ω
                
                attempt_data = {
                    'student': student,
                    'task': task,
                    'is_correct': is_correct,
                    'started_at': attempt_time - timedelta(seconds=time_spent),
                    'completed_at': attempt_time,
                    'time_spent': time_spent,
                    'given_answer': f"–û—Ç–≤–µ—Ç {attempt_num + 1} –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ {task.title}",
                    'metadata': {
                        'course': course.name,
                        'attempt_number': attempt_num + 1,
                        'success_rate': adjusted_success_rate,
                        'generated': True
                    }
                }
                
                attempts.append(attempt_data)
                current_time = attempt_time
    
    return attempts


def save_attempts_to_db(attempts):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–ø—ã—Ç–∫–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    saved_count = 0
    
    # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –ø–æ–ø—ã—Ç–∫–∏ —ç—Ç–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    student = attempts[0]['student']
    TaskAttempt.objects.filter(student=student).delete()
    print(f"   üßπ –û—á–∏—â–µ–Ω—ã –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –ø–æ–ø—ã—Ç–∫–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞")
    
    with transaction.atomic():
        for attempt_data in attempts:
            try:
                attempt = TaskAttempt.objects.create(**attempt_data)
                saved_count += 1
                
                if saved_count % 10 == 0:
                    print(f"   üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –ø–æ–ø—ã—Ç–æ–∫: {saved_count}")
                    
            except Exception as e:
                print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ø—ã—Ç–∫–∏: {e}")
    
    print(f"   ‚úÖ –í—Å–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –ø–æ–ø—ã—Ç–æ–∫: {saved_count}")


def verify_data(student):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫–∏
    attempts = TaskAttempt.objects.filter(student=student)
    print(f"   üìä –í—Å–µ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ –≤ –ë–î: {attempts.count()}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–≤–æ–µ–Ω–∏–µ –Ω–∞–≤—ã–∫–æ–≤
    masteries = StudentSkillMastery.objects.filter(student=student)
    print(f"   üéØ –ó–∞–ø–∏—Å–µ–π –æ—Å–≤–æ–µ–Ω–∏—è –Ω–∞–≤—ã–∫–æ–≤: {masteries.count()}")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫—É—Ä—Å–∞–º
    course_stats = {}
    for attempt in attempts:
        for course in attempt.task.courses.all():
            if course.name not in course_stats:
                course_stats[course.name] = {'total': 0, 'correct': 0}
            course_stats[course.name]['total'] += 1
            if attempt.is_correct:
                course_stats[course.name]['correct'] += 1
    
    print(f"   üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫—É—Ä—Å–∞–º:")
    for course_name, stats in course_stats.items():
        accuracy = (stats['correct'] / stats['total']) * 100 if stats['total'] > 0 else 0
        print(f"     üìö {course_name}: {stats['correct']}/{stats['total']} ({accuracy:.1f}%)")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ BKT
    if masteries.exists():
        print(f"   üß† –ü—Ä–∏–º–µ—Ä—ã –æ—Å–≤–æ–µ–Ω–∏—è –Ω–∞–≤—ã–∫–æ–≤ (BKT):")
        for mastery in masteries[:5]:
            print(f"     üéØ {mastery.skill.name}: {mastery.current_mastery_prob:.3f} "
                  f"({mastery.correct_attempts}/{mastery.attempts_count})")


def show_final_summary(student):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å–≤–æ–¥–∫—É"""
    print(f"\nüìã –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–í–û–î–ö–ê –î–õ–Ø –°–¢–£–î–ï–ù–¢–ê: {student.full_name}")
    print("=" * 60)
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_attempts = TaskAttempt.objects.filter(student=student).count()
    total_masteries = StudentSkillMastery.objects.filter(student=student).count()
    total_enrollments = StudentCourseEnrollment.objects.filter(student=student).count()
    
    print(f"üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"   üë§ –°—Ç—É–¥–µ–Ω—Ç: {student.full_name}")
    print(f"   üè¢ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: {student.organization}")
    print(f"   üìö –ö—É—Ä—Å–æ–≤: {total_enrollments}")
    print(f"   üìù –ü–æ–ø—ã—Ç–æ–∫: {total_attempts}")
    print(f"   üéØ –ù–∞–≤—ã–∫–æ–≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è: {total_masteries}")
    
    # –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é BKT
    print(f"\nüöÄ –ì–û–¢–û–í–ù–û–°–¢–¨ –ö –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Æ BKT:")
    print(f"   ‚úÖ –î–∞–Ω–Ω—ã–µ —Å—Ç—É–¥–µ–Ω—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
    print(f"   ‚úÖ –ò—Å—Ç–æ—Ä–∏—è –ø–æ–ø—ã—Ç–æ–∫ —Å–æ–∑–¥–∞–Ω–∞ ({total_attempts} –∑–∞–ø–∏—Å–µ–π)")
    print(f"   ‚úÖ BKT –º–æ–¥–µ–ª—å –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∞")
    print(f"   ‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∞–Ω–∞–ª–∏–∑—É –æ–±—É—á–µ–Ω–∏—è")


if __name__ == "__main__":
    try:
        main()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞ –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Å–≤–æ–¥–∫–∏
        students = StudentProfile.objects.all()
        if students.exists():
            show_final_summary(students.first())
        
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()
