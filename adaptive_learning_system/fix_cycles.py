#!/usr/bin/env python
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∏ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è —Ü–∏–∫–ª–æ–≤ –≤ –≥—Ä–∞—Ñ–µ –Ω–∞–≤—ã–∫–æ–≤
"""

import os
import sys
import django
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
sys.path.append(str(Path(__file__).parent))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'adaptive_learning.settings')
django.setup()

import networkx as nx
from skills.models import Skill
from mlmodels.data_interfaces.skills_graph import SkillsGraphInterface


def find_and_display_cycles():
    """–ù–∞–π—Ç–∏ –∏ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –≤—Å–µ —Ü–∏–∫–ª—ã –≤ –≥—Ä–∞—Ñ–µ –Ω–∞–≤—ã–∫–æ–≤"""
    print("üîç –ê–ù–ê–õ–ò–ó –¶–ò–ö–õ–û–í –í –ì–†–ê–§–ï –ù–ê–í–´–ö–û–í")
    print("=" * 50)
    
    # –°—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ –Ω–∞–≤—ã–∫–æ–≤
    graph_interface = SkillsGraphInterface()
    graph_interface.build_graph_from_database()
    graph = graph_interface.get_graph()
    
    print(f"–ì—Ä–∞—Ñ —Å–æ–¥–µ—Ä–∂–∏—Ç {graph.number_of_nodes()} –Ω–∞–≤—ã–∫–æ–≤ –∏ {graph.number_of_edges()} —Å–≤—è–∑–µ–π")
    
    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Ü–∏–∫–ª—ã
    try:
        cycles = list(nx.simple_cycles(graph))
        print(f"\n–ù–∞–π–¥–µ–Ω–æ —Ü–∏–∫–ª–æ–≤: {len(cycles)}")
        
        if cycles:
            print("\n–î–µ—Ç–∞–ª–∏ —Ü–∏–∫–ª–æ–≤:")
            for i, cycle in enumerate(cycles, 1):
                print(f"\n–¶–∏–∫–ª {i}: {' -> '.join(map(str, cycle))} -> {cycle[0]}")
                
                # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –Ω–∞–≤—ã–∫–æ–≤
                skill_names = []
                for skill_id in cycle:
                    try:
                        skill = Skill.objects.get(id=skill_id)
                        skill_names.append(f"{skill.name} (ID: {skill.id})")
                    except Skill.DoesNotExist:
                        skill_names.append(f"–ù–∞–≤—ã–∫ {skill_id} (–Ω–µ –Ω–∞–π–¥–µ–Ω)")
                
                print(f"  –ù–∞–≤—ã–∫–∏: {' -> '.join(skill_names)}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤—è–∑–∏ –≤ —Ü–∏–∫–ª–µ
                print("  –°–≤—è–∑–∏ –≤ —Ü–∏–∫–ª–µ:")
                for j in range(len(cycle)):
                    from_skill_id = cycle[j]
                    to_skill_id = cycle[(j + 1) % len(cycle)]
                    
                    from_skill = Skill.objects.get(id=from_skill_id)
                    to_skill = Skill.objects.get(id=to_skill_id)
                    
                    print(f"    {from_skill.name} -> {to_skill.name}")
        
        return cycles
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ü–∏–∫–ª–æ–≤: {e}")
        return []


def break_cycles_interactive(cycles):
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ —Ü–∏–∫–ª–æ–≤"""
    print("\nüîß –£–°–¢–†–ê–ù–ï–ù–ò–ï –¶–ò–ö–õ–û–í")
    print("=" * 50)
    
    if not cycles:
        print("–¶–∏–∫–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        return
    
    removed_edges = []
    
    for i, cycle in enumerate(cycles, 1):
        print(f"\n--- –¶–∏–∫–ª {i} ---")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Ä—ë–±—Ä–∞ –≤ —Ü–∏–∫–ª–µ
        edges_in_cycle = []
        for j in range(len(cycle)):
            from_skill_id = cycle[j]
            to_skill_id = cycle[(j + 1) % len(cycle)]
            edges_in_cycle.append((from_skill_id, to_skill_id))
        
        print("–†—ë–±—Ä–∞ –≤ —Ü–∏–∫–ª–µ:")
        for idx, (from_id, to_id) in enumerate(edges_in_cycle):
            from_skill = Skill.objects.get(id=from_id)
            to_skill = Skill.objects.get(id=to_id)
            print(f"  {idx + 1}. {from_skill.name} -> {to_skill.name}")
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ–º —Ä–µ–±—Ä–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        # –°—Ç—Ä–∞—Ç–µ–≥–∏—è: —É–¥–∞–ª—è–µ–º —Ä–µ–±—Ä–æ —Å –Ω–∞–∏–º–µ–Ω—å—à–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
        edge_to_remove = choose_edge_to_remove(edges_in_cycle)
        
        if edge_to_remove:
            from_id, to_id = edge_to_remove
            from_skill = Skill.objects.get(id=from_id)
            to_skill = Skill.objects.get(id=to_id)
            
            print(f"\n‚ö†Ô∏è –£–¥–∞–ª—è–µ–º —Å–≤—è–∑—å: {from_skill.name} -> {to_skill.name}")
            
            # –£–¥–∞–ª—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å
            from_skill.prerequisites.remove(to_skill)
            removed_edges.append((from_skill.name, to_skill.name))
            
            print(f"‚úÖ –°–≤—è–∑—å —É–¥–∞–ª–µ–Ω–∞")
    
    print(f"\nüéâ –£—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ —Ü–∏–∫–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print(f"–£–¥–∞–ª–µ–Ω–æ —Å–≤—è–∑–µ–π: {len(removed_edges)}")
    
    if removed_edges:
        print("\n–£–¥–∞–ª—ë–Ω–Ω—ã–µ —Å–≤—è–∑–∏:")
        for from_name, to_name in removed_edges:
            print(f"  - {from_name} -> {to_name}")


def choose_edge_to_remove(edges_in_cycle):
    """–í—ã–±—Ä–∞—Ç—å —Ä–µ–±—Ä–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ —Ü–∏–∫–ª–∞"""
    # –°—Ç—Ä–∞—Ç–µ–≥–∏—è: —É–¥–∞–ª—è–µ–º —Ä–µ–±—Ä–æ, –∫–æ—Ç–æ—Ä–æ–µ –≤–µ–¥—ë—Ç –∫ –Ω–∞–≤—ã–∫—É —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    # –≠—Ç–æ –º–∏–Ω–∏–º–∏–∑–∏—Ä—É–µ—Ç –≤–ª–∏—è–Ω–∏–µ –Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≥—Ä–∞—Ñ–∞
    
    best_edge = None
    max_out_degree = -1
    
    for from_id, to_id in edges_in_cycle:
        to_skill = Skill.objects.get(id=to_id)
        out_degree = to_skill.prerequisites.count()  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å—Ö–æ–¥—è—â–∏—Ö —Å–≤—è–∑–µ–π
        
        if out_degree > max_out_degree:
            max_out_degree = out_degree
            best_edge = (from_id, to_id)
    
    return best_edge


def verify_no_cycles():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ —Ü–∏–∫–ª—ã —É—Å—Ç—Ä–∞–Ω–µ–Ω—ã"""
    print("\nüîç –ü–†–û–í–ï–†–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–ê")
    print("=" * 50)
    
    graph_interface = SkillsGraphInterface()
    graph_interface.build_graph_from_database()
    graph = graph_interface.get_graph()
    
    try:
        cycles = list(nx.simple_cycles(graph))
        if cycles:
            print(f"‚ùå –ï—â—ë –æ—Å—Ç–∞–ª–∏—Å—å —Ü–∏–∫–ª—ã: {len(cycles)}")
            return False
        else:
            print("‚úÖ –¶–∏–∫–ª—ã —É—Å—Ç—Ä–∞–Ω–µ–Ω—ã! –ì—Ä–∞—Ñ —Å—Ç–∞–ª –∞—Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–º.")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ø–æ–ª–æ–≥–∏—á–µ—Å–∫—É—é —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É
            try:
                topo_order = list(nx.topological_sort(graph))
                print(f"‚úÖ –¢–æ–ø–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç: {len(topo_order)} –Ω–∞–≤—ã–∫–æ–≤ —É–ø–æ—Ä—è–¥–æ—á–µ–Ω—ã")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 –Ω–∞–≤—ã–∫–æ–≤ –≤ –ø–æ—Ä—è–¥–∫–µ –∏–∑—É—á–µ–Ω–∏—è
                print("\n–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –ø–æ—Ä—è–¥–æ–∫ –∏–∑—É—á–µ–Ω–∏—è (–ø–µ—Ä–≤—ã–µ 10):")
                for i, skill_id in enumerate(topo_order[:10], 1):
                    skill = Skill.objects.get(id=skill_id)
                    print(f"  {i}. {skill.name}")
                
                return True
            except nx.NetworkXUnfeasible:
                print("‚ùå –¢–æ–ø–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –≤—Å—ë –µ—â—ë –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                return False
                
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: {e}")
        return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("–£–°–¢–†–ê–ù–ï–ù–ò–ï –¶–ò–ö–õ–û–í –í –ì–†–ê–§–ï –ù–ê–í–´–ö–û–í")
    print("=" * 60)
    
    # 1. –ù–∞–π—Ç–∏ —Ü–∏–∫–ª—ã
    cycles = find_and_display_cycles()
    
    if not cycles:
        print("‚úÖ –ì—Ä–∞—Ñ —É–∂–µ –∞—Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–π!")
        return
    
    # 2. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    print(f"\n–ù–∞–π–¥–µ–Ω–æ {len(cycles)} —Ü–∏–∫–ª–æ–≤. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ? (y/N): ", end="")
    response = input().strip().lower()
    
    if response != 'y':
        print("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        return
    
    # 3. –£—Å—Ç—Ä–∞–Ω–∏—Ç—å —Ü–∏–∫–ª—ã
    break_cycles_interactive(cycles)
    
    # 4. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    verify_no_cycles()


if __name__ == "__main__":
    main()
