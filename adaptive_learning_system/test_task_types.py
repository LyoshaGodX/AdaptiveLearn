#!/usr/bin/env python
"""
–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã —Å —É—á–µ—Ç–æ–º —Ç–∏–ø–æ–≤ –∑–∞–¥–∞–Ω–∏–π –∏ —É—Ä–æ–≤–Ω–µ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
"""

import os
import sys
import django
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
sys.path.append(str(Path(__file__).parent))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'adaptive_learning.settings')
django.setup()

from mlmodels.bkt.base_model import BKTModel, BKTParameters, TaskCharacteristics
from mlmodels.student_strategies.strategies import StudentStrategyFactory
from methodist.models import TaskType, DifficultyLevel


def test_bkt_with_task_types():
    """–¢–µ—Å—Ç BKT –º–æ–¥–µ–ª–∏ —Å —Ä–∞–∑–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ –∑–∞–¥–∞–Ω–∏–π"""
    print("üß™ –¢–ï–°–¢ BKT –ú–û–î–ï–õ–ò –° –¢–ò–ü–ê–ú–ò –ó–ê–î–ê–ù–ò–ô")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º BKT –º–æ–¥–µ–ª—å
    bkt_model = BKTModel()
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –Ω–∞–≤—ã–∫–∞
    skill_id = 1
    base_params = BKTParameters(P_L0=0.1, P_T=0.3, P_G=0.2, P_S=0.1)
    bkt_model.set_skill_parameters(skill_id, base_params)
    
    student_id = 1
    
    print(f"–ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã BKT: P(L0)={base_params.P_L0}, P(T)={base_params.P_T}, P(G)={base_params.P_G}, P(S)={base_params.P_S}")
    print()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –∑–∞–¥–∞–Ω–∏–π
    task_types = [
        ('true_false', 'beginner'),
        ('single', 'intermediate'), 
        ('multiple', 'advanced')
    ]
    
    for task_type, difficulty in task_types:
        print(f"--- –¢–∏–ø –∑–∞–¥–∞–Ω–∏—è: {task_type}, –°–ª–æ–∂–Ω–æ—Å—Ç—å: {difficulty} ---")
        
        # –°–æ–∑–¥–∞–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∑–∞–¥–∞–Ω–∏—è
        task_chars = TaskCharacteristics(task_type=task_type, difficulty=difficulty)
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        adapted_params = bkt_model._adjust_parameters_for_task(base_params, task_chars)
        
        print(f"–ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:")
        print(f"  P(G) = {adapted_params.P_G:.3f} (–±—ã–ª–æ {base_params.P_G:.3f})")
        print(f"  P(S) = {adapted_params.P_S:.3f} (–±—ã–ª–æ {base_params.P_S:.3f})")
        print(f"  P(T) = {adapted_params.P_T:.3f} (–±—ã–ª–æ {base_params.P_T:.3f})")
        
        # –ü—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É—Å–ø–µ—Ö–∞
        p_success = bkt_model.predict_performance(student_id, skill_id, task_chars)
        print(f"  –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É—Å–ø–µ—Ö–∞: {p_success:.3f}")
        
        print()


def test_student_preferences():
    """–¢–µ—Å—Ç –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ø–æ —Ç–∏–ø–∞–º –∑–∞–¥–∞–Ω–∏–π"""
    print("üë• –¢–ï–°–¢ –ü–†–ï–î–ü–û–ß–¢–ï–ù–ò–ô –°–¢–£–î–ï–ù–¢–û–í –ü–û –¢–ò–ü–ê–ú –ó–ê–î–ê–ù–ò–ô")
    print("=" * 50)
    
    strategy_types = ['beginner', 'intermediate', 'advanced', 'gifted', 'struggle']
    task_types = ['true_false', 'single', 'multiple']
    
    for strategy_type in strategy_types:
        print(f"--- –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {strategy_type.upper()} ---")
        
        strategy = StudentStrategyFactory.create_strategy(strategy_type)
        
        for task_type in task_types:
            preference = strategy.get_task_type_preference(task_type)
            
            # –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
            if preference > 1.2:
                preference_str = "—Å–∏–ª—å–Ω–æ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç"
            elif preference > 1.0:
                preference_str = "–ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç"
            elif preference == 1.0:
                preference_str = "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ"
            elif preference > 0.8:
                preference_str = "—Å–ª–µ–≥–∫–∞ –∏–∑–±–µ–≥–∞–µ—Ç"
            else:
                preference_str = "–∏–∑–±–µ–≥–∞–µ—Ç"
            
            print(f"  {task_type:12}: {preference:.2f} ({preference_str})")
        
        print()


def test_task_attempt_decisions():
    """–¢–µ—Å—Ç —Ä–µ—à–µ–Ω–∏–π –æ –ø–æ–ø—ã—Ç–∫–∞—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π"""
    print("üéØ –¢–ï–°–¢ –†–ï–®–ï–ù–ò–ô –û –ü–û–ü–´–¢–ö–ê–• –í–´–ü–û–õ–ù–ï–ù–ò–Ø –ó–ê–î–ê–ù–ò–ô")
    print("=" * 50)
    
    strategy = StudentStrategyFactory.create_strategy('beginner')
    
    task_scenarios = [
        ('true_false', 'beginner', 0.3),
        ('single', 'intermediate', 0.3), 
        ('multiple', 'advanced', 0.3),
        ('true_false', 'advanced', 0.8),
        ('multiple', 'beginner', 0.8)
    ]
    
    print("–î–ª—è –Ω–∞—á–∏–Ω–∞—é—â–µ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞:")
    print()
    
    for task_type, difficulty, mastery in task_scenarios:
        print(f"–ó–∞–¥–∞–Ω–∏–µ: {task_type}, —Å–ª–æ–∂–Ω–æ—Å—Ç—å: {difficulty}, –æ—Å–≤–æ–µ–Ω–∏–µ: {mastery:.1f}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ—à–µ–Ω–∏–µ 100 —Ä–∞–∑ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
        attempts = 0
        for _ in range(100):
            if strategy.should_attempt_task_with_type(difficulty, mastery, task_type):
                attempts += 1
        
        probability = attempts / 100
        print(f"  –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–æ–ø—ã—Ç–∫–∏: {probability:.2f}")
        print()


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –° –¢–ò–ü–ê–ú–ò –ó–ê–î–ê–ù–ò–ô –ò –°–õ–û–ñ–ù–û–°–¢–¨–Æ")
    print("=" * 70)
    print()
    
    try:
        # –¢–µ—Å—Ç 1: BKT –º–æ–¥–µ–ª—å —Å —Ç–∏–ø–∞–º–∏ –∑–∞–¥–∞–Ω–∏–π
        test_bkt_with_task_types()
        
        # –¢–µ—Å—Ç 2: –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
        test_student_preferences()
        
        # –¢–µ—Å—Ç 3: –†–µ—à–µ–Ω–∏—è –æ –ø–æ–ø—ã—Ç–∫–∞—Ö
        test_task_attempt_decisions()
        
        print("‚úÖ –í–°–ï –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê –í–û –í–†–ï–ú–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main()
