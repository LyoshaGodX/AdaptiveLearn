#!/usr/bin/env python
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö BKT –∏ –ø—Ä–æ—Ñ–∏–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞
"""

import os
import sys
import django

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
sys.path.append(os.path.dirname(os.path.abspath(__file__)))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'adaptive_learning.settings')
django.setup()

from student.models import StudentProfile
from mlmodels.models import StudentSkillMastery, TaskAttempt, StudentCurrentRecommendation
from methodist.models import Task
from skills.models import Skill
from django.contrib.auth.models import User

def test_bkt_data():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ BKT"""
    print("=== –¢–ï–°–¢ –î–ê–ù–ù–´–• BKT ===")
    
    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
    students = StudentProfile.objects.all()
    print(f"–í—Å–µ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤: {students.count()}")
    
    if not students.exists():
        print("‚ùå –ù–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        return
    
    # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞
    student = students.first()
    print(f"\nüìã –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞: {student.full_name} (ID: {student.id})")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–≤—ã–∫–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞
    skill_masteries = StudentSkillMastery.objects.filter(student=student)
    print(f"–ù–∞–≤—ã–∫–æ–≤ —É —Å—Ç—É–¥–µ–Ω—Ç–∞: {skill_masteries.count()}")
    
    if not skill_masteries.exists():
        print("‚ùå –£ —Å—Ç—É–¥–µ–Ω—Ç–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ –Ω–∞–≤—ã–∫–∞—Ö")
        return
        
    print("\nüß† –ù–ê–í–´–ö–ò –°–¢–£–î–ï–ù–¢–ê:")
    print("-" * 80)
    print(f"{'–ù–∞–≤—ã–∫':<30} {'–¢–µ–∫—É—â–∞—è P(L)':<15} {'–ü–æ–ø—ã—Ç–æ–∫':<10} {'–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö':<12} {'P(G)':<8} {'P(S)':<8}")
    print("-" * 80)
    
    for sm in skill_masteries[:10]:  # –ü–µ—Ä–≤—ã–µ 10 –Ω–∞–≤—ã–∫–æ–≤
        print(f"{sm.skill.name[:29]:<30} "
              f"{sm.current_mastery_prob:<15.4f} "
              f"{sm.attempts_count:<10} "
              f"{sm.correct_attempts:<12} "
              f"{sm.guess_prob:<8.3f} "
              f"{sm.slip_prob:<8.3f}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫–∏ —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π
    attempts = TaskAttempt.objects.filter(student=student)
    print(f"\nüìù –ü–û–ü–´–¢–ö–ò –†–ï–®–ï–ù–ò–Ø –ó–ê–î–ê–ù–ò–ô:")
    print(f"–í—Å–µ–≥–æ –ø–æ–ø—ã—Ç–æ–∫: {attempts.count()}")
    print(f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö: {attempts.filter(is_correct=True).count()}")
    print(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö: {attempts.filter(is_correct=False).count()}")
    
    if attempts.exists():
        print("\nüìä –ü–û–°–õ–ï–î–ù–ò–ï 5 –ü–û–ü–´–¢–û–ö:")
        print("-" * 60)
        print(f"{'–ó–∞–¥–∞–Ω–∏–µ':<25} {'–†–µ–∑—É–ª—å—Ç–∞—Ç':<10} {'–í—Ä–µ–º—è':<20}")
        print("-" * 60)
        
        for attempt in attempts.order_by('-completed_at')[:5]:
            result = "‚úÖ –í–µ—Ä–Ω–æ" if attempt.is_correct else "‚ùå –ù–µ–≤–µ—Ä–Ω–æ"
            print(f"{attempt.task.title[:24]:<25} "
                  f"{result:<10} "
                  f"{attempt.completed_at.strftime('%d.%m %H:%M'):<20}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é
    try:
        current_rec = StudentCurrentRecommendation.objects.select_related(
            'recommendation__task'
        ).get(student=student)
        print(f"\nüéØ –¢–ï–ö–£–©–ê–Ø –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø:")
        print(f"–ó–∞–¥–∞–Ω–∏–µ: {current_rec.recommendation.task.title}")
        print(f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {current_rec.recommendation.confidence:.2f}")
        print(f"Q-value: {current_rec.recommendation.q_value:.4f}")
        if current_rec.recommendation.llm_explanation:
            print(f"–û–±—ä—è—Å–Ω–µ–Ω–∏–µ: {current_rec.recommendation.llm_explanation[:100]}...")
    except StudentCurrentRecommendation.DoesNotExist:
        print("\n‚ùå –£ —Å—Ç—É–¥–µ–Ω—Ç–∞ –Ω–µ—Ç —Ç–µ–∫—É—â–µ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")

def test_skills_data():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞–≤—ã–∫–æ–≤"""
    print("\n\n=== –¢–ï–°–¢ –î–ê–ù–ù–´–• –ù–ê–í–´–ö–û–í ===")
    
    skills = Skill.objects.all()
    print(f"–í—Å–µ–≥–æ –Ω–∞–≤—ã–∫–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ: {skills.count()}")
    
    if not skills.exists():
        print("‚ùå –ù–µ—Ç –Ω–∞–≤—ã–∫–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        return
    
    print("\nüéØ –°–ü–ò–°–û–ö –ù–ê–í–´–ö–û–í:")
    print("-" * 50)
    
    for skill in skills[:15]:  # –ü–µ—Ä–≤—ã–µ 15 –Ω–∞–≤—ã–∫–æ–≤
        masteries_count = StudentSkillMastery.objects.filter(skill=skill).count()
        print(f"ID: {skill.id:<3} | {skill.name:<35} | –°—Ç—É–¥–µ–Ω—Ç–æ–≤: {masteries_count}")

def test_tasks_data():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏–π"""
    print("\n\n=== –¢–ï–°–¢ –î–ê–ù–ù–´–• –ó–ê–î–ê–ù–ò–ô ===")
    
    tasks = Task.objects.all()
    print(f"–í—Å–µ–≥–æ –∑–∞–¥–∞–Ω–∏–π: {tasks.count()}")
    
    if not tasks.exists():
        print("‚ùå –ù–µ—Ç –∑–∞–¥–∞–Ω–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        return
    
    print("\nüìö –°–ü–ò–°–û–ö –ó–ê–î–ê–ù–ò–ô:")
    print("-" * 80)
    print(f"{'ID':<5} {'–ù–∞–∑–≤–∞–Ω–∏–µ':<40} {'–¢–∏–ø':<15} {'–°–ª–æ–∂–Ω–æ—Å—Ç—å':<15}")
    print("-" * 80)
    
    for task in tasks[:10]:  # –ü–µ—Ä–≤—ã–µ 10 –∑–∞–¥–∞–Ω–∏–π
        attempts_count = TaskAttempt.objects.filter(task=task).count()
        print(f"{task.id:<5} "
              f"{task.title[:39]:<40} "
              f"{task.task_type:<15} "
              f"{task.difficulty:<15}")

def check_bkt_calculations():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤—ã—á–∏—Å–ª–µ–Ω–∏–π BKT"""
    print("\n\n=== –ü–†–û–í–ï–†–ö–ê –í–´–ß–ò–°–õ–ï–ù–ò–ô BKT ===")
    
    # –ù–∞—Ö–æ–¥–∏–º –Ω–∞–≤—ã–∫–∏ —Å –ø–æ–ø—ã—Ç–∫–∞–º–∏
    skill_masteries = StudentSkillMastery.objects.filter(
        attempts_count__gt=0
    ).select_related('skill', 'student')[:5]
    
    if not skill_masteries.exists():
        print("‚ùå –ù–µ—Ç –Ω–∞–≤—ã–∫–æ–≤ —Å –ø–æ–ø—ã—Ç–∫–∞–º–∏")
        return
    
    print("\nüîç –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó BKT:")
    print("-" * 100)
    
    for sm in skill_masteries:
        print(f"\nüë§ –°—Ç—É–¥–µ–Ω—Ç: {sm.student.full_name}")
        print(f"üéØ –ù–∞–≤—ã–∫: {sm.skill.name}")
        print(f"üìä –ü–æ–ø—ã—Ç–æ–∫: {sm.attempts_count}, –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö: {sm.correct_attempts}")
        
        accuracy = sm.correct_attempts / sm.attempts_count if sm.attempts_count > 0 else 0
        print(f"üìà –¢–æ—á–Ω–æ—Å—Ç—å: {accuracy:.2%}")
        
        print(f"üßÆ P(L0): {sm.initial_mastery_prob:.4f}")
        print(f"üßÆ P(Lt): {sm.current_mastery_prob:.4f}")
        print(f"üßÆ P(T): {sm.transition_prob:.4f}")
        print(f"üßÆ P(G): {sm.guess_prob:.4f}")
        print(f"üßÆ P(S): {sm.slip_prob:.4f}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É
        print(f"‚úÖ –ü—Ä–æ—Ü–µ–Ω—Ç –æ—Å–≤–æ–µ–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è: {sm.current_mastery_prob * 100:.1f}%")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ó–ê–ü–£–°–ö –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò –°–ò–°–¢–ï–ú–´ –ê–î–ê–ü–¢–ò–í–ù–û–ì–û –û–ë–£–ß–ï–ù–ò–Ø")
    print("=" * 60)
    
    try:
        test_bkt_data()
        test_skills_data() 
        test_tasks_data()
        check_bkt_calculations()
        
        print("\n\n‚úÖ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê")
        
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()
