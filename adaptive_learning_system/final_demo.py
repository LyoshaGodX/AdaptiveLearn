#!/usr/bin/env python3
"""
–§–∏–Ω–∞–ª—å–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è MLModels
—Å –ø–æ–ª–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ç–∏–ø–æ–≤ –∑–∞–¥–∞–Ω–∏–π –∏ —É—Ä–æ–≤–Ω–µ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏.

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç:
1. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã
2. –†–∞–±–æ—Ç—É —Å —Ç–∏–ø–∞–º–∏ –∑–∞–¥–∞–Ω–∏–π (true_false, single, multiple)
3. –ê–¥–∞–ø—Ç–∞—Ü–∏—é –ø–æ–¥ —É—Ä–æ–≤–Ω–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ (beginner, intermediate, advanced)
4. –ì–µ–Ω–µ—Ä–∞—Ü–∏—é —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Å —É—á–µ—Ç–æ–º –Ω–æ–≤—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
5. –û–±—É—á–µ–Ω–∏–µ –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è BKT –º–æ–¥–µ–ª–∏
6. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
"""

import os
import sys
import django
from datetime import datetime
from typing import Dict, List, Any

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
sys.path.append(os.path.dirname(os.path.abspath(__file__)))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'adaptive_learning.settings')
django.setup()

# –ò–º–ø–æ—Ä—Ç—ã –º–æ–¥—É–ª–µ–π —Å–∏—Å—Ç–µ–º—ã
import mlmodels
from mlmodels.bkt.base_model import BKTModel, BKTParameters, TaskCharacteristics
from mlmodels.student_strategies.strategies import StudentStrategyFactory
from mlmodels.synthetic_data.generator import SyntheticDataGenerator

def main():
    print("üöÄ –§–ò–ù–ê–õ–¨–ù–ê–Ø –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –°–ò–°–¢–ï–ú–´ MLMODELS")
    print("–ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ç–∏–ø–æ–≤ –∑–∞–¥–∞–Ω–∏–π –∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏")
    print(f"–í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("=" * 80)
      # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
    print("\nüìã –≠–¢–ê–ü 1: –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –°–ò–°–¢–ï–ú–´")
    print("-" * 50)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
    database_interface = mlmodels.get_database_interface()
    skills_graph = mlmodels.get_skills_graph()
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    courses = database_interface.get_all_courses()
    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∫—É—Ä—Å–æ–≤: {len(courses)}")
    
    skills = database_interface.get_all_skills()
    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –Ω–∞–≤—ã–∫–æ–≤: {len(skills)}")
    
    tasks = database_interface.get_all_tasks()
    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: {len(tasks)}")
      # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø—ã –∑–∞–¥–∞–Ω–∏–π
    task_types = {}
    difficulty_levels = {}
    
    for task in tasks:
        task_type = getattr(task, 'task_type', 'single')
        difficulty = getattr(task, 'difficulty', 'intermediate')
        
        task_types[task_type] = task_types.get(task_type, 0) + 1
        difficulty_levels[difficulty] = difficulty_levels.get(difficulty, 0) + 1
    
    print(f"üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–∏–ø–∞–º –∑–∞–¥–∞–Ω–∏–π: {task_types}")
    print(f"üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —É—Ä–æ–≤–Ω—è–º —Å–ª–æ–∂–Ω–æ—Å—Ç–∏: {difficulty_levels}")
    
    # 2. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ BKT –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    print("\nüß† –≠–¢–ê–ü 2: –ê–î–ê–ü–¢–ê–¶–ò–Ø BKT –ü–û–î –¢–ò–ü–´ –ó–ê–î–ê–ù–ò–ô")
    print("-" * 50)
    
    # –°–æ–∑–¥–∞–µ–º BKT –º–æ–¥–µ–ª—å
    bkt_model = BKTModel()
    
    # –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    base_params = BKTParameters(P_L0=0.1, P_T=0.3, P_G=0.2, P_S=0.1)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–¥–∞–ø—Ç–∞—Ü–∏—é –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∑–∞–¥–∞–Ω–∏–π
    test_cases = [
        ('true_false', 'beginner'),
        ('single', 'intermediate'), 
        ('multiple', 'advanced')
    ]
    
    print(f"üîß –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: P(L0)={base_params.P_L0}, P(T)={base_params.P_T}, P(G)={base_params.P_G}, P(S)={base_params.P_S}")
    print("\n–ê–¥–∞–ø—Ç–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–¥ —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –∑–∞–¥–∞–Ω–∏–π:")
    
    for task_type, difficulty in test_cases:
        characteristics = TaskCharacteristics(task_type=task_type, difficulty=difficulty)
        adapted_params = bkt_model._adjust_parameters_for_task(base_params, characteristics)
        
        print(f\"\
üìù {task_type.upper()} ({difficulty}):\")
        print(f\"   P(G): {base_params.P_G:.3f} ‚Üí {adapted_params.P_G:.3f}\")
        print(f\"   P(S): {base_params.P_S:.3f} ‚Üí {adapted_params.P_S:.3f}\")
        print(f\"   P(T): {base_params.P_T:.3f} ‚Üí {adapted_params.P_T:.3f}\")
        
        # –ü—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É—Å–ø–µ—Ö–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞
        bkt_model.set_skill_parameters(1, base_params)
        prob = bkt_model.predict_performance(1, 1, characteristics)
        print(f\"   üéØ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É—Å–ø–µ—Ö–∞: {prob:.3f}\")
    
    # 3. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Å —Ç–∏–ø–∞–º–∏ –∑–∞–¥–∞–Ω–∏–π
    print(\"\
üë• –≠–¢–ê–ü 3: –°–¢–†–ê–¢–ï–ì–ò–ò –°–¢–£–î–ï–ù–¢–û–í –ò –¢–ò–ü–´ –ó–ê–î–ê–ù–ò–ô\")
    print(\"-\" * 50)
    
    strategies = ['beginner', 'intermediate', 'advanced', 'gifted', 'struggle']
    task_types_list = ['true_false', 'single', 'multiple']
    
    print(\"–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ø–æ —Ç–∏–ø–∞–º –∑–∞–¥–∞–Ω–∏–π:\")
    for strategy_name in strategies:
        strategy = StudentStrategyFactory.create_strategy(strategy_name)
        print(f\"\
üéì {strategy_name.upper()}:\")
        
        for task_type in task_types_list:
            preference = strategy.get_task_type_preference(task_type)
            if preference > 1.2:
                emoji = \"üíö\"
                desc = \"—Å–∏–ª—å–Ω–æ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç\"
            elif preference > 1.0:
                emoji = \"‚úÖ\"
                desc = \"–ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç\"
            elif preference > 0.8:
                emoji = \"‚ö™\"
                desc = \"–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ\"
            else:
                emoji = \"‚ùå\"
                desc = \"–∏–∑–±–µ–≥–∞–µ—Ç\"
            
            print(f\"   {task_type:12} {emoji} {preference:.2f} ({desc})\")
    
    # 4. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Å —É—á–µ—Ç–æ–º —Ç–∏–ø–æ–≤ –∑–∞–¥–∞–Ω–∏–π
    print(\"\
üî¨ –≠–¢–ê–ü 4: –ì–ï–ù–ï–†–ê–¶–ò–Ø –°–ò–ù–¢–ï–¢–ò–ß–ï–°–ö–ò–• –î–ê–ù–ù–´–•\")
    print(\"-\" * 50)
    
    generator = SyntheticDataGenerator()
    generator.load_course_data(['C1'])  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–¥–∏–Ω –∫—É—Ä—Å –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    
    # –°–æ–∑–¥–∞–µ–º —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Å —Ä–∞–∑–Ω—ã–º–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏
    students = generator.generate_students(
        count=5,
        strategy_distribution={
            'beginner': 0.2,
            'intermediate': 0.3,
            'advanced': 0.3,
            'gifted': 0.1,
            'struggle': 0.1
        }
    )
    
    print(f\"‚úÖ –°–æ–∑–¥–∞–Ω–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤: {len(students)}\")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–ø—ã—Ç–∫–∏ —Å —É—á–µ—Ç–æ–º —Ç–∏–ø–æ–≤ –∑–∞–¥–∞–Ω–∏–π
    attempts = generator.generate_attempts(
        students=students,
        attempts_per_student=50,
        time_period_days=30
    )
    
    print(f\"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–ø—ã—Ç–æ–∫: {len(attempts)}\")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    type_stats = {}
    difficulty_stats = {}
    success_by_type = {}
    
    for attempt in attempts:
        task_type = attempt.task_type
        difficulty = attempt.difficulty
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º
        if task_type not in type_stats:
            type_stats[task_type] = {'total': 0, 'correct': 0}
        type_stats[task_type]['total'] += 1
        if attempt.is_correct:
            type_stats[task_type]['correct'] += 1
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        if difficulty not in difficulty_stats:
            difficulty_stats[difficulty] = {'total': 0, 'correct': 0}
        difficulty_stats[difficulty]['total'] += 1
        if attempt.is_correct:
            difficulty_stats[difficulty]['correct'] += 1
    
    print(\"\
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –∑–∞–¥–∞–Ω–∏–π:\")
    for task_type, stats in type_stats.items():
        success_rate = stats['correct'] / stats['total'] * 100
        print(f\"   {task_type:12}: {stats['total']:3d} –ø–æ–ø—ã—Ç–æ–∫, —É—Å–ø–µ—Ö {success_rate:.1f}%\")
    
    print(\"\
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —É—Ä–æ–≤–Ω—è–º —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:\")
    for difficulty, stats in difficulty_stats.items():
        success_rate = stats['correct'] / stats['total'] * 100
        print(f\"   {difficulty:12}: {stats['total']:3d} –ø–æ–ø—ã—Ç–æ–∫, —É—Å–ø–µ—Ö {success_rate:.1f}%\")
    
    # 5. –û–±—É—á–µ–Ω–∏–µ BKT –º–æ–¥–µ–ª–∏ —Å —É—á–µ—Ç–æ–º —Ç–∏–ø–æ–≤ –∑–∞–¥–∞–Ω–∏–π
    print(\"\
üéØ –≠–¢–ê–ü 5: –û–ë–£–ß–ï–ù–ò–ï BKT –ú–û–î–ï–õ–ò\")
    print(\"-\" * 50)
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
    training_data = []
    for attempt in attempts[:300]:  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 300 –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
        training_data.append({
            'student_id': attempt.student_id,
            'skill_id': attempt.skill_id,
            'is_correct': attempt.is_correct,
            'task_type': attempt.task_type,
            'difficulty': attempt.difficulty
        })
    
    print(f\"üìö –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è: {len(training_data)}\")
    
    # –û–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å
    trainer = mlmodels.get_bkt_trainer()
    trainer.fit(bkt_model, training_data)
    
    print(\"‚úÖ –ú–æ–¥–µ–ª—å –æ–±—É—á–µ–Ω–∞\")
    
    # 6. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π —Å —É—á–µ—Ç–æ–º —Ç–∏–ø–æ–≤ –∑–∞–¥–∞–Ω–∏–π
    print(\"\
üîÆ –≠–¢–ê–ü 6: –ü–†–ï–î–°–ö–ê–ó–ê–ù–ò–Ø –° –£–ß–ï–¢–û–ú –¢–ò–ü–û–í –ó–ê–î–ê–ù–ò–ô\")
    print(\"-\" * 50)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∑–∞–¥–∞–Ω–∏–π
    test_student_id = 1
    test_skill_id = 1
    
    print(f\"–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞ {test_student_id}, –Ω–∞–≤—ã–∫ {test_skill_id}:\")
    
    for task_type in task_types_list:
        for difficulty in ['beginner', 'intermediate', 'advanced']:
            characteristics = TaskCharacteristics(task_type=task_type, difficulty=difficulty)
            prob = bkt_model.predict_performance(test_student_id, test_skill_id, characteristics)
            print(f\"   {task_type:12} ({difficulty:12}): {prob:.3f}\")
    
    # 7. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã
    print(\"\
üí° –≠–¢–ê–ü 7: –ê–î–ê–ü–¢–ò–í–ù–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò\")
    print(\"-\" * 50)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞
    available_skills = list(range(1, 11))  # –ü–µ—Ä–≤—ã–µ 10 –Ω–∞–≤—ã–∫–æ–≤
    recommendations = bkt_model.get_skill_recommendations(
        student_id=test_student_id,
        available_skills=available_skills,
        mastery_threshold=0.7
    )
    
    print(f\"üéì –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞ {test_student_id}:\")
    if recommendations:
        for i, skill_id in enumerate(recommendations[:5], 1):
            skill_name = f\"–ù–∞–≤—ã–∫ {skill_id}\"  # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–∞–≥—Ä—É–∂–∞–ª–∏ –±—ã –Ω–∞–∑–≤–∞–Ω–∏–µ
            mastery = bkt_model.get_student_mastery_summary(test_student_id).get(skill_id, 0.0)
            print(f\"   {i}. {skill_name} (—Ç–µ–∫—É—â–µ–µ –æ—Å–≤–æ–µ–Ω–∏–µ: {mastery:.2f})\")
    else:
        print(\"   –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π\")
    
    # 8. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print(\"\
üíæ –≠–¢–ê–ü 8: –°–û–•–†–ê–ù–ï–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–û–í\")
    print(\"-\" * 50)
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –µ—Å–ª–∏ –Ω–µ—Ç
    os.makedirs('temp_dir', exist_ok=True)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥–µ–ª—å
    model_path = 'temp_dir/final_bkt_model.json'
    bkt_model.save_model(model_path)
    print(f\"‚úÖ BKT –º–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {model_path}\")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç–∞—Å–µ—Ç
    dataset_path = 'temp_dir/final_synthetic_dataset.csv'
    generator.save_dataset(attempts, students, dataset_path, 'csv')
    print(f\"‚úÖ –°–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–π –¥–∞—Ç–∞—Å–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {dataset_path}\")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats_path = 'temp_dir/final_statistics.json'
    import json
    
    final_stats = {
        'timestamp': datetime.now().isoformat(),
        'courses_count': len(courses),
        'skills_count': len(skills),
        'tasks_count': len(tasks),
        'task_types_distribution': task_types,
        'difficulty_distribution': difficulty_levels,
        'generated_students': len(students),
        'generated_attempts': len(attempts),
        'training_examples': len(training_data),
        'type_success_stats': {
            task_type: {
                'total': stats['total'],
                'success_rate': stats['correct'] / stats['total']
            }
            for task_type, stats in type_stats.items()
        },
        'difficulty_success_stats': {
            difficulty: {
                'total': stats['total'],
                'success_rate': stats['correct'] / stats['total']
            }
            for difficulty, stats in difficulty_stats.items()
        }
    }
    
    with open(stats_path, 'w', encoding='utf-8') as f:
        json.dump(final_stats, f, ensure_ascii=False, indent=2)
    
    print(f\"‚úÖ –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {stats_path}\")
    
    # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    print(\"\
üéâ –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢\")
    print(\"=\" * 80)
    print(\"‚úÖ –°–∏—Å—Ç–µ–º–∞ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è MLModels —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞!\")
    print(\"\
üîß –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\")
    print(\"   ‚úì –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ç–∏–ø–æ–≤ –∑–∞–¥–∞–Ω–∏–π (true_false, single, multiple)\")
    print(\"   ‚úì –ê–¥–∞–ø—Ç–∞—Ü–∏—è –ø–æ–¥ —É—Ä–æ–≤–Ω–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ (beginner, intermediate, advanced)\")
    print(\"   ‚úì BKT –º–æ–¥–µ–ª—å —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –∞–¥–∞–ø—Ç–∞—Ü–∏–µ–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤\")
    print(\"   ‚úì –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Å –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º–∏ –ø–æ —Ç–∏–ø–∞–º –∑–∞–¥–∞–Ω–∏–π\")
    print(\"   ‚úì –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Å —É—á–µ—Ç–æ–º –Ω–æ–≤—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤\")
    print(\"   ‚úì –û–±—É—á–µ–Ω–∏–µ –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –º–æ–¥–µ–ª–∏\")
    print(\"   ‚úì –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã\")
    print(\"   ‚úì –ü–æ–ª–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Django\")
    
    print(\"\
üìÅ –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:\")
    print(f\"   ‚Ä¢ {model_path}\")
    print(f\"   ‚Ä¢ {dataset_path}\")
    print(f\"   ‚Ä¢ {stats_path}\")
    
    print(\"\
üöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ!\")
    print(\"=\" * 80)

if __name__ == '__main__':
    try:
        main()
    except Exception as e:
        print(f\"\
‚ùå –û–®–ò–ë–ö–ê: {e}\")
        import traceback
        traceback.print_exc()
        sys.exit(1)
