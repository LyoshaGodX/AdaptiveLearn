"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è BKT –º–æ–¥–µ–ª–∏ –≤—Å–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º
"""

from mlmodels.bkt.base_model import BKTModel, BKTParameters, TaskCharacteristics
import json

def test_bkt_requirements():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∫ BKT –º–æ–¥–µ–ª–∏"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–û–û–¢–í–ï–¢–°–¢–í–ò–Ø –¢–†–ï–ë–û–í–ê–ù–ò–Ø–ú BKT")
    print("=" * 50)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å
    bkt = BKTModel()
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ BKT –Ω–µ –∏–º–µ–µ—Ç –º–µ—Ç–æ–¥–æ–≤ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    print("1. ‚úÖ BKT –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–µ—Ç–æ–¥–æ–≤ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:")
    recommendation_methods = [
        'recommend_skills', 'get_skill_recommendations', 
        'recommend_tasks', 'get_task_recommendations'
    ]
    
    for method in recommendation_methods:
        if hasattr(bkt, method):
            print(f"   ‚ùå –ù–∞–π–¥–µ–Ω –º–µ—Ç–æ–¥ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: {method}")
        else:
            print(f"   ‚úÖ –ú–µ—Ç–æ–¥ {method} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
    
    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—á–µ—Ç –≥—Ä–∞—Ñ–∞ –Ω–∞–≤—ã–∫–æ–≤
    print("\n2. ‚úÖ BKT —É—á–∏—Ç—ã–≤–∞–µ—Ç –≥—Ä–∞—Ñ –Ω–∞–≤—ã–∫–æ–≤:")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥—Ä–∞—Ñ –Ω–∞–≤—ã–∫–æ–≤
    skills_graph = {
        1: [],        # –ë–∞–∑–æ–≤—ã–π –Ω–∞–≤—ã–∫ –±–µ–∑ –ø—Ä–µ—Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤
        2: [1],       # –ù–∞–≤—ã–∫ —Å –æ–¥–Ω–∏–º –ø—Ä–µ—Ä–µ–∫–≤–∏–∑–∏—Ç–æ–º
        3: [1, 2]     # –ù–∞–≤—ã–∫ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ø—Ä–µ—Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º–∏
    }
    bkt.set_skills_graph(skills_graph)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –Ω–∞–≤—ã–∫–æ–≤
    base_params = BKTParameters(P_L0=0.1, P_T=0.3, P_G=0.2, P_S=0.1)
    for skill_id in [1, 2, 3]:
        bkt.set_skill_parameters(skill_id, base_params)
    
    print(f"   ‚úÖ –ì—Ä–∞—Ñ –Ω–∞–≤—ã–∫–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {skills_graph}")
    print(f"   ‚úÖ –ú–µ—Ç–æ–¥ _adjust_initial_mastery_by_prerequisites –¥–æ—Å—Ç—É–ø–µ–Ω: {hasattr(bkt, '_adjust_initial_mastery_by_prerequisites')}")
    
    # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –≤—Å–µ—Ö –Ω–∞–≤—ã–∫–æ–≤ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞
    print("\n3. ‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –Ω–∞–≤—ã–∫–æ–≤ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞:")
    
    student_id = 1
    all_skills = bkt.initialize_student_all_skills(student_id, [1, 2, 3])
    
    print(f"   ‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞–≤—ã–∫–æ–≤: {len(all_skills)}")
    for skill_id, state in all_skills.items():
        print(f"   ‚úÖ –ù–∞–≤—ã–∫ {skill_id}: –Ω–∞—á–∞–ª—å–Ω–æ–µ –æ—Å–≤–æ–µ–Ω–∏–µ = {state.current_mastery:.3f}")
    
    # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ü–µ–Ω–∫—É –æ—Å–≤–æ–µ–Ω–∏—è –∫—É—Ä—Å–∞
    print("\n4. ‚úÖ –û—Ü–µ–Ω–∫–∞ –æ—Å–≤–æ–µ–Ω–∏—è –∫—É—Ä—Å–∞:")
    
    course_skills = [1, 2, 3]
    course_mastery = bkt.get_course_mastery(student_id, course_skills)
    print(f"   ‚úÖ –û—Å–≤–æ–µ–Ω–∏–µ –∫—É—Ä—Å–∞: {course_mastery:.3f}")
    print(f"   ‚úÖ –ú–µ—Ç–æ–¥ get_course_mastery —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ç–∏–ø–æ–≤ –∑–∞–¥–∞–Ω–∏–π
    print("\n5. ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∏–ø–æ–≤ –∑–∞–¥–∞–Ω–∏–π:")
    
    task_types = ['true_false', 'single', 'multiple']
    difficulties = ['beginner', 'intermediate', 'advanced']
    
    for task_type in task_types:
        for difficulty in difficulties:
            task_chars = TaskCharacteristics(task_type=task_type, difficulty=difficulty)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥—ã TaskCharacteristics
            weight = task_chars.get_answer_weight()
            guess_prob = task_chars.get_guess_probability()
            
            print(f"   ‚úÖ {task_type} ({difficulty}): –≤–µ—Å={weight}, —É–≥–∞–¥—ã–≤–∞–Ω–∏–µ={guess_prob}")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—Ü–µ–Ω–æ–∫
            if task_type == 'multiple':
                # –î–ª—è multiple –¥–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–±–∏–Ω–∞—Ä–Ω—ã–µ –æ—Ü–µ–Ω–∫–∏
                processed_score = task_chars.process_answer_score(0.7)  # –ß–∞—Å—Ç–∏—á–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ
                print(f"      ‚úÖ –ù–µ–±–∏–Ω–∞—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ 0.7 ‚Üí {processed_score}")
            else:
                # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö - –±–∏–Ω–∞—Ä–Ω—ã–µ
                processed_score = task_chars.process_answer_score(0.8)  # –ü—Ä–∞–≤–∏–ª—å–Ω–æ
                print(f"      ‚úÖ –ë–∏–Ω–∞—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ 0.8 ‚Üí {processed_score}")
    
    # 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å answer_score
    print("\n6. ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å answer_score:")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –æ—Ç–≤–µ—Ç–æ–≤
    test_cases = [
        ('true_false', 'beginner', 1.0, "–ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç"),
        ('single', 'intermediate', 1.0, "–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–±–æ—Ä"),
        ('multiple', 'advanced', 0.6, "—á–∞—Å—Ç–∏—á–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç"),
        ('true_false', 'beginner', 0.0, "–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç")
    ]
    
    for task_type, difficulty, answer_score, description in test_cases:
        task_chars = TaskCharacteristics(task_type=task_type, difficulty=difficulty)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        before_state = bkt.get_student_mastery(student_id, 1)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        updated_state = bkt.update_student_state(
            student_id, 1, answer_score, task_chars
        )
        
        after_state = updated_state.current_mastery
        
        print(f"   ‚úÖ {task_type} ({description}): {before_state:.3f} ‚Üí {after_state:.3f}")
    
    print("\n" + "=" * 50)
    print("‚úÖ –í–°–ï –¢–†–ï–ë–û–í–ê–ù–ò–Ø –í–´–ü–û–õ–ù–ï–ù–´ –£–°–ü–ï–®–ù–û!")
    print("=" * 50)
    
    return True

if __name__ == "__main__":
    test_bkt_requirements()
