"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è BKT —á–µ—Ä–µ–∑ –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ optimized_bkt_model
"""

import os
import sys
import django
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
sys.path.append(str(Path(__file__).parent))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'adaptive_learning.settings')
django.setup()

from mlmodels.interfaces.student_assessment_interface import StudentAssessmentInterface
from student.models import StudentProfile
from mlmodels.models import TaskAttempt, StudentSkillMastery
from datetime import datetime


def main():
    print('üéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï BKT –ü–†–û–ì–†–ê–ú–ú–ù–û–ì–û –ò–ù–¢–ï–†–§–ï–ô–°–ê')
    print('='*60)
    
    # 1. –ü–æ–ª—É—á–∞–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞
    try:
        student = StudentProfile.objects.get(user__username='student2')
        print(f'üë§ –°—Ç—É–¥–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω: {student.full_name}')
    except StudentProfile.DoesNotExist:
        print('‚ùå –°—Ç—É–¥–µ–Ω—Ç student2 –Ω–µ –Ω–∞–π–¥–µ–Ω')
        return
    
    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –î–û –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è BKT
    print(f'\nüìä –°–û–°–¢–û–Ø–ù–ò–ï –î–û –ü–†–ò–ú–ï–ù–ï–ù–ò–Ø BKT:')
    attempts_count = TaskAttempt.objects.filter(student=student).count()
    bkt_before = StudentSkillMastery.objects.filter(student=student).count()
    
    print(f'   üìù –ü–æ–ø—ã—Ç–æ–∫ –≤ –ë–î: {attempts_count}')
    print(f'   üß† BKT –∑–∞–ø–∏—Å–µ–π: {bkt_before}')
    
    if attempts_count == 0:
        print('   ‚ö†Ô∏è –£ —Å—Ç—É–¥–µ–Ω—Ç–∞ –Ω–µ—Ç –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏!')
        return
    
    # 3. –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å BKT
    print(f'\nüöÄ –°–û–ó–î–ê–ù–ò–ï BKT –ò–ù–¢–ï–†–§–ï–ô–°–ê:')
    try:
        interface = StudentAssessmentInterface()
        print(f'   ‚úÖ –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å–æ–∑–¥–∞–Ω')
        print(f'   üìÅ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –º–æ–¥–µ–ª—å: optimized_bkt_model/bkt_model_optimized.pkl')
        print(f'   üß† –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {interface.bkt_model is not None}')
    except Exception as e:
        print(f'   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: {e}')
        return
      # 4. –ü—Ä–∏–º–µ–Ω—è–µ–º BKT –∫ —Å—Ç—É–¥–µ–Ω—Ç—É
    print(f'\nüß† –ü–†–ò–ú–ï–ù–ï–ù–ò–ï BKT –ö –°–¢–£–î–ï–ù–¢–£:')
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ø—ã—Ç–∫–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞ –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        from mlmodels.interfaces.student_assessment_interface import AttemptData
        
        attempts = TaskAttempt.objects.filter(student=student).order_by('completed_at')
        attempt_data_list = []
          print(f'   üìù –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º {attempts.count()} –ø–æ–ø—ã—Ç–æ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç AttemptData...')
        
        for attempt in attempts:
            # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å –¥–ª—è –ø–æ–ø—ã—Ç–∫–∏
            course_id = None
            if attempt.task.courses.exists():
                course_id = attempt.task.courses.first().id
            
            for skill in attempt.task.skills.all():
                attempt_data = AttemptData(
                    student_id=student.id,
                    task_id=attempt.task.id,
                    skill_id=skill.id,
                    course_id=course_id,
                    is_correct=attempt.is_correct,
                    answer_score=1.0 if attempt.is_correct else 0.0,
                    task_type=attempt.task.task_type or 'single',
                    difficulty='medium',  # Default difficulty
                    timestamp=attempt.completed_at,
                    attempt_number=1
                )
                attempt_data_list.append(attempt_data)
        
        print(f'   üìä –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ {len(attempt_data_list)} –∑–∞–ø–∏—Å–µ–π –¥–ª—è BKT')
        
        start_time = datetime.now()
        result = interface.process_attempt_history(student.id, attempt_data_list)
        end_time = datetime.now()
        processing_time = (end_time - start_time).total_seconds()
        
        print(f'   ‚úÖ BKT —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω!')
        print(f'   ‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processing_time:.2f} —Å–µ–∫')
        print(f'   üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–æ–ø—ã—Ç–æ–∫: {result.get("processed_attempts", "N/A")}')
        print(f'   üéØ –ù–∞–≤—ã–∫–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(result.get("skills", {}))}')
        print(f'   üìö –ö—É—Ä—Å–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(result.get("courses", {}))}')
        
    except Exception as e:
        print(f'   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è BKT: {e}')
        import traceback
        traceback.print_exc()
        return
    
    # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ü–û–°–õ–ï –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è BKT
    print(f'\nüìä –°–û–°–¢–û–Ø–ù–ò–ï –ü–û–°–õ–ï –ü–†–ò–ú–ï–ù–ï–ù–ò–Ø BKT:')
    bkt_after = StudentSkillMastery.objects.filter(student=student).count()
    
    print(f'   üìù –ü–æ–ø—ã—Ç–æ–∫ –≤ –ë–î: {attempts_count}')
    print(f'   üß† BKT –∑–∞–ø–∏—Å–µ–π: {bkt_after}')
    
    if bkt_after > bkt_before:
        print(f'   ‚úÖ –°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤—ã—Ö BKT –∑–∞–ø–∏—Å–µ–π: {bkt_after - bkt_before}')
    else:
        print(f'   ‚ö†Ô∏è –ù–æ–≤—ã–µ BKT –∑–∞–ø–∏—Å–∏ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã')
    
    # 6. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã BKT
    print(f'\nüîç –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í BKT:')
    masteries = StudentSkillMastery.objects.filter(student=student).order_by('-current_mastery_prob')
    
    if masteries.exists():
        print(f'   üìà –¢–æ–ø –Ω–∞–≤—ã–∫–æ–≤ –ø–æ –æ—Å–≤–æ–µ–Ω–∏—é:')
        for i, mastery in enumerate(masteries[:5], 1):
            prob_percent = mastery.current_mastery_prob * 100
            print(f'     {i}. üéØ {mastery.skill.name}: {prob_percent:.1f}%')
            print(f'        üìä P(L0)={mastery.initial_mastery_prob:.3f}, '
                  f'P(T)={mastery.transition_prob:.3f}, '
                  f'P(G)={mastery.guess_prob:.3f}, '
                  f'P(S)={mastery.slip_prob:.3f}')
            print(f'        üìù {mastery.correct_attempts}/{mastery.attempts_count} –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö')
    else:
        print(f'   ‚ùå BKT –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã')
    
    # 7. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—É—á–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    print(f'\nüéì –ü–†–û–í–ï–†–ö–ê –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø –û–ë–£–ß–ï–ù–ù–´–• –ü–ê–†–ê–ú–ï–¢–†–û–í:')
    check_trained_parameters_usage(masteries)
    
    # 8. –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥—Ä—É–≥–∏–µ –º–µ—Ç–æ–¥—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    print(f'\nüîß –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–• –ú–ï–¢–û–î–û–í:')
    test_additional_methods(interface, student.id, result)
    
    print(f'\nüéâ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!')


def check_trained_parameters_usage(masteries):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ª–∏ –æ–±—É—á–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã"""
    import json
    from pathlib import Path
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—É—á–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        model_path = Path('optimized_bkt_model/bkt_model_optimized.json')
        if not model_path.exists():
            print(f'   ‚ö†Ô∏è –§–∞–π–ª –æ–±—É—á–µ–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω: {model_path}')
            return
        
        with open(model_path, 'r', encoding='utf-8') as f:
            trained_data = json.load(f)
        
        trained_params = trained_data.get('skill_parameters', {})
        
        matches_count = 0
        total_skills = masteries.count()
        
        for mastery in masteries:
            skill_id = str(mastery.skill.id)
            if skill_id in trained_params:
                trained = trained_params[skill_id]
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (—Å –Ω–µ–±–æ–ª—å—à–æ–π –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å—é)
                p_l0_match = abs(mastery.initial_mastery_prob - trained.get('P_L0', 0)) < 0.001
                p_t_match = abs(mastery.transition_prob - trained.get('P_T', 0)) < 0.001
                p_g_match = abs(mastery.guess_prob - trained.get('P_G', 0)) < 0.001
                p_s_match = abs(mastery.slip_prob - trained.get('P_S', 0)) < 0.001
                
                if p_l0_match and p_t_match and p_g_match and p_s_match:
                    matches_count += 1
        
        print(f'   üìä –ù–∞–≤—ã–∫–æ–≤ —Å –æ–±—É—á–µ–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: {matches_count}/{total_skills}')
        
        if matches_count > 0:
            print(f'   ‚úÖ –û–±—É—á–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ò–°–ü–û–õ–¨–ó–£–Æ–¢–°–Ø!')
        else:
            print(f'   ‚ùå –û–±—É—á–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ù–ï –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è!')
        
    except Exception as e:
        print(f'   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {e}')


def test_additional_methods(interface, student_id, result):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
    
    try:
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ü–µ–Ω–∫–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞
        assessment = interface.get_student_assessment(student_id)
        if assessment:
            print(f'   ‚úÖ get_student_assessment: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã')
        else:
            print(f'   ‚ö†Ô∏è get_student_assessment: –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã')
        
        # –¢–µ—Å—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        if 'skills' in result and result['skills']:
            skill_ids = list(result['skills'].keys())
            if skill_ids:
                recommendations = interface.get_learning_recommendations(student_id, skill_ids[:3])
                print(f'   ‚úÖ get_learning_recommendations: {len(recommendations)} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π')
            else:
                print(f'   ‚ö†Ô∏è get_learning_recommendations: –ù–µ—Ç –Ω–∞–≤—ã–∫–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è')
        
        # –¢–µ—Å—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –æ—Å–≤–æ–µ–Ω–∏—è –Ω–∞–≤—ã–∫–∞
        if 'skills' in result and result['skills']:
            skill_id = list(result['skills'].keys())[0]
            prediction = interface.predict_skill_mastery(student_id, skill_id, num_attempts=5)
            print(f'   ‚úÖ predict_skill_mastery: –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ {prediction:.3f}')
        
    except Exception as e:
        print(f'   ‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ—Ç–æ–¥–æ–≤: {e}')


def print_detailed_statistics():
    """–í—ã–≤–æ–¥–∏—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å—Ç—É–¥–µ–Ω—Ç—É"""
    print(f'\nüìã –î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–¢–£–î–ï–ù–¢–ê:')
    
    try:
        student = StudentProfile.objects.get(user__username='student2')
        attempts = TaskAttempt.objects.filter(student=student).order_by('completed_at')
        masteries = StudentSkillMastery.objects.filter(student=student)
        
        print(f'üë§ –°—Ç—É–¥–µ–Ω—Ç: {student.full_name}')
        print(f'üìù –í—Å–µ–≥–æ –ø–æ–ø—ã—Ç–æ–∫: {attempts.count()}')
        print(f'‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö: {attempts.filter(is_correct=True).count()}')
        print(f'‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö: {attempts.filter(is_correct=False).count()}')
        
        if attempts.exists():
            accuracy = attempts.filter(is_correct=True).count() / attempts.count() * 100
            print(f'üéØ –û–±—â–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å: {accuracy:.1f}%')
        
        print(f'üß† BKT –Ω–∞–≤—ã–∫–æ–≤: {masteries.count()}')
        
        if masteries.exists():
            avg_mastery = sum(m.current_mastery_prob for m in masteries) / masteries.count()
            print(f'üìä –°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å –æ—Å–≤–æ–µ–Ω–∏—è: {avg_mastery:.3f}')
        
    except Exception as e:
        print(f'‚ùå –û—à–∏–±–∫–∞ –≤—ã–≤–æ–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}')


if __name__ == "__main__":
    main()
    print_detailed_statistics()
