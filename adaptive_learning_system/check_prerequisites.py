"""
–ü—Ä–æ–≤–µ—Ä–æ—á–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º BKT –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —É—Å–ª–æ–≤–∏—è
"""

import os
import sys
import django
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
sys.path.append(str(Path(__file__).parent))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'adaptive_learning.settings')
django.setup()

from student.models import StudentProfile
from mlmodels.models import TaskAttempt, StudentSkillMastery
from mlmodels.interfaces.student_assessment_interface import StudentAssessmentInterface
import json


def check_prerequisites():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —É—Å–ª–æ–≤–∏—è"""
    print('üîç –ü–†–û–í–ï–†–ö–ê –ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–´–• –£–°–õ–û–í–ò–ô')
    print('='*50)
    
    all_checks_passed = True
    
    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—É–¥–µ–Ω—Ç–∞ student2
    print('1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—É–¥–µ–Ω—Ç–∞ student2...')
    try:
        student = StudentProfile.objects.get(user__username='student2')
        print(f'   ‚úÖ –°—Ç—É–¥–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω: {student.full_name}')
        print(f'   üìß Email: {student.email}')
        print(f'   üÜî ID: {student.id}')
    except StudentProfile.DoesNotExist:
        print('   ‚ùå –°—Ç—É–¥–µ–Ω—Ç student2 –ù–ï –Ω–∞–π–¥–µ–Ω!')
        all_checks_passed = False
        return all_checks_passed
    
    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ø—ã—Ç–æ–∫
    print(f'\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ø—ã—Ç–æ–∫...')
    attempts = TaskAttempt.objects.filter(student=student)
    attempts_count = attempts.count()
    
    if attempts_count > 0:
        print(f'   ‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ø—ã—Ç–æ–∫: {attempts_count}')
        correct_count = attempts.filter(is_correct=True).count()
        accuracy = (correct_count / attempts_count) * 100 if attempts_count > 0 else 0
        print(f'   üìä –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö: {correct_count}/{attempts_count} ({accuracy:.1f}%)')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–≤—ã–∫–∏ –≤ –ø–æ–ø—ã—Ç–∫–∞—Ö
        skills_in_attempts = set()
        for attempt in attempts[:5]:  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 5 –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            skills_in_attempts.update(attempt.task.skills.values_list('id', flat=True))
        
        print(f'   üéØ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –Ω–∞–≤—ã–∫–æ–≤ –≤ –ø–æ–ø—ã—Ç–∫–∞—Ö: {len(skills_in_attempts)}')
        print(f'   üìù –ü—Ä–∏–º–µ—Ä—ã –Ω–∞–≤—ã–∫–æ–≤: {list(skills_in_attempts)[:3]}')
    else:
        print('   ‚ùå –£ —Å—Ç—É–¥–µ–Ω—Ç–∞ –ù–ï–¢ –ø–æ–ø—ã—Ç–æ–∫!')
        all_checks_passed = False
    
    # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è BKT –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    print(f'\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è BKT –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤...')
    bkt_records = StudentSkillMastery.objects.filter(student=student)
    bkt_count = bkt_records.count()
    
    if bkt_count == 0:
        print(f'   ‚úÖ BKT –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç (–∫–∞–∫ –∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å)')
    else:
        print(f'   ‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ BKT –∑–∞–ø–∏—Å–µ–π: {bkt_count}')
        print(f'   üí° –≠—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, –Ω–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ BKT —É–∂–µ –ø—Ä–∏–º–µ–Ω—è–ª—Å—è')
        for record in bkt_records[:3]:
            print(f'      üéØ {record.skill.name}: P(Lt)={record.current_mastery_prob:.3f}')
    
    # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∏ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ø—ã—Ç–æ–∫ –ø–æ ID
    print(f'\n4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ student_assessment_interface...')
    try:
        interface = StudentAssessmentInterface()
        print(f'   ‚úÖ –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ')
        print(f'   üß† BKT –º–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {interface.bkt_model is not None}')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
        # –î–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –º–µ—Ç–æ–¥ process_attempt_history —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if hasattr(interface, 'process_attempt_history'):
            print(f'   ‚úÖ –ú–µ—Ç–æ–¥ process_attempt_history –¥–æ—Å—Ç—É–ø–µ–Ω')
        else:
            print(f'   ‚ùå –ú–µ—Ç–æ–¥ process_attempt_history –ù–ï –Ω–∞–π–¥–µ–Ω!')
            all_checks_passed = False
            
    except Exception as e:
        print(f'   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: {e}')
        all_checks_passed = False
    
    # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ BKT
    print(f'\n5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ BKT...')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã –º–æ–¥–µ–ª–∏
    model_pkl = Path('optimized_bkt_model/bkt_model_optimized.pkl')
    model_json = Path('optimized_bkt_model/bkt_model_optimized.json')
    
    if model_pkl.exists():
        print(f'   ‚úÖ –§–∞–π–ª –º–æ–¥–µ–ª–∏ –Ω–∞–π–¥–µ–Ω: {model_pkl}')
        print(f'   üìè –†–∞–∑–º–µ—Ä: {model_pkl.stat().st_size} –±–∞–π—Ç')
    else:
        print(f'   ‚ùå –§–∞–π–ª –º–æ–¥–µ–ª–∏ –ù–ï –Ω–∞–π–¥–µ–Ω: {model_pkl}')
        all_checks_passed = False
    
    if model_json.exists():
        print(f'   ‚úÖ –§–∞–π–ª –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –Ω–∞–π–¥–µ–Ω: {model_json}')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ JSON
        try:
            with open(model_json, 'r', encoding='utf-8') as f:
                model_data = json.load(f)
            
            skill_params = model_data.get('skill_parameters', {})
            print(f'   üìä –ü–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –Ω–∞–≤—ã–∫–æ–≤: {len(skill_params)}')
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            if skill_params:
                first_skill = list(skill_params.keys())[0]
                params = skill_params[first_skill]
                print(f'   üí° –ü—Ä–∏–º–µ—Ä (–Ω–∞–≤—ã–∫ {first_skill}):')
                print(f'      P(L0)={params.get("P_L0", "N/A"):.3f}')
                print(f'      P(T)={params.get("P_T", "N/A"):.3f}')
                print(f'      P(G)={params.get("P_G", "N/A"):.3f}')
                print(f'      P(S)={params.get("P_S", "N/A"):.3f}')
            
        except Exception as e:
            print(f'   ‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è JSON: {e}')
    else:
        print(f'   ‚ùå –§–∞–π–ª –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ù–ï –Ω–∞–π–¥–µ–Ω: {model_json}')
        all_checks_passed = False
    
    # –ò—Ç–æ–≥–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    print(f'\nüìã –ò–¢–û–ì–û–í–ê–Ø –ü–†–û–í–ï–†–ö–ê:')
    print('='*30)
    
    if all_checks_passed:
        print('‚úÖ –í–°–ï –£–°–õ–û–í–ò–Ø –í–´–ü–û–õ–ù–ï–ù–´!')
        print('üöÄ –ú–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å test_bkt_interface.py')
        
        print(f'\nüìä –ö–†–ê–¢–ö–ê–Ø –°–í–û–î–ö–ê:')
        print(f'   üë§ –°—Ç—É–¥–µ–Ω—Ç: {student.full_name} (ID: {student.id})')
        print(f'   üìù –ü–æ–ø—ã—Ç–æ–∫: {attempts_count}')
        print(f'   üß† BKT –∑–∞–ø–∏—Å–µ–π –¥–æ: {bkt_count}')
        print(f'   üéØ –ù–∞–≤—ã–∫–æ–≤ –≤ –ø–æ–ø—ã—Ç–∫–∞—Ö: {len(skills_in_attempts)}')
        
    else:
        print('‚ùå –ù–ï –í–°–ï –£–°–õ–û–í–ò–Ø –í–´–ü–û–õ–ù–ï–ù–´!')
        print('‚ö†Ô∏è –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º —Ç–µ—Å—Ç–∞')
    
    return all_checks_passed


def simulate_interface_workflow():
    """–ò–º–∏—Ç–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    print(f'\nüß™ –ò–ú–ò–¢–ê–¶–ò–Ø –†–ê–ë–û–¢–´ –ò–ù–¢–ï–†–§–ï–ô–°–ê:')
    print('-'*40)
    
    try:
        student = StudentProfile.objects.get(user__username='student2')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –º–æ–∂–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
        from mlmodels.interfaces.student_assessment_interface import AttemptData
        attempts = TaskAttempt.objects.filter(student=student)
        
        print(f'   üìù –ü–æ–ø—ã—Ç–æ–∫ –∏–∑ –ë–î: {attempts.count()}')
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ø—ã—Ç–æ–∫
        attempt_data_list = []
        for attempt in attempts[:3]:  # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 –¥–ª—è —Ç–µ—Å—Ç–∞
            course_id = None
            if attempt.task.courses.exists():
                course_id = attempt.task.courses.first().id
                
            for skill in attempt.task.skills.all():
                attempt_data = AttemptData(
                    student_id=student.id,
                    task_id=attempt.task.id,
                    skill_id=skill.id,
                    course_id=course_id,
                    is_correct=attempt.is_correct,
                    answer_score=1.0 if attempt.is_correct else 0.0,
                    task_type=attempt.task.task_type or 'single',
                    difficulty='medium',
                    timestamp=attempt.completed_at,
                    attempt_number=1
                )
                attempt_data_list.append(attempt_data)
        
        print(f'   üìä –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {len(attempt_data_list)} –∑–∞–ø–∏—Å–µ–π AttemptData')
        print(f'   ‚úÖ –§–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–≤—ã–∫–∏
        skill_ids = set(ad.skill_id for ad in attempt_data_list)
        print(f'   üéØ –ù–∞–≤—ã–∫–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {len(skill_ids)}')
        
    except Exception as e:
        print(f'   ‚ùå –û—à–∏–±–∫–∞ –∏–º–∏—Ç–∞—Ü–∏–∏: {e}')
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    if check_prerequisites():
        simulate_interface_workflow()
        print(f'\nüéâ –í–°–ï –ì–û–¢–û–í–û –ö –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Æ!')
    else:
        print(f'\n‚ö†Ô∏è –ò–°–ü–†–ê–í–¨–¢–ï –ü–†–û–ë–õ–ï–ú–´ –ü–ï–†–ï–î –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï–ú!')
