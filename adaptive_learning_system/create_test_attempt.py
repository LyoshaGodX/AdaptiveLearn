#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–¥–Ω–æ–π —Ç–µ—Å—Ç–æ–≤–æ–π –ø–æ–ø—ã—Ç–∫–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞

–°–æ–∑–¥–∞–µ—Ç –ø–æ–ø—ã—Ç–∫—É —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è –ø–æ –Ω–∞–≤—ã–∫—É "–û–±—ä–µ–∫—Ç–Ω–æ-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ"
—Å –Ω–µ—É–¥–∞—á–Ω—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞ ID=15.

–≠—Ç–æ –¥–æ–ª–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ü–µ–ø–æ—á–∫—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤:
1. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ø—ã—Ç–∫–∏ –≤ –ë–î
2. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Å—á–µ—Ç BKT –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
3. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
4. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–∫—É—â–µ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞
"""

import os
import sys
import django
from pathlib import Path
import random
from django.utils import timezone

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'adaptive_learning.settings')
django.setup()

from django.contrib.auth.models import User
from student.models import StudentProfile
from skills.models import Skill
from methodist.models import Task
from mlmodels.models import TaskAttempt, StudentSkillMastery, DQNRecommendation, StudentCurrentRecommendation


def create_test_attempt():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—É—é –ø–æ–ø—ã—Ç–∫—É –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞ ID=15"""
    
    print("üß™ –°–û–ó–î–ê–ù–ò–ï –¢–ï–°–¢–û–í–û–ô –ü–û–ü–´–¢–ö–ò")
    print("="*60)
    
    # 1. –ü–æ–ª—É—á–∞–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞
    try:
        user = User.objects.get(id=15)
        student_profile, _ = StudentProfile.objects.get_or_create(user=user)
        print(f"‚úÖ –°—Ç—É–¥–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω: {user.username} (ID: {user.id})")
    except User.DoesNotExist:
        print("‚ùå –°—Ç—É–¥–µ–Ω—Ç —Å ID=15 –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    # 2. –ü–æ–ª—É—á–∞–µ–º –Ω–∞–≤—ã–∫ "–û–±—ä–µ–∫—Ç–Ω–æ-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ"
    try:
        skill = Skill.objects.get(name="–û–±—ä–µ–∫—Ç–Ω–æ-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ")
        print(f"‚úÖ –ù–∞–≤—ã–∫ –Ω–∞–π–¥–µ–Ω: {skill.name} (ID: {skill.id})")
    except Skill.DoesNotExist:
        print("‚ùå –ù–∞–≤—ã–∫ '–û–±—ä–µ–∫—Ç–Ω–æ-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ' –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    # 3. –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞–Ω–∏—è –ø–æ —ç—Ç–æ–º—É –Ω–∞–≤—ã–∫—É
    tasks = Task.objects.filter(skills=skill, is_active=True)
    if not tasks.exists():
        print("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –ø–æ —ç—Ç–æ–º—É –Ω–∞–≤—ã–∫—É")
        return False
    
    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ
    task = random.choice(tasks)
    print(f"‚úÖ –í—ã–±—Ä–∞–Ω–æ –∑–∞–¥–∞–Ω–∏–µ: {task.title} (ID: {task.id})")
    print(f"   –°–ª–æ–∂–Ω–æ—Å—Ç—å: {task.difficulty}")
    print(f"   –¢–∏–ø: {task.task_type}")
    
    # 4. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ BKT –¥–ª—è —ç—Ç–æ–≥–æ –Ω–∞–≤—ã–∫–∞
    try:
        current_bkt = StudentSkillMastery.objects.get(
            student=student_profile,
            skill=skill
        )
        print(f"\nüìä –¢–ï–ö–£–©–ï–ï –°–û–°–¢–û–Ø–ù–ò–ï BKT:")
        print(f"   P(–∑–Ω–∞–Ω–∏–µ) = {current_bkt.current_mastery_prob:.4f}")
        print(f"   –ü–æ–ø—ã—Ç–æ–∫: {current_bkt.attempts_count}")
        print(f"   –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö: {current_bkt.correct_attempts}")
    except StudentSkillMastery.DoesNotExist:
        print(f"\nüìä BKT –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–∞–≤—ã–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç (–±—É–¥—É—Ç —Å–æ–∑–¥–∞–Ω—ã)")
    
    # 5. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    current_recommendations = DQNRecommendation.objects.filter(student_id=user.id).count()
    current_rec = StudentCurrentRecommendation.objects.filter(student=student_profile).first()
    
    print(f"\nüìã –¢–ï–ö–£–©–ò–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    print(f"   –í—Å–µ–≥–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {current_recommendations}")
    if current_rec:
        print(f"   –¢–µ–∫—É—â–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ó–∞–¥–∞–Ω–∏–µ #{current_rec.recommendation.task.id}")
    else:
        print(f"   –¢–µ–∫—É—â–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ù–µ—Ç")
    
    # 6. –°–æ–∑–¥–∞–µ–º –Ω–µ—É–¥–∞—á–Ω—É—é –ø–æ–ø—ã—Ç–∫—É
    print(f"\nüéØ –°–û–ó–î–ê–ù–ò–ï –ü–û–ü–´–¢–ö–ò...")
    print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: ‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ø—ã—Ç–∫—É —Å –Ω–µ—É–¥–∞—á–Ω—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
        attempt = TaskAttempt.objects.create(
            student=student_profile,
            task=task,
            is_correct=False,  # –ù–µ—É–¥–∞—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            given_answer="–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞",
            correct_answer=f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ {task.id}",
            started_at=timezone.now(),
            time_spent=random.randint(60, 300),  # –æ—Ç 1 –¥–æ 5 –º–∏–Ω—É—Ç
            metadata={
                'test_attempt': True,
                'skill': skill.name,
                'auto_generated': True
            }
        )
        
        print(f"‚úÖ –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —Å ID: {attempt.id}")
        print(f"   –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {attempt.completed_at}")
        print(f"   –ü–æ—Ç—Ä–∞—á–µ–Ω–æ –≤—Ä–µ–º–µ–Ω–∏: {attempt.time_spent} —Å–µ–∫")
        
        # 7. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        print(f"\nüîÑ –ü–†–û–í–ï–†–ö–ê –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–• –ò–ó–ú–ï–ù–ï–ù–ò–ô...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ BKT
        try:
            updated_bkt = StudentSkillMastery.objects.get(
                student=student_profile,
                skill=skill
            )
            print(f"‚úÖ BKT –æ–±–Ω–æ–≤–ª–µ–Ω:")
            print(f"   P(–∑–Ω–∞–Ω–∏–µ) = {updated_bkt.current_mastery_prob:.4f}")
            print(f"   –ü–æ–ø—ã—Ç–æ–∫: {updated_bkt.attempts_count}")
            print(f"   –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö: {updated_bkt.correct_attempts}")
        except StudentSkillMastery.DoesNotExist:
            print(f"‚ö†Ô∏è BKT –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ø—ã—Ç–∫–∏")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        new_recommendations_count = DQNRecommendation.objects.filter(student_id=user.id).count()
        new_current_rec = StudentCurrentRecommendation.objects.filter(student=student_profile).first()
        
        print(f"\nüìã –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û–°–õ–ï –ü–û–ü–´–¢–ö–ò:")
        print(f"   –í—Å–µ–≥–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {new_recommendations_count}")
        
        if new_recommendations_count > current_recommendations:
            print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {new_recommendations_count - current_recommendations}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é
            latest_rec = DQNRecommendation.objects.filter(student_id=user.id).order_by('-created_at').first()
            if latest_rec:
                print(f"   üìã –ü–æ—Å–ª–µ–¥–Ω—è—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:")
                print(f"      ID: {latest_rec.id}")
                print(f"      –ó–∞–¥–∞–Ω–∏–µ: {latest_rec.task.title}")
                print(f"      Q-value: {latest_rec.q_value:.4f}")
                print(f"      –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {latest_rec.confidence:.4f}")
        else:
            print(f"   ‚ö†Ô∏è –ù–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã")
        
        if new_current_rec:
            if not current_rec or new_current_rec.recommendation.id != current_rec.recommendation.id:
                print(f"   ‚úÖ –¢–µ–∫—É—â–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞:")
                print(f"      –ó–∞–¥–∞–Ω–∏–µ: {new_current_rec.recommendation.task.title}")
                print(f"      –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {new_current_rec.set_at}")
            else:
                print(f"   üìå –¢–µ–∫—É—â–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å")
        else:
            print(f"   ‚ö†Ô∏è –¢–µ–∫—É—â–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        
        print(f"\nüéâ –ü–û–ü–´–¢–ö–ê –£–°–ü–ï–®–ù–û –°–û–ó–î–ê–ù–ê!")
        print(f"   –ü–æ–ø—ã—Ç–∫–∞ ID: {attempt.id}")
        print(f"   –°—Ç—É–¥–µ–Ω—Ç: {user.username} (ID: {user.id})")
        print(f"   –ó–∞–¥–∞–Ω–∏–µ: {task.title} (ID: {task.id})")
        print(f"   –ù–∞–≤—ã–∫: {skill.name}")
        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: ‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ø—ã—Ç–∫–∏: {e}")
        import traceback
        traceback.print_exc()
        return False


if __name__ == "__main__":
    try:
        success = create_test_attempt()
        if success:
            print(f"\n‚úÖ –°–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            print(f"üí° –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –¥—Ä—É–≥–∏–µ —Ç–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:")
            print(f"   python mlmodels\\dqn\\tests\\test_student_analysis.py")
            print(f"   python mlmodels\\dqn\\tests\\test_recommendation_execution.py")
        else:
            print(f"\n‚ùå –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–∞–º–∏")
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
