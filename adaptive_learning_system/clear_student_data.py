"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ø—ã—Ç–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–∞ –∏ —Å–±—Ä–æ—Å–∞ BKT –¥–∞–Ω–Ω—ã—Ö
–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å BKT –º–æ–¥–µ–ª—å —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞
"""

import os
import sys
import django
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
sys.path.append(str(Path(__file__).parent))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'adaptive_learning.settings')
django.setup()

from django.contrib.auth.models import User
from student.models import StudentProfile
from mlmodels.models import TaskAttempt, StudentSkillMastery
from django.db import transaction


def clear_student_data(username):
    """–û—á–∏—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –ø–æ–ø—ã—Ç–æ–∫ –∏ BKT –¥–∞–Ω–Ω—ã–µ —Å—Ç—É–¥–µ–Ω—Ç–∞"""
    print(f"üßπ –û–ß–ò–°–¢–ö–ê –î–ê–ù–ù–´–• –°–¢–£–î–ï–ù–¢–ê: {username}")
    print("=" * 50)
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞
        user = User.objects.get(username=username)
        student = StudentProfile.objects.get(user=user)
        
        print(f"‚úÖ –°—Ç—É–¥–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω: {student.full_name}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        attempts_count = TaskAttempt.objects.filter(student=student).count()
        masteries_count = StudentSkillMastery.objects.filter(student=student).count()
        
        print(f"\nüìä –¢–ï–ö–£–©–ò–ï –î–ê–ù–ù–´–ï:")
        print(f"   üìù –ü–æ–ø—ã—Ç–æ–∫ –≤ –±–∞–∑–µ: {attempts_count}")
        print(f"   üß† BKT –∑–∞–ø–∏—Å–µ–π: {masteries_count}")
        
        if attempts_count == 0 and masteries_count == 0:
            print("   ‚ÑπÔ∏è  –î–∞–Ω–Ω—ã–µ —É–∂–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
            return
        
        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        confirmation = input(f"\n‚ùì –£–¥–∞–ª–∏—Ç—å –í–°–ï –¥–∞–Ω–Ω—ã–µ —Å—Ç—É–¥–µ–Ω—Ç–∞ {student.full_name}? (yes/no): ")
        if confirmation.lower() not in ['yes', 'y']:
            print("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
            return
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        with transaction.atomic():
            # –£–¥–∞–ª—è–µ–º –ø–æ–ø—ã—Ç–∫–∏
            deleted_attempts = TaskAttempt.objects.filter(student=student).delete()
            print(f"   üóëÔ∏è  –£–¥–∞–ª–µ–Ω–æ –ø–æ–ø—ã—Ç–æ–∫: {deleted_attempts[0]}")
            
            # –£–¥–∞–ª—è–µ–º BKT –¥–∞–Ω–Ω—ã–µ
            deleted_masteries = StudentSkillMastery.objects.filter(student=student).delete()
            print(f"   üóëÔ∏è  –£–¥–∞–ª–µ–Ω–æ BKT –∑–∞–ø–∏—Å–µ–π: {deleted_masteries[0]}")
            
        print(f"\n‚úÖ –û–ß–ò–°–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
        print(f"   –°—Ç—É–¥–µ–Ω—Ç {student.full_name} —Ç–µ–ø–µ—Ä—å –Ω–µ –∏–º–µ–µ—Ç:")
        print(f"   - –ò—Å—Ç–æ—Ä–∏–∏ –ø–æ–ø—ã—Ç–æ–∫ —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π")
        print(f"   - BKT –¥–∞–Ω–Ω—ã—Ö –æ–± –æ—Å–≤–æ–µ–Ω–∏–∏ –Ω–∞–≤—ã–∫–æ–≤")
        print(f"   - –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –¥–ª—è —á–∏—Å—Ç–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è BKT")
        
        return student
        
    except User.DoesNotExist:
        print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å username '{username}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return None
    except StudentProfile.DoesNotExist:
        print(f"‚ùå –ü—Ä–æ—Ñ–∏–ª—å —Å—Ç—É–¥–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '{username}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return None


def create_clean_attempts_for_student(student, num_attempts_per_skill=5):
    """–°–æ–∑–¥–∞–µ—Ç —á–∏—Å—Ç—É—é –∏—Å—Ç–æ—Ä–∏—é –ø–æ–ø—ã—Ç–æ–∫ –±–µ–∑ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è BKT"""
    print(f"\nüìù –°–û–ó–î–ê–ù–ò–ï –ß–ò–°–¢–û–ô –ò–°–¢–û–†–ò–ò –ü–û–ü–´–¢–û–ö")
    print("-" * 40)
    
    from methodist.models import Task
    from datetime import datetime, timedelta
    from django.utils import timezone
    import random
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞–Ω–∏—è –∏–∑ –∫—É—Ä—Å–æ–≤ —Å—Ç—É–¥–µ–Ω—Ç–∞
    from student.models import StudentCourseEnrollment
    enrollments = StudentCourseEnrollment.objects.filter(student=student)
    
    if not enrollments.exists():
        print("‚ùå –°—Ç—É–¥–µ–Ω—Ç –Ω–µ –∑–∞–ø–∏—Å–∞–Ω –Ω–∏ –Ω–∞ –æ–¥–∏–Ω –∫—É—Ä—Å")
        return
    
    all_tasks = []
    for enrollment in enrollments:
        course_tasks = Task.objects.filter(
            courses=enrollment.course,
            is_active=True
        ).prefetch_related('skills')[:15]  # –ë–µ—Ä–µ–º 15 –∑–∞–¥–∞–Ω–∏–π
        all_tasks.extend(course_tasks)
    
    if not all_tasks:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –∫—É—Ä—Å–æ–≤ —Å—Ç—É–¥–µ–Ω—Ç–∞")
        return
    
    print(f"   üìö –ù–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: {len(all_tasks)}")
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ–ø—ã—Ç–∫–∏
    attempts_data = []
    base_time = timezone.now() - timedelta(days=7)  # –ù–µ–¥–µ–ª—é –Ω–∞–∑–∞–¥
    current_time = base_time
    
    success_rate = 0.4  # –ù–∞—á–∏–Ω–∞–µ–º —Å 40% —É—Å–ø–µ—Ö–∞
    
    for i, task in enumerate(all_tasks):
        # –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ —É–ª—É—á—à–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (–∏–º–∏—Ç–∏—Ä—É–µ–º –æ–±—É—á–µ–Ω–∏–µ)
        current_success = min(0.8, success_rate + (i * 0.02))
        
        # –°–æ–∑–¥–∞–µ–º 2 –ø–æ–ø—ã—Ç–∫–∏ –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ
        for attempt_num in range(2):
            is_correct = random.random() < current_success
            
            # –í—Ç–æ—Ä–∞—è –ø–æ–ø—ã—Ç–∫–∞ –æ–±—ã—á–Ω–æ –ª—É—á—à–µ
            if attempt_num == 1:
                is_correct = random.random() < min(0.9, current_success + 0.2)
            
            time_spent = random.randint(60, 300)  # 1-5 –º–∏–Ω—É—Ç
            
            attempt_data = {
                'student': student,
                'task': task,
                'is_correct': is_correct,
                'started_at': current_time,
                'completed_at': current_time + timedelta(seconds=time_spent),
                'time_spent': time_spent,
                'given_answer': f"–û—Ç–≤–µ—Ç {attempt_num + 1} –Ω–∞ {task.title}",
            }
            
            attempts_data.append(attempt_data)
            current_time += timedelta(hours=random.randint(1, 12))
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ø—ã—Ç–∫–∏ –ë–ï–ó –≤—ã–∑–æ–≤–∞ BKT
    print(f"   üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ {len(attempts_data)} –ø–æ–ø—ã—Ç–æ–∫...")
    
    saved_count = 0
    with transaction.atomic():
        for attempt_data in attempts_data:
            try:
                # –°–æ–∑–¥–∞–µ–º –ø–æ–ø—ã—Ç–∫—É –ë–ï–ó —Å–∏–≥–Ω–∞–ª–æ–≤ (—á—Ç–æ–±—ã –Ω–µ –≤—ã–∑–≤–∞—Ç—å BKT)
                attempt = TaskAttempt(**attempt_data)
                attempt.save()
                saved_count += 1
                
            except Exception as e:
                print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ø—ã—Ç–∫–∏: {e}")
    
    print(f"   ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –ø–æ–ø—ã—Ç–æ–∫: {saved_count}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ BKT –¥–∞–Ω–Ω—ã–µ –ù–ï —Å–æ–∑–¥–∞–Ω—ã
    bkt_records = StudentSkillMastery.objects.filter(student=student).count()
    print(f"   üß† BKT –∑–∞–ø–∏—Å–µ–π –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {bkt_records}")
    
    if bkt_records == 0:
        print(f"   ‚úÖ –û—Ç–ª–∏—á–Ω–æ! BKT –Ω–µ –ø—Ä–∏–º–µ–Ω—è–ª—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
    else:
        print(f"   ‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: BKT –º–æ–≥ –±—ã—Ç—å –ø—Ä–∏–º–µ–Ω–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
    
    return saved_count


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    username = "student2"
    
    # 1. –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    student = clear_student_data(username)
    
    if not student:
        return
    
    # 2. –°–æ–∑–¥–∞–µ–º —á–∏—Å—Ç—É—é –∏—Å—Ç–æ—Ä–∏—é –ø–æ–ø—ã—Ç–æ–∫
    attempts_count = create_clean_attempts_for_student(student)
    
    if attempts_count > 0:
        print(f"\nüéØ –ì–û–¢–û–í–û –ö –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Æ BKT!")
        print("=" * 40)
        print(f"‚úÖ –°—Ç—É–¥–µ–Ω—Ç: {student.full_name}")
        print(f"‚úÖ –ü–æ–ø—ã—Ç–æ–∫ —Å–æ–∑–¥–∞–Ω–æ: {attempts_count}")
        print(f"‚úÖ BKT –¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        print(f"\nüöÄ –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
        print(f"1. –ó–∞–ø—É—Å—Ç–∏—Ç—å BKT –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —ç—Ç–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞")
        print(f"2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ BKT –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:")
        print(f"   - P(L0) - –Ω–∞—á–∞–ª—å–Ω–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∑–Ω–∞–Ω–∏—è")
        print(f"   - P(Lt) - —Ç–µ–∫—É—â–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∑–Ω–∞–Ω–∏—è")
        print(f"   - P(T) - –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è")
        print(f"   - P(G) - –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É–≥–∞–¥—ã–≤–∞–Ω–∏—è")
        print(f"   - P(S) - –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—à–∏–±–∫–∏")
        print(f"3. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã BKT")


if __name__ == "__main__":
    main()
