#!/usr/bin/env python
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤–æ–¥–∫–∏ –ø–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∑–∞–¥–∞–Ω–∏—è–º
"""

import os
import sys

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'adaptive_learning.settings')

import django
django.setup()

from methodist.models import Task, TaskAnswer

def create_summary():
    """–°–æ–∑–¥–∞–µ—Ç —Å–≤–æ–¥–∫—É –ø–æ –≤—Å–µ–º –∑–∞–¥–∞–Ω–∏—è–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    
    tasks = Task.objects.all().prefetch_related('answers', 'skills', 'courses').order_by('id')
    
    print(f"–í—Å–µ–≥–æ –∑–∞–¥–∞–Ω–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {tasks.count()}")
    print("=" * 80)
    
    type_counts = {}
    difficulty_counts = {}
    
    for task in tasks:
        # –ü–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        type_counts[task.task_type] = type_counts.get(task.task_type, 0) + 1
        difficulty_counts[task.difficulty] = difficulty_counts.get(task.difficulty, 0) + 1
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–¥–∞–Ω–∏–∏
        print(f"ID: {task.id}")
        print(f"–ù–∞–∑–≤–∞–Ω–∏–µ: {task.title}")
        print(f"–¢–∏–ø: {task.task_type}")
        print(f"–°–ª–æ–∂–Ω–æ—Å—Ç—å: {task.difficulty}")
        print(f"–ù–∞–≤—ã–∫–∏: {', '.join([skill.name for skill in task.skills.all()])}")
        print(f"–ö—É—Ä—Å—ã: {', '.join([course.name for course in task.courses.all()])}")
        print(f"–í–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤: {task.answers.count()}")
        
        if task.answers.count() > 0:
            print("–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤:")
            for answer in task.answers.all().order_by('order'):
                status = "‚úì" if answer.is_correct else "‚úó"
                print(f"  {answer.order + 1}. {answer.text} {status}")
        
        print("-" * 80)
    
    print("\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"–¢–∏–ø—ã –∑–∞–¥–∞–Ω–∏–π:")
    for task_type, count in type_counts.items():
        print(f"  {task_type}: {count}")
    
    print(f"–£—Ä–æ–≤–Ω–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:")
    for difficulty, count in difficulty_counts.items():
        print(f"  {difficulty}: {count}")

if __name__ == '__main__':
    print("=" * 80)
    print("–°–í–û–î–ö–ê –ü–û –ò–ú–ü–û–†–¢–ò–†–û–í–ê–ù–ù–´–ú –ó–ê–î–ê–ù–ò–Ø–ú")
    print("=" * 80)
    
    create_summary()
