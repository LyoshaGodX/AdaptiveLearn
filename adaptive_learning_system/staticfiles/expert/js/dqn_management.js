// AdaptiveLearn Expert Module - DQN Management JavaScript

document.addEventListener('DOMContentLoaded', function() {
    initDQNManagement();
});

// –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è DQN —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
function initDQNManagement() {
    console.log('üß† DQN Management: Initializing...');
    
    initStudentSelection();
    initFeedbackControls();
    initDatasetModal();
    initScrollAnimations();
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—ã–±–æ—Ä–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
function initStudentSelection() {
    const studentCards = document.querySelectorAll('.student-card');
    
    studentCards.forEach(card => {
        card.addEventListener('click', function() {
            const studentId = this.dataset.studentId;
            if (studentId) {
                // –î–æ–±–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç –≤—ã–±–æ—Ä–∞
                studentCards.forEach(c => c.classList.remove('selected'));
                this.classList.add('selected');
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
                showLoadingIndicator('–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç—É–¥–µ–Ω—Ç–∞...');
                
                // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Å—Ç—É–¥–µ–Ω—Ç–∞
                window.location.href = `/expert/dqn/student/${studentId}/`;
            }
        });
        
        // –≠—Ñ—Ñ–µ–∫—Ç—ã –Ω–∞–≤–µ–¥–µ–Ω–∏—è
        card.addEventListener('mouseenter', function() {
            this.style.transform = 'translateY(-6px) scale(1.02)';
        });
        
        card.addEventListener('mouseleave', function() {
            if (!this.classList.contains('selected')) {
                this.style.transform = 'translateY(0) scale(1)';
            }
        });
    });
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç—Ä–æ–ª–æ–≤ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
function initFeedbackControls() {
    const feedbackPairs = document.querySelectorAll('.recommendation-pair');
    
    feedbackPairs.forEach((pair, index) => {
        const pairId = pair.dataset.recommendationId;
        if (!pairId || pair.classList.contains('has-feedback')) return;
        
        const feedbackControls = pair.querySelector('.feedback-controls');
        if (!feedbackControls) return;
        
        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª—ã –¥–ª—è —ç—Ç–æ–π –ø–∞—Ä—ã
        createFeedbackControls(feedbackControls, pairId, index);
    });
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª–æ–≤ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–∞—Ä—ã
function createFeedbackControls(container, recommendationId, index) {
    let selectedType = null;
    let selectedStrength = null;
    
    // –ö–Ω–æ–ø–∫–∏ —Ç–∏–ø–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
    const typeButtons = container.querySelectorAll('.feedback-type-btn');
    typeButtons.forEach(btn => {
        btn.addEventListener('click', function() {
            const type = this.dataset.type;
            
            // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —É –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫ —Ç–∏–ø–∞
            typeButtons.forEach(b => b.classList.remove('active'));
            
            // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ç–µ–∫—É—â—É—é –∫–Ω–æ–ø–∫—É
            this.classList.add('active');
            selectedType = type;
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä —Å–∏–ª—ã
            const strengthSelector = container.querySelector('.strength-selector');
            if (strengthSelector) {
                strengthSelector.style.display = 'block';
                strengthSelector.classList.add('fade-in-up');
            }
            
            updateSaveButtonState();
        });
    });
    
    // –ö–Ω–æ–ø–∫–∏ —Å–∏–ª—ã
    const strengthButtons = container.querySelectorAll('.strength-btn');
    strengthButtons.forEach(btn => {
        btn.addEventListener('click', function() {
            const strength = this.dataset.strength;
            
            // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —É –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫ —Å–∏–ª—ã
            strengthButtons.forEach(b => b.classList.remove('active'));
            
            // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ç–µ–∫—É—â—É—é –∫–Ω–æ–ø–∫—É
            this.classList.add('active');
            selectedStrength = strength;
            
            updateSaveButtonState();
        });
    });
    
    // –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    const saveBtn = container.querySelector('.save-feedback-btn');
    if (saveBtn) {
        saveBtn.addEventListener('click', function() {
            if (!selectedType || !selectedStrength) {
                showNotification('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∏ —Å–∏–ª—É –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏', 'warning');
                return;
            }
            
            const comment = container.querySelector('.comment-input')?.value || '';
            
            saveFeedback(recommendationId, selectedType, selectedStrength, comment, container);
        });
    }
    
    // –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    function updateSaveButtonState() {
        if (saveBtn) {
            const isReady = selectedType && selectedStrength;
            saveBtn.disabled = !isReady;
            
            if (isReady) {
                saveBtn.style.opacity = '1';
                saveBtn.style.cursor = 'pointer';
            } else {
                saveBtn.style.opacity = '0.6';
                saveBtn.style.cursor = 'not-allowed';
            }
        }
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
    updateSaveButtonState();
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
async function saveFeedback(recommendationId, feedbackType, strength, comment, container) {
    try {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        const saveBtn = container.querySelector('.save-feedback-btn');
        const originalText = saveBtn.textContent;
        saveBtn.textContent = '–°–æ—Ö—Ä–∞–Ω—è–µ–º...';
        saveBtn.disabled = true;
        
        const response = await fetch('/expert/dqn/feedback/', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-CSRFToken': getCsrfToken()
            },
            body: JSON.stringify({
                recommendation_id: recommendationId,
                feedback_type: feedbackType,
                strength: strength,
                comment: comment
            })
        });
        
        const result = await response.json();
        
        if (result.success) {
            // –£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ
            showNotification('–†–∞–∑–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!', 'success');
            
            // –û–±–Ω–æ–≤–ª—è–µ–º UI
            const pair = container.closest('.recommendation-pair');
            pair.classList.add('has-feedback');
            
            // –ó–∞–º–µ–Ω—è–µ–º –∫–æ–Ω—Ç—Ä–æ–ª—ã –Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π —Ä–∞–∑–º–µ—Ç–∫–µ
            showExistingFeedback(container, feedbackType, strength, comment, result.reward_value);
            
            // –ê–Ω–∏–º–∞—Ü–∏—è —É—Å–ø–µ—Ö–∞
            pair.style.background = 'rgba(16, 185, 129, 0.05)';
            setTimeout(() => {
                pair.style.background = '';
            }, 2000);
            
        } else {
            throw new Error(result.message || '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
        }
        
    } catch (error) {
        console.error('Error saving feedback:', error);
        showNotification(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ${error.message}`, 'error');
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
        const saveBtn = container.querySelector('.save-feedback-btn');
        saveBtn.textContent = originalText;
        saveBtn.disabled = false;
    }
}

// –ü–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
function showExistingFeedback(container, type, strength, comment, rewardValue) {
    const typeText = type === 'positive' ? '–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è' : '–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è';
    const strengthText = {
        'low': '–ù–∏–∑–∫–∞—è',
        'medium': '–°—Ä–µ–¥–Ω—è—è',
        'high': '–í—ã—Å–æ–∫–∞—è'
    }[strength];
    
    const feedbackHtml = `
        <div class="existing-feedback">
            <div class="existing-feedback-header">
                <i class="fas fa-check-circle"></i>
                –†–∞–∑–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞
            </div>
            <div class="existing-feedback-details">
                <strong>–¢–∏–ø:</strong> ${typeText}<br>
                <strong>–°–∏–ª–∞:</strong> ${strengthText}<br>
                <strong>–ù–∞–≥—Ä–∞–¥–∞:</strong> ${rewardValue > 0 ? '+' : ''}${rewardValue}<br>
                ${comment ? `<strong>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</strong> ${comment}` : ''}
            </div>
        </div>
    `;
    
    container.innerHTML = feedbackHtml;
    container.classList.add('has-feedback');
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–∞—Ç–∞—Å–µ—Ç–∞
function initDatasetModal() {
    const viewDatasetBtn = document.getElementById('viewDatasetBtn');
    const datasetModal = document.getElementById('datasetModal');
    const startTrainingBtn = document.getElementById('startTrainingBtn');
    
    if (viewDatasetBtn) {
        viewDatasetBtn.addEventListener('click', function() {
            showDatasetModal();
        });
    }
    
    if (startTrainingBtn) {
        startTrainingBtn.addEventListener('click', function() {
            // –ü–æ–∫–∞ —ç—Ç–æ –∑–∞–≥–ª—É—à–∫–∞
            showNotification('–§—É–Ω–∫—Ü–∏—è –¥–æ–æ–±—É—á–µ–Ω–∏—è DQN –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ø–æ–∑–∂–µ', 'info');
        });
    }
}

// –ü–æ–∫–∞–∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–∞—Ç–∞—Å–µ—Ç–∞
async function showDatasetModal() {
    try {
        const response = await fetch('/expert/dqn/dataset/');
        const html = await response.text();
        
        // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        const modal = document.createElement('div');
        modal.className = 'modal fade';
        modal.id = 'datasetModal';
        modal.innerHTML = `
            <div class="modal-dialog modal-xl">
                <div class="modal-content">
                    ${html}
                </div>
            </div>
        `;
        
        document.body.appendChild(modal);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        const bootstrapModal = new bootstrap.Modal(modal);
        bootstrapModal.show();
        
        // –£–¥–∞–ª—è–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è
        modal.addEventListener('hidden.bs.modal', function() {
            modal.remove();
        });
        
    } catch (error) {
        console.error('Error loading dataset:', error);
        showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞—Ç–∞—Å–µ—Ç–∞', 'error');
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∏–º–∞—Ü–∏–π –ø—Ä–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–µ
function initScrollAnimations() {
    const observerOptions = {
        threshold: 0.1,
        rootMargin: '0px 0px -50px 0px'
    };
    
    const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                entry.target.classList.add('fade-in-up');
                observer.unobserve(entry.target);
            }
        });
    }, observerOptions);
    
    // –ù–∞–±–ª—é–¥–∞–µ–º –∑–∞ –ø–∞—Ä–∞–º–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    document.querySelectorAll('.recommendation-pair').forEach(pair => {
        observer.observe(pair);
    });
    
    // –ù–∞–±–ª—é–¥–∞–µ–º –∑–∞ –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
    document.querySelectorAll('.student-card').forEach(card => {
        observer.observe(card);
    });
}

// –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

// –ü–æ–ª—É—á–µ–Ω–∏–µ CSRF —Ç–æ–∫–µ–Ω–∞
function getCsrfToken() {
    return document.querySelector('[name=csrfmiddlewaretoken]')?.value || 
           document.querySelector('meta[name="csrf-token"]')?.getAttribute('content') || '';
}

// –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
function showNotification(message, type = 'info') {
    if (typeof ExpertUtils !== 'undefined' && ExpertUtils.showNotification) {
        ExpertUtils.showNotification(message, type);
    } else {
        // Fallback –¥–ª—è —Å–ª—É—á–∞—è, –µ—Å–ª–∏ ExpertUtils –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
        alert(message);
    }
}

// –ü–æ–∫–∞–∑ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–≥—Ä—É–∑–∫–∏
function showLoadingIndicator(message = '–ó–∞–≥—Ä—É–∑–∫–∞...') {
    // –°–æ–∑–¥–∞–µ–º overlay —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º –∑–∞–≥—Ä—É–∑–∫–∏
    const overlay = document.createElement('div');
    overlay.id = 'loadingOverlay';
    overlay.style.cssText = `
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(255, 255, 255, 0.9);
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        z-index: 9999;
        font-family: inherit;
    `;
    
    overlay.innerHTML = `
        <div style="text-align: center;">
            <div style="width: 40px; height: 40px; border: 4px solid #e2e8f0; border-top: 4px solid #3b82f6; border-radius: 50%; animation: spin 1s linear infinite; margin-bottom: 1rem;"></div>
            <div style="font-size: 1.1rem; font-weight: 600; color: #1e293b;">${message}</div>
        </div>
    `;
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –∞–Ω–∏–º–∞—Ü–∏–∏
    const style = document.createElement('style');
    style.textContent = `
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
    `;
    document.head.appendChild(style);
    
    document.body.appendChild(overlay);
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–±–∏—Ä–∞–µ–º —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
        if (overlay.parentNode) {
            overlay.remove();
        }
    }, 10000);
}

// –£–±–∏—Ä–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
function hideLoadingIndicator() {
    const overlay = document.getElementById('loadingOverlay');
    if (overlay) {
        overlay.remove();
    }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —É—Ä–æ–≤–Ω—è–º–∏ –æ—Å–≤–æ–µ–Ω–∏—è –Ω–∞–≤—ã–∫–æ–≤
const DQNUtils = {
    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Ä–æ–≤–Ω—è –æ—Å–≤–æ–µ–Ω–∏—è –Ω–∞–≤—ã–∫–∞
    formatMasteryLevel: function(level) {
        if (level >= 0.8) return { text: '–í—ã—Å–æ–∫–∏–π', class: 'mastery-high' };
        if (level >= 0.5) return { text: '–°—Ä–µ–¥–Ω–∏–π', class: 'mastery-medium' };
        return { text: '–ù–∏–∑–∫–∏–π', class: 'mastery-low' };
    },
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Q-value
    formatQValue: function(qValue) {
        return qValue.toFixed(4);
    },
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –¥–ª—è —Ç–∏–ø–∞ –∑–∞–¥–∞–Ω–∏—è
    getTaskTypeIcon: function(taskType) {
        const icons = {
            'single': 'fas fa-dot-circle',
            'multiple': 'fas fa-check-square',
            'true_false': 'fas fa-question-circle'
        };
        return icons[taskType] || 'fas fa-question';
    },
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –¥–ª—è —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    getDifficultyColor: function(difficulty) {
        const colors = {
            'beginner': 'difficulty-beginner',
            'intermediate': 'difficulty-intermediate', 
            'advanced': 'difficulty-advanced'
        };
        return colors[difficulty] || 'difficulty-beginner';
    }
};

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —É—Ç–∏–ª–∏—Ç—ã
window.DQNUtils = DQNUtils;
