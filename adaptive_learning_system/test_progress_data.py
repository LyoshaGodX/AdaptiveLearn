import os
import sys
import django

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ Django –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'adaptive_learning.settings')
django.setup()

from student.models import StudentProfile
from mlmodels.models import StudentSkillMastery
from django.contrib.auth.models import User

def test_progress_data():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–≤"""
    
    # –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞
    try:
        user = User.objects.first()
        if not user:
            print("‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ")
            return
            
        profile, created = StudentProfile.objects.get_or_create(
            user=user,
            defaults={
                'full_name': f"{user.first_name} {user.last_name}".strip() or user.username,
                'email': user.email or f"{user.username}@example.com"
            }
        )
        
        print(f"‚úÖ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Ñ–∏–ª—å: {profile.full_name}")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–µ –Ω–∞–≤—ã–∫–æ–≤
        skill_masteries = StudentSkillMastery.objects.filter(
            student=profile
        ).select_related('skill')
        
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –æ –Ω–∞–≤—ã–∫–∞—Ö: {skill_masteries.count()}")
        
        for mastery in skill_masteries[:5]:  # –ü–µ—Ä–≤—ã–µ 5 –Ω–∞–≤—ã–∫–æ–≤
            percentage = round(mastery.current_mastery_prob * 100, 1)
            print(f"   ‚Ä¢ {mastery.skill.name}: {percentage}% (prob: {mastery.current_mastery_prob})")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ—Ü–µ–Ω—Ç –≤ –¥–æ–ø—É—Å—Ç–∏–º–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
            if 0 <= percentage <= 100:
                print(f"     ‚úÖ –ü—Ä–æ—Ü–µ–Ω—Ç –≤ –Ω–æ—Ä–º–µ")
            else:
                print(f"     ‚ùå –ü—Ä–æ—Ü–µ–Ω—Ç –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞!")
                
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        test_values = [0, 0.25, 0.5, 0.75, 1.0, 1.2, -0.1]
        print("\nüß™ –¢–µ—Å—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏:")
        
        for prob in test_values:
            percentage = round(prob * 100, 1)
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω 0-100%
            safe_percentage = max(0, min(100, percentage))
            
            print(f"   Prob: {prob} ‚Üí {percentage}% ‚Üí Safe: {safe_percentage}%")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    test_progress_data()
