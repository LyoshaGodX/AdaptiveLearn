"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –æ–±—É—á–µ–Ω–Ω–æ–π BKT –º–æ–¥–µ–ª–∏ —Å –Ω–æ–≤—ã–º–∏ –Ω–∞–≤—ã–∫–∞–º–∏
"""

import pickle
import json
from pathlib import Path
from mlmodels.bkt.base_model import BKTModel, BKTParameters
from mlmodels.bkt.base_model import TaskCharacteristics

def test_new_skills_prediction():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –Ω–æ–≤—ã—Ö –Ω–∞–≤—ã–∫–æ–≤"""
    
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –†–ê–ë–û–¢–´ –° –ù–û–í–´–ú–ò –ù–ê–í–´–ö–ê–ú–ò")
    print("=" * 60)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—É—á–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å
    model_path = "optimized_bkt_model/bkt_model_optimized.pkl"
    
    print(f"üìÇ –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å –∏–∑: {model_path}")
    
    try:
        with open(model_path, 'rb') as f:
            bkt_model = pickle.load(f)
        
        print(f"‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        print(f"   üéØ –û–±—É—á–µ–Ω–Ω—ã—Ö –Ω–∞–≤—ã–∫–æ–≤: {len(bkt_model.skill_parameters)}")
        print(f"   üìä –û–±—É—á–µ–Ω–Ω—ã–µ –Ω–∞–≤—ã–∫–∏: {list(bkt_model.skill_parameters.keys())}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {e}")
        return
    
    print("\n" + "=" * 60)
    print("üÜï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ù–û–í–´–• –ù–ê–í–´–ö–û–í")
    print("=" * 60)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ —Å –Ω–æ–≤—ã–º–∏ –Ω–∞–≤—ã–∫–∞–º–∏
    test_scenarios = [
        {
            "name": "–ù–∞–≤—ã–∫ –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (ID=999)",
            "skill_id": 999,
            "description": "–ü–æ–ª–Ω–æ—Å—Ç—å—é –Ω–æ–≤—ã–π –Ω–∞–≤—ã–∫, –Ω–µ –æ–±—É—á–µ–Ω–Ω—ã–π –≤ –º–æ–¥–µ–ª–∏"
        },
        {
            "name": "–ù–∞–≤—ã–∫ —Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ (ID=1000)", 
            "skill_id": 1000,
            "description": "–ù–æ–≤—ã–π –Ω–∞–≤—ã–∫ —Å –∑–∞—Ä–∞–Ω–µ–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"
        },
        {
            "name": "–ù–∞–≤—ã–∫ —Å –ø—Ä–µ—Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º–∏ (ID=1001)",
            "skill_id": 1001, 
            "description": "–ù–æ–≤—ã–π –Ω–∞–≤—ã–∫, –∑–∞–≤–∏—Å—è—â–∏–π –æ—Ç –æ–±—É—á–µ–Ω–Ω—ã—Ö –Ω–∞–≤—ã–∫–æ–≤"
        }
    ]
    
    student_id = 9999  # –ù–æ–≤—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π —Å—Ç—É–¥–µ–Ω—Ç
    
    for scenario in test_scenarios:
        print(f"\nüìã –°—Ü–µ–Ω–∞—Ä–∏–π: {scenario['name']}")
        print(f"   üìù –û–ø–∏—Å–∞–Ω–∏–µ: {scenario['description']}")
        
        skill_id = scenario['skill_id']
        
        # 1. –î–ª—è –Ω–∞–≤—ã–∫–∞ ID=1000 —É—Å—Ç–∞–Ω–æ–≤–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        if skill_id == 1000:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ä–µ–¥–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
            avg_params = calculate_average_parameters(bkt_model)
            bkt_model.skill_parameters[skill_id] = avg_params
            print(f"   ‚öôÔ∏è –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: P_L0={avg_params.P_L0:.3f}, P_T={avg_params.P_T:.3f}")
        
        # 2. –î–ª—è –Ω–∞–≤—ã–∫–∞ ID=1001 –¥–æ–±–∞–≤–∏–º –ø—Ä–µ—Ä–µ–∫–≤–∏–∑–∏—Ç—ã
        if skill_id == 1001:
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç –æ–±—É—á–µ–Ω–Ω—ã—Ö –Ω–∞–≤—ã–∫–æ–≤ 1 –∏ 2
            if not hasattr(bkt_model, 'skills_graph') or bkt_model.skills_graph is None:
                bkt_model.skills_graph = {}
            bkt_model.skills_graph[skill_id] = [1, 2]  # –ù–∞–≤—ã–∫–∏ 1 –∏ 2 –∫–∞–∫ –ø—Ä–µ—Ä–µ–∫–≤–∏–∑–∏—Ç—ã
            print(f"   üîó –î–æ–±–∞–≤–ª–µ–Ω—ã –ø—Ä–µ—Ä–µ–∫–≤–∏–∑–∏—Ç—ã: –Ω–∞–≤—ã–∫–∏ {bkt_model.skills_graph[skill_id]}")
        
        # 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –Ω–∞–≤—ã–∫–∞
        try:
            initial_state = bkt_model.initialize_student(student_id, skill_id)
            print(f"   ‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: –æ—Å–≤–æ–µ–Ω–∏–µ = {initial_state.current_mastery:.3f}")
            
            # 4. –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑
            initial_prediction = bkt_model.get_student_mastery(student_id, skill_id)
            print(f"   üéØ –ù–∞—á–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑: {initial_prediction:.3f}")
            
            # 5. –°–∏–º—É–ª–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ø—ã—Ç–æ–∫ —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π
            task_chars = TaskCharacteristics(task_type="single_choice", difficulty="medium")
            
            print(f"   üîÑ –°–∏–º—É–ª—è—Ü–∏—è –æ–±—É—á–µ–Ω–∏—è:")
            for attempt in range(1, 4):
                # –°–∏–º—É–ª–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é 0.7
                is_correct = attempt > 1  # 2 –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –∏–∑ 3
                answer_score = 1.0 if is_correct else 0.0
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                bkt_model.update_student_state(student_id, skill_id, answer_score, task_chars)
                
                # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–≥–Ω–æ–∑
                mastery = bkt_model.get_student_mastery(student_id, skill_id)
                result = "‚úÖ" if is_correct else "‚ùå"
                print(f"      –ü–æ–ø—ã—Ç–∫–∞ {attempt}: {result} ‚Üí –æ—Å–≤–æ–µ–Ω–∏–µ = {mastery:.3f}")
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
    
    print("\n" + "=" * 60)
    print("üìä –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í")
    print("=" * 60)
    
    # –í—ã–≤–æ–¥—ã
    analysis = """
    üîç –í–´–í–û–î–´:
    
    1. ‚úÖ –†–ê–ë–û–¢–ê –° –ù–û–í–´–ú–ò –ù–ê–í–´–ö–ê–ú–ò:
       - –ú–æ–¥–µ–ª—å –º–æ–∂–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–µ –Ω–∞–≤—ã–∫–∏
       - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (P_L0=0.1) –µ—Å–ª–∏ –Ω–µ—Ç –æ–±—É—á–µ–Ω–Ω—ã—Ö
       - –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    
    2. üîó –£–ß–ï–¢ –ü–†–ï–†–ï–ö–í–ò–ó–ò–¢–û–í:
       - –ù–æ–≤—ã–µ –Ω–∞–≤—ã–∫–∏ –º–æ–≥—É—Ç –∏–º–µ—Ç—å –ø—Ä–µ—Ä–µ–∫–≤–∏–∑–∏—Ç—ã –∏–∑ –æ–±—É—á–µ–Ω–Ω—ã—Ö –Ω–∞–≤—ã–∫–æ–≤
       - –ù–∞—á–∞–ª—å–Ω–æ–µ –æ—Å–≤–æ–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ—Ç—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ—Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤
       - –ì—Ä–∞—Ñ –Ω–∞–≤—ã–∫–æ–≤ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —Ä–∞—Å—à–∏—Ä—è–µ—Ç—Å—è
    
    3. üìà –û–ë–ù–û–í–õ–ï–ù–ò–ï –ò –ü–†–û–ì–ù–û–ó–ò–†–û–í–ê–ù–ò–ï:
       - –ú–æ–¥–µ–ª—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –Ω–æ–≤—ã—Ö –Ω–∞–≤—ã–∫–æ–≤
       - –ü—Ä–æ–≥–Ω–æ–∑—ã –æ—Å–Ω–æ–≤–∞–Ω—ã –Ω–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö (–æ–±—É—á–µ–Ω–Ω—ã—Ö –∏–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
       - –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª –æ–±—É—á–µ–Ω–∏—è BKT
    """
    
    print(analysis)

def calculate_average_parameters(bkt_model: BKTModel) -> BKTParameters:
    """–í—ã—á–∏—Å–ª–∏—Ç—å —Å—Ä–µ–¥–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏"""
    if not bkt_model.skill_parameters:
        return BKTParameters(P_L0=0.1, P_T=0.3, P_G=0.2, P_S=0.1)
    
    params_list = list(bkt_model.skill_parameters.values())
    
    avg_P_L0 = sum(p.P_L0 for p in params_list) / len(params_list)
    avg_P_T = sum(p.P_T for p in params_list) / len(params_list)
    avg_P_G = sum(p.P_G for p in params_list) / len(params_list)
    avg_P_S = sum(p.P_S for p in params_list) / len(params_list)
    
    return BKTParameters(
        P_L0=avg_P_L0,
        P_T=avg_P_T,
        P_G=avg_P_G,
        P_S=avg_P_S
    )

def demonstrate_skill_addition_strategies():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –Ω–∞–≤—ã–∫–æ–≤"""
    
    print("\n" + "=" * 60)
    print("üí° –°–¢–†–ê–¢–ï–ì–ò–ò –î–û–ë–ê–í–õ–ï–ù–ò–Ø –ù–û–í–´–• –ù–ê–í–´–ö–û–í")
    print("=" * 60)
    
    strategies = """
    üéØ –†–ï–ö–û–ú–ï–ù–î–£–ï–ú–´–ï –°–¢–†–ê–¢–ï–ì–ò–ò:
    
    1. üìä –ü–ê–†–ê–ú–ï–¢–†–´ –ü–û –£–ú–û–õ–ß–ê–ù–ò–Æ:
       - P_L0 = 0.1 (–Ω–∏–∑–∫–æ–µ –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞–Ω–∏–µ)
       - P_T = 0.3 (—É–º–µ—Ä–µ–Ω–Ω–∞—è –æ–±—É—á–∞–µ–º–æ—Å—Ç—å)
       - P_G = 0.2 (–Ω–∏–∑–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É–≥–∞–¥—ã–≤–∞–Ω–∏—è)
       - P_S = 0.1 (–Ω–∏–∑–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—à–∏–±–∫–∏)
    
    2. üìà –°–†–ï–î–ù–ò–ï –ò–ó –û–ë–£–ß–ï–ù–ù–´–•:
       - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ä–µ–¥–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ –≤—Å–µ–º –æ–±—É—á–µ–Ω–Ω—ã–º –Ω–∞–≤—ã–∫–∞–º
       - –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –Ω–∞–≤—ã–∫–æ–≤ —Å—Ö–æ–∂–µ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    
    3. üé≠ –ü–ê–†–ê–ú–ï–¢–†–´ –ü–û –¢–ò–ü–£:
       - –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞: P_L0=0.05, P_T=0.25, P_G=0.15, P_S=0.08
       - –Ø–∑—ã–∫–∏: P_L0=0.15, P_T=0.35, P_G=0.25, P_S=0.12
       - –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ: P_L0=0.08, P_T=0.30, P_G=0.10, P_S=0.15
    
    4. üîó –ù–ê–°–õ–ï–î–û–í–ê–ù–ò–ï –û–¢ –ü–†–ï–†–ï–ö–í–ò–ó–ò–¢–û–í:
       - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞–∏–±–æ–ª–µ–µ –±–ª–∏–∑–∫–æ–≥–æ –ø—Ä–µ—Ä–µ–∫–≤–∏–∑–∏—Ç–∞
       - –°–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    
    5. üéì –ò–ù–ö–†–ï–ú–ï–ù–¢–ê–õ–¨–ù–û–ï –û–ë–£–ß–ï–ù–ò–ï:
       - –°–æ–±–∏—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –Ω–æ–≤–æ–º—É –Ω–∞–≤—ã–∫—É
       - –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–æ–±—É—á–∞—Ç—å –º–æ–¥–µ–ª—å
       - –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ —É–ª—É—á—à–∞—Ç—å —Ç–æ—á–Ω–æ—Å—Ç—å
    """
    
    print(strategies)

if __name__ == "__main__":
    test_new_skills_prediction()
    demonstrate_skill_addition_strategies()
